
FTP_SD_STM32G4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9ac  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011ec  0800cb8c  0800cb8c  0000db8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd78  0800dd78  0000f140  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd78  0800dd78  0000ed78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd80  0800dd80  0000f140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd80  0800dd80  0000ed80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dd84  0800dd84  0000ed84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000140  20000000  0800dd88  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028f0  20000140  0800dec8  0000f140  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002a30  0800dec8  0000fa30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f140  2**0
                  CONTENTS, READONLY
 12 .debug_info   000155f4  00000000  00000000  0000f170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036ae  00000000  00000000  00024764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  00027e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e2c  00000000  00000000  00029088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002974a  00000000  00000000  00029eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a2c6  00000000  00000000  000535fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f471b  00000000  00000000  0006d8c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00161fdf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005870  00000000  00000000  00162024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00167894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000140 	.word	0x20000140
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cb74 	.word	0x0800cb74

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000144 	.word	0x20000144
 800021c:	0800cb74 	.word	0x0800cb74

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	f5ad 5d80 	sub.w	sp, sp, #4096	@ 0x1000
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f000 fe21 	bl	8001230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 f88d 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f000 f953 	bl	800089c <MX_GPIO_Init>
  MX_SPI2_Init();
 80005f6:	f000 f8d5 	bl	80007a4 <MX_SPI2_Init>
  if (MX_FATFS_Init() != APP_OK) {
 80005fa:	f003 fccf 	bl	8003f9c <MX_FATFS_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <main+0x28>
    Error_Handler();
 8000604:	f000 fa72 	bl	8000aec <Error_Handler>
  }
  MX_SPI3_Init();
 8000608:	f000 f90a 	bl	8000820 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 800060c:	2000      	movs	r0, #0
 800060e:	f000 fc7b 	bl	8000f08 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000612:	2101      	movs	r1, #1
 8000614:	2000      	movs	r0, #0
 8000616:	f000 fcad 	bl	8000f74 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800061a:	4b33      	ldr	r3, [pc, #204]	@ (80006e8 <main+0x108>)
 800061c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000620:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000622:	4b31      	ldr	r3, [pc, #196]	@ (80006e8 <main+0x108>)
 8000624:	2200      	movs	r2, #0
 8000626:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000628:	4b2f      	ldr	r3, [pc, #188]	@ (80006e8 <main+0x108>)
 800062a:	2200      	movs	r2, #0
 800062c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800062e:	4b2e      	ldr	r3, [pc, #184]	@ (80006e8 <main+0x108>)
 8000630:	2200      	movs	r2, #0
 8000632:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000634:	4b2c      	ldr	r3, [pc, #176]	@ (80006e8 <main+0x108>)
 8000636:	2200      	movs	r2, #0
 8000638:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800063a:	492b      	ldr	r1, [pc, #172]	@ (80006e8 <main+0x108>)
 800063c:	2000      	movs	r0, #0
 800063e:	f000 fd25 	bl	800108c <BSP_COM_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <main+0x6c>
  {
    Error_Handler();
 8000648:	f000 fa50 	bl	8000aec <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	/* Wait for SD module reset */
	HAL_Delay(500);
 800064c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000650:	f000 fe5e 	bl	8001310 <HAL_Delay>
	buff_length = sprintf(tx_buff, "Inicio de prueba\r\n");
 8000654:	4925      	ldr	r1, [pc, #148]	@ (80006ec <main+0x10c>)
 8000656:	4826      	ldr	r0, [pc, #152]	@ (80006f0 <main+0x110>)
 8000658:	f00b f908 	bl	800b86c <siprintf>
 800065c:	4603      	mov	r3, r0
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b24      	ldr	r3, [pc, #144]	@ (80006f4 <main+0x114>)
 8000662:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&hcom_uart[COM1],  (uint8_t *)tx_buff, buff_length, 100);
 8000664:	4b23      	ldr	r3, [pc, #140]	@ (80006f4 <main+0x114>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	461a      	mov	r2, r3
 800066c:	2364      	movs	r3, #100	@ 0x64
 800066e:	4920      	ldr	r1, [pc, #128]	@ (80006f0 <main+0x110>)
 8000670:	4821      	ldr	r0, [pc, #132]	@ (80006f8 <main+0x118>)
 8000672:	f002 fee9 	bl	8003448 <HAL_UART_Transmit>

	/* Mount SD Card */
	if(f_mount(&fs, "", 0) != FR_OK)
 8000676:	2200      	movs	r2, #0
 8000678:	4920      	ldr	r1, [pc, #128]	@ (80006fc <main+0x11c>)
 800067a:	4821      	ldr	r0, [pc, #132]	@ (8000700 <main+0x120>)
 800067c:	f006 fde2 	bl	8007244 <f_mount>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <main+0xaa>
		Error_Handler();
 8000686:	f000 fa31 	bl	8000aec <Error_Handler>
//		Error_Handler();

	/* Unmount SDCARD */ //Para esta prueba se ocupa tener montada la unidad SD
//	if(f_mount(NULL, "", 1) != FR_OK)
//		Error_Handler();
	buff_length = sprintf(tx_buff, "FIN de prueba\r\n");
 800068a:	491e      	ldr	r1, [pc, #120]	@ (8000704 <main+0x124>)
 800068c:	4818      	ldr	r0, [pc, #96]	@ (80006f0 <main+0x110>)
 800068e:	f00b f8ed 	bl	800b86c <siprintf>
 8000692:	4603      	mov	r3, r0
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4b17      	ldr	r3, [pc, #92]	@ (80006f4 <main+0x114>)
 8000698:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&hcom_uart[COM1],  (uint8_t *)tx_buff, buff_length, 100);
 800069a:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <main+0x114>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	461a      	mov	r2, r3
 80006a2:	2364      	movs	r3, #100	@ 0x64
 80006a4:	4912      	ldr	r1, [pc, #72]	@ (80006f0 <main+0x110>)
 80006a6:	4814      	ldr	r0, [pc, #80]	@ (80006f8 <main+0x118>)
 80006a8:	f002 fece 	bl	8003448 <HAL_UART_Transmit>

//##############################################################################################################33
	configuracion_IP();
 80006ac:	f000 f9a8 	bl	8000a00 <configuracion_IP>

	uint8_t gFTPBUF[_MAX_SS];
	uint8_t ret;
	uint8_t IPAddress[4] = {192,168,10,10};
 80006b0:	f107 0308 	add.w	r3, r7, #8
 80006b4:	461a      	mov	r2, r3
 80006b6:	4b14      	ldr	r3, [pc, #80]	@ (8000708 <main+0x128>)
 80006b8:	f842 3c08 	str.w	r3, [r2, #-8]
	ftpd_init(IPAddress);
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	3b08      	subs	r3, #8
 80006c2:	4618      	mov	r0, r3
 80006c4:	f009 f9e4 	bl	8009a90 <ftpd_init>

  while (1)
  {
	/* Infinite loop */
	if((ret = ftpd_run(gFTPBUF)) < 0)
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	3b04      	subs	r3, #4
 80006ce:	4618      	mov	r0, r3
 80006d0:	f009 fa58 	bl	8009b84 <ftpd_run>
 80006d4:	4603      	mov	r3, r0
 80006d6:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80006da:	f102 0207 	add.w	r2, r2, #7
 80006de:	7013      	strb	r3, [r2, #0]
	{
		Error_Handler();
	}
	HAL_Delay(15);
 80006e0:	200f      	movs	r0, #15
 80006e2:	f000 fe15 	bl	8001310 <HAL_Delay>
	if((ret = ftpd_run(gFTPBUF)) < 0)
 80006e6:	e7ef      	b.n	80006c8 <main+0xe8>
 80006e8:	2000015c 	.word	0x2000015c
 80006ec:	0800cb8c 	.word	0x0800cb8c
 80006f0:	2000126c 	.word	0x2000126c
 80006f4:	200012d0 	.word	0x200012d0
 80006f8:	200012e0 	.word	0x200012e0
 80006fc:	0800cba0 	.word	0x0800cba0
 8000700:	20000234 	.word	0x20000234
 8000704:	0800cba4 	.word	0x0800cba4
 8000708:	0a0aa8c0 	.word	0x0a0aa8c0

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b094      	sub	sp, #80	@ 0x50
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 0318 	add.w	r3, r7, #24
 8000716:	2238      	movs	r2, #56	@ 0x38
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f00b f99e 	bl	800ba5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800072e:	2000      	movs	r0, #0
 8000730:	f001 f91a 	bl	8001968 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000734:	2302      	movs	r3, #2
 8000736:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000738:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800073c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073e:	2340      	movs	r3, #64	@ 0x40
 8000740:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000742:	2302      	movs	r3, #2
 8000744:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000746:	2302      	movs	r3, #2
 8000748:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800074a:	2304      	movs	r3, #4
 800074c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800074e:	2355      	movs	r3, #85	@ 0x55
 8000750:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000752:	2302      	movs	r3, #2
 8000754:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000756:	2302      	movs	r3, #2
 8000758:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800075a:	2302      	movs	r3, #2
 800075c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075e:	f107 0318 	add.w	r3, r7, #24
 8000762:	4618      	mov	r0, r3
 8000764:	f001 f9b4 	bl	8001ad0 <HAL_RCC_OscConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800076e:	f000 f9bd 	bl	8000aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	230f      	movs	r3, #15
 8000774:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000776:	2303      	movs	r3, #3
 8000778:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2104      	movs	r1, #4
 800078a:	4618      	mov	r0, r3
 800078c:	f001 fcb2 	bl	80020f4 <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000796:	f000 f9a9 	bl	8000aec <Error_Handler>
  }
}
 800079a:	bf00      	nop
 800079c:	3750      	adds	r7, #80	@ 0x50
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000818 <MX_SPI2_Init+0x74>)
 80007aa:	4a1c      	ldr	r2, [pc, #112]	@ (800081c <MX_SPI2_Init+0x78>)
 80007ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000818 <MX_SPI2_Init+0x74>)
 80007b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007b6:	4b18      	ldr	r3, [pc, #96]	@ (8000818 <MX_SPI2_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007bc:	4b16      	ldr	r3, [pc, #88]	@ (8000818 <MX_SPI2_Init+0x74>)
 80007be:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80007c2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c4:	4b14      	ldr	r3, [pc, #80]	@ (8000818 <MX_SPI2_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ca:	4b13      	ldr	r3, [pc, #76]	@ (8000818 <MX_SPI2_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007d0:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <MX_SPI2_Init+0x74>)
 80007d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007d6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000818 <MX_SPI2_Init+0x74>)
 80007da:	2220      	movs	r2, #32
 80007dc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007de:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <MX_SPI2_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <MX_SPI2_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000818 <MX_SPI2_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80007f0:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <MX_SPI2_Init+0x74>)
 80007f2:	2207      	movs	r2, #7
 80007f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <MX_SPI2_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007fc:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <MX_SPI2_Init+0x74>)
 80007fe:	2208      	movs	r2, #8
 8000800:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	@ (8000818 <MX_SPI2_Init+0x74>)
 8000804:	f001 fe92 	bl	800252c <HAL_SPI_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800080e:	f000 f96d 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	2000016c 	.word	0x2000016c
 800081c:	40003800 	.word	0x40003800

08000820 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000824:	4b1b      	ldr	r3, [pc, #108]	@ (8000894 <MX_SPI3_Init+0x74>)
 8000826:	4a1c      	ldr	r2, [pc, #112]	@ (8000898 <MX_SPI3_Init+0x78>)
 8000828:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800082a:	4b1a      	ldr	r3, [pc, #104]	@ (8000894 <MX_SPI3_Init+0x74>)
 800082c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000830:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000832:	4b18      	ldr	r3, [pc, #96]	@ (8000894 <MX_SPI3_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000838:	4b16      	ldr	r3, [pc, #88]	@ (8000894 <MX_SPI3_Init+0x74>)
 800083a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800083e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000840:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <MX_SPI3_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000846:	4b13      	ldr	r3, [pc, #76]	@ (8000894 <MX_SPI3_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800084c:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_SPI3_Init+0x74>)
 800084e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000852:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000854:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <MX_SPI3_Init+0x74>)
 8000856:	2218      	movs	r2, #24
 8000858:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <MX_SPI3_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000860:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <MX_SPI3_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <MX_SPI3_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800086c:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <MX_SPI3_Init+0x74>)
 800086e:	2207      	movs	r2, #7
 8000870:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000872:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <MX_SPI3_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000878:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <MX_SPI3_Init+0x74>)
 800087a:	2208      	movs	r2, #8
 800087c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	@ (8000894 <MX_SPI3_Init+0x74>)
 8000880:	f001 fe54 	bl	800252c <HAL_SPI_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800088a:	f000 f92f 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200001d0 	.word	0x200001d0
 8000898:	40003c00 	.word	0x40003c00

0800089c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	@ 0x28
 80008a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	4b34      	ldr	r3, [pc, #208]	@ (8000984 <MX_GPIO_Init+0xe8>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b6:	4a33      	ldr	r2, [pc, #204]	@ (8000984 <MX_GPIO_Init+0xe8>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008be:	4b31      	ldr	r3, [pc, #196]	@ (8000984 <MX_GPIO_Init+0xe8>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ca:	4b2e      	ldr	r3, [pc, #184]	@ (8000984 <MX_GPIO_Init+0xe8>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ce:	4a2d      	ldr	r2, [pc, #180]	@ (8000984 <MX_GPIO_Init+0xe8>)
 80008d0:	f043 0320 	orr.w	r3, r3, #32
 80008d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008d6:	4b2b      	ldr	r3, [pc, #172]	@ (8000984 <MX_GPIO_Init+0xe8>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008da:	f003 0320 	and.w	r3, r3, #32
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	4b28      	ldr	r3, [pc, #160]	@ (8000984 <MX_GPIO_Init+0xe8>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e6:	4a27      	ldr	r2, [pc, #156]	@ (8000984 <MX_GPIO_Init+0xe8>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ee:	4b25      	ldr	r3, [pc, #148]	@ (8000984 <MX_GPIO_Init+0xe8>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	4b22      	ldr	r3, [pc, #136]	@ (8000984 <MX_GPIO_Init+0xe8>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	4a21      	ldr	r2, [pc, #132]	@ (8000984 <MX_GPIO_Init+0xe8>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000906:	4b1f      	ldr	r3, [pc, #124]	@ (8000984 <MX_GPIO_Init+0xe8>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000912:	4b1c      	ldr	r3, [pc, #112]	@ (8000984 <MX_GPIO_Init+0xe8>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000916:	4a1b      	ldr	r2, [pc, #108]	@ (8000984 <MX_GPIO_Init+0xe8>)
 8000918:	f043 0308 	orr.w	r3, r3, #8
 800091c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800091e:	4b19      	ldr	r3, [pc, #100]	@ (8000984 <MX_GPIO_Init+0xe8>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000922:	f003 0308 	and.w	r3, r3, #8
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_S_GPIO_Port, CS_S_Pin, GPIO_PIN_SET);
 800092a:	2201      	movs	r2, #1
 800092c:	2110      	movs	r1, #16
 800092e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000932:	f001 f801 	bl	8001938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8000936:	2201      	movs	r2, #1
 8000938:	2104      	movs	r1, #4
 800093a:	4813      	ldr	r0, [pc, #76]	@ (8000988 <MX_GPIO_Init+0xec>)
 800093c:	f000 fffc 	bl	8001938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_S_Pin */
  GPIO_InitStruct.Pin = CS_S_Pin;
 8000940:	2310      	movs	r3, #16
 8000942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800094c:	2301      	movs	r3, #1
 800094e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_S_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4619      	mov	r1, r3
 8000956:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800095a:	f000 fe6b 	bl	8001634 <HAL_GPIO_Init>

  /*Configure GPIO pin : ETH_CS_Pin */
  GPIO_InitStruct.Pin = ETH_CS_Pin;
 800095e:	2304      	movs	r3, #4
 8000960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800096a:	2301      	movs	r3, #1
 800096c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ETH_CS_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	4804      	ldr	r0, [pc, #16]	@ (8000988 <MX_GPIO_Init+0xec>)
 8000976:	f000 fe5d 	bl	8001634 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800097a:	bf00      	nop
 800097c:	3728      	adds	r7, #40	@ 0x28
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40021000 	.word	0x40021000
 8000988:	48000c00 	.word	0x48000c00

0800098c <CS_SEL_FUN>:

/* USER CODE BEGIN 4 */
void CS_SEL_FUN(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
// CS y GPIO de SPI3
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	2104      	movs	r1, #4
 8000994:	4802      	ldr	r0, [pc, #8]	@ (80009a0 <CS_SEL_FUN+0x14>)
 8000996:	f000 ffcf 	bl	8001938 <HAL_GPIO_WritePin>
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	48000c00 	.word	0x48000c00

080009a4 <CS_DES_FUN>:

void CS_DES_FUN(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	2104      	movs	r1, #4
 80009ac:	4802      	ldr	r0, [pc, #8]	@ (80009b8 <CS_DES_FUN+0x14>)
 80009ae:	f000 ffc3 	bl	8001938 <HAL_GPIO_WritePin>
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	48000c00 	.word	0x48000c00

080009bc <SPI_Received>:

// Tener cuidado con el SPI que se esta usando
uint8_t SPI_Received(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
	uint8_t RX_Buff;
	HAL_SPI_Receive(&hspi3, &RX_Buff, 1, 100);
 80009c2:	1df9      	adds	r1, r7, #7
 80009c4:	2364      	movs	r3, #100	@ 0x64
 80009c6:	2201      	movs	r2, #1
 80009c8:	4803      	ldr	r0, [pc, #12]	@ (80009d8 <SPI_Received+0x1c>)
 80009ca:	f001 ffd0 	bl	800296e <HAL_SPI_Receive>
	return RX_Buff;
 80009ce:	79fb      	ldrb	r3, [r7, #7]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	200001d0 	.word	0x200001d0

080009dc <SPI_Transmit>:

void SPI_Transmit(uint8_t TX_Buff)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi3, &TX_Buff, 1, 100);
 80009e6:	1df9      	adds	r1, r7, #7
 80009e8:	2364      	movs	r3, #100	@ 0x64
 80009ea:	2201      	movs	r2, #1
 80009ec:	4803      	ldr	r0, [pc, #12]	@ (80009fc <SPI_Transmit+0x20>)
 80009ee:	f001 fe48 	bl	8002682 <HAL_SPI_Transmit>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200001d0 	.word	0x200001d0

08000a00 <configuracion_IP>:

void configuracion_IP(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	@ 0x28
 8000a04:	af00      	add	r7, sp, #0
	//char Archivo[25];
	//Obtenemos direccion IP
	int Address = 10;
 8000a06:	230a      	movs	r3, #10
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24

	//bufsize se refiere al tamaño del buffer tx, rx por cada socket el w5500 tiene hasta 8 sockets. Los 32Kbytes se dividen por los 8 sockets
	printf("\r\nStart Eth Settings\r\n");
 8000a0a:	482b      	ldr	r0, [pc, #172]	@ (8000ab8 <configuracion_IP+0xb8>)
 8000a0c:	f00a ff26 	bl	800b85c <puts>
	uint8_t bufSize[] = {2, 2, 2, 2, 2, 2, 2, 2};
 8000a10:	4a2a      	ldr	r2, [pc, #168]	@ (8000abc <configuracion_IP+0xbc>)
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a1a:	e883 0003 	stmia.w	r3, {r0, r1}

	//Funciones para mandar a seleccionar el chip:
	reg_wizchip_cs_cbfunc(CS_SEL_FUN, CS_DES_FUN);
 8000a1e:	4928      	ldr	r1, [pc, #160]	@ (8000ac0 <configuracion_IP+0xc0>)
 8000a20:	4828      	ldr	r0, [pc, #160]	@ (8000ac4 <configuracion_IP+0xc4>)
 8000a22:	f008 fd2f 	bl	8009484 <reg_wizchip_cs_cbfunc>

	//Funciones para mandar a escribir y leer datos del SPI
	reg_wizchip_spi_cbfunc(SPI_Received, SPI_Transmit);
 8000a26:	4928      	ldr	r1, [pc, #160]	@ (8000ac8 <configuracion_IP+0xc8>)
 8000a28:	4828      	ldr	r0, [pc, #160]	@ (8000acc <configuracion_IP+0xcc>)
 8000a2a:	f008 fd51 	bl	80094d0 <reg_wizchip_spi_cbfunc>

	//Init Buffer tx rx
	wizchip_init(bufSize, bufSize);
 8000a2e:	f107 021c 	add.w	r2, r7, #28
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4611      	mov	r1, r2
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f008 fdc1 	bl	80095c0 <wizchip_init>
	wiz_NetInfo netInfo = { .mac 	= {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef},	// Mac address
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
 8000a4c:	f8c3 2013 	str.w	r2, [r3, #19]
 8000a50:	4a1f      	ldr	r2, [pc, #124]	@ (8000ad0 <configuracion_IP+0xd0>)
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a58:	6018      	str	r0, [r3, #0]
 8000a5a:	3304      	adds	r3, #4
 8000a5c:	8019      	strh	r1, [r3, #0]
 8000a5e:	23c0      	movs	r3, #192	@ 0xc0
 8000a60:	72bb      	strb	r3, [r7, #10]
 8000a62:	23a8      	movs	r3, #168	@ 0xa8
 8000a64:	72fb      	strb	r3, [r7, #11]
 8000a66:	230a      	movs	r3, #10
 8000a68:	733b      	strb	r3, [r7, #12]
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	737b      	strb	r3, [r7, #13]
 8000a70:	4a18      	ldr	r2, [pc, #96]	@ (8000ad4 <configuracion_IP+0xd4>)
 8000a72:	f107 030e 	add.w	r3, r7, #14
 8000a76:	6810      	ldr	r0, [r2, #0]
 8000a78:	6018      	str	r0, [r3, #0]
 8000a7a:	4a17      	ldr	r2, [pc, #92]	@ (8000ad8 <configuracion_IP+0xd8>)
 8000a7c:	f107 0312 	add.w	r3, r7, #18
 8000a80:	6810      	ldr	r0, [r2, #0]
 8000a82:	6018      	str	r0, [r3, #0]
	        	            .ip 	= {192, 168, 10, Address},					// IP address
	          	            .sn 	= {255, 255, 255, 0},					// Subnet mask
	          	            .gw 	= {192, 168, 10, 1}};					// Gateway address

	wizchip_setnetinfo(&netInfo);											//Se configura el chip con los datos ingresados anteriormente
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	4618      	mov	r0, r3
 8000a88:	f008 fe26 	bl	80096d8 <wizchip_setnetinfo>

	buff_length = sprintf(tx_buff, "FIN Config W5500 \r\n");
 8000a8c:	4913      	ldr	r1, [pc, #76]	@ (8000adc <configuracion_IP+0xdc>)
 8000a8e:	4814      	ldr	r0, [pc, #80]	@ (8000ae0 <configuracion_IP+0xe0>)
 8000a90:	f00a feec 	bl	800b86c <siprintf>
 8000a94:	4603      	mov	r3, r0
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <configuracion_IP+0xe4>)
 8000a9a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&hcom_uart[COM1],  (uint8_t *)tx_buff, buff_length, 100);
 8000a9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <configuracion_IP+0xe4>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	2364      	movs	r3, #100	@ 0x64
 8000aa6:	490e      	ldr	r1, [pc, #56]	@ (8000ae0 <configuracion_IP+0xe0>)
 8000aa8:	480f      	ldr	r0, [pc, #60]	@ (8000ae8 <configuracion_IP+0xe8>)
 8000aaa:	f002 fccd 	bl	8003448 <HAL_UART_Transmit>

}
 8000aae:	bf00      	nop
 8000ab0:	3728      	adds	r7, #40	@ 0x28
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	0800cbb4 	.word	0x0800cbb4
 8000abc:	0800cbe0 	.word	0x0800cbe0
 8000ac0:	080009a5 	.word	0x080009a5
 8000ac4:	0800098d 	.word	0x0800098d
 8000ac8:	080009dd 	.word	0x080009dd
 8000acc:	080009bd 	.word	0x080009bd
 8000ad0:	0800cbe8 	.word	0x0800cbe8
 8000ad4:	0800cbf0 	.word	0x0800cbf0
 8000ad8:	0800cbf4 	.word	0x0800cbf4
 8000adc:	0800cbcc 	.word	0x0800cbcc
 8000ae0:	2000126c 	.word	0x2000126c
 8000ae4:	200012d0 	.word	0x200012d0
 8000ae8:	200012e0 	.word	0x200012e0

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	buff_length = sprintf(tx_buff, "Error Prueba SD: \r\n");
 8000af0:	490a      	ldr	r1, [pc, #40]	@ (8000b1c <Error_Handler+0x30>)
 8000af2:	480b      	ldr	r0, [pc, #44]	@ (8000b20 <Error_Handler+0x34>)
 8000af4:	f00a feba 	bl	800b86c <siprintf>
 8000af8:	4603      	mov	r3, r0
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <Error_Handler+0x38>)
 8000afe:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&hcom_uart[COM1],  (uint8_t *)tx_buff, buff_length, 100);
 8000b00:	4b08      	ldr	r3, [pc, #32]	@ (8000b24 <Error_Handler+0x38>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	461a      	mov	r2, r3
 8000b08:	2364      	movs	r3, #100	@ 0x64
 8000b0a:	4905      	ldr	r1, [pc, #20]	@ (8000b20 <Error_Handler+0x34>)
 8000b0c:	4806      	ldr	r0, [pc, #24]	@ (8000b28 <Error_Handler+0x3c>)
 8000b0e:	f002 fc9b 	bl	8003448 <HAL_UART_Transmit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b12:	b672      	cpsid	i
}
 8000b14:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b16:	bf00      	nop
 8000b18:	e7fd      	b.n	8000b16 <Error_Handler+0x2a>
 8000b1a:	bf00      	nop
 8000b1c:	0800cbf8 	.word	0x0800cbf8
 8000b20:	2000126c 	.word	0x2000126c
 8000b24:	200012d0 	.word	0x200012d0
 8000b28:	200012e0 	.word	0x200012e0

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	4b0f      	ldr	r3, [pc, #60]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b36:	4a0e      	ldr	r2, [pc, #56]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b4e:	4a08      	ldr	r2, [pc, #32]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b54:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b56:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <HAL_MspInit+0x44>)
 8000b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b62:	f000 ffa5 	bl	8001ab0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40021000 	.word	0x40021000

08000b74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08c      	sub	sp, #48	@ 0x30
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a2f      	ldr	r2, [pc, #188]	@ (8000c50 <HAL_SPI_MspInit+0xdc>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d129      	bne.n	8000bea <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b96:	4b2f      	ldr	r3, [pc, #188]	@ (8000c54 <HAL_SPI_MspInit+0xe0>)
 8000b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b9a:	4a2e      	ldr	r2, [pc, #184]	@ (8000c54 <HAL_SPI_MspInit+0xe0>)
 8000b9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ba0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ba2:	4b2c      	ldr	r3, [pc, #176]	@ (8000c54 <HAL_SPI_MspInit+0xe0>)
 8000ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ba6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000baa:	61bb      	str	r3, [r7, #24]
 8000bac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bae:	4b29      	ldr	r3, [pc, #164]	@ (8000c54 <HAL_SPI_MspInit+0xe0>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb2:	4a28      	ldr	r2, [pc, #160]	@ (8000c54 <HAL_SPI_MspInit+0xe0>)
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bba:	4b26      	ldr	r3, [pc, #152]	@ (8000c54 <HAL_SPI_MspInit+0xe0>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000bc6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bd8:	2305      	movs	r3, #5
 8000bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bdc:	f107 031c 	add.w	r3, r7, #28
 8000be0:	4619      	mov	r1, r3
 8000be2:	481d      	ldr	r0, [pc, #116]	@ (8000c58 <HAL_SPI_MspInit+0xe4>)
 8000be4:	f000 fd26 	bl	8001634 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000be8:	e02d      	b.n	8000c46 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a1b      	ldr	r2, [pc, #108]	@ (8000c5c <HAL_SPI_MspInit+0xe8>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d128      	bne.n	8000c46 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bf4:	4b17      	ldr	r3, [pc, #92]	@ (8000c54 <HAL_SPI_MspInit+0xe0>)
 8000bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf8:	4a16      	ldr	r2, [pc, #88]	@ (8000c54 <HAL_SPI_MspInit+0xe0>)
 8000bfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000bfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c00:	4b14      	ldr	r3, [pc, #80]	@ (8000c54 <HAL_SPI_MspInit+0xe0>)
 8000c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0c:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <HAL_SPI_MspInit+0xe0>)
 8000c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c10:	4a10      	ldr	r2, [pc, #64]	@ (8000c54 <HAL_SPI_MspInit+0xe0>)
 8000c12:	f043 0304 	orr.w	r3, r3, #4
 8000c16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c18:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <HAL_SPI_MspInit+0xe0>)
 8000c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1c:	f003 0304 	and.w	r3, r3, #4
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000c24:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c36:	2306      	movs	r3, #6
 8000c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3a:	f107 031c 	add.w	r3, r7, #28
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4807      	ldr	r0, [pc, #28]	@ (8000c60 <HAL_SPI_MspInit+0xec>)
 8000c42:	f000 fcf7 	bl	8001634 <HAL_GPIO_Init>
}
 8000c46:	bf00      	nop
 8000c48:	3730      	adds	r7, #48	@ 0x30
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40003800 	.word	0x40003800
 8000c54:	40021000 	.word	0x40021000
 8000c58:	48000400 	.word	0x48000400
 8000c5c:	40003c00 	.word	0x40003c00
 8000c60:	48000800 	.word	0x48000800

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <NMI_Handler+0x4>

08000c6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <HardFault_Handler+0x4>

08000c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <MemManage_Handler+0x4>

08000c7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <BusFault_Handler+0x4>

08000c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <UsageFault_Handler+0x4>

08000c8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000cec <SysTick_Handler+0x34>)
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d005      	beq.n	8000cd0 <SysTick_Handler+0x18>
		Timer1--;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <SysTick_Handler+0x34>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	4b07      	ldr	r3, [pc, #28]	@ (8000cec <SysTick_Handler+0x34>)
 8000cce:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <SysTick_Handler+0x38>)
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d005      	beq.n	8000ce4 <SysTick_Handler+0x2c>
		Timer2--;
 8000cd8:	4b05      	ldr	r3, [pc, #20]	@ (8000cf0 <SysTick_Handler+0x38>)
 8000cda:	881b      	ldrh	r3, [r3, #0]
 8000cdc:	3b01      	subs	r3, #1
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	4b03      	ldr	r3, [pc, #12]	@ (8000cf0 <SysTick_Handler+0x38>)
 8000ce2:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce4:	f000 faf6 	bl	80012d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20001382 	.word	0x20001382
 8000cf0:	20001384 	.word	0x20001384

08000cf4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f000 f9a9 	bl	8001050 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  return 1;
 8000d06:	2301      	movs	r3, #1
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <_kill>:

int _kill(int pid, int sig)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
 8000d1a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d1c:	f00a ff70 	bl	800bc00 <__errno>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2216      	movs	r2, #22
 8000d24:	601a      	str	r2, [r3, #0]
  return -1;
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <_exit>:

void _exit (int status)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d3a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ffe7 	bl	8000d12 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <_exit+0x12>

08000d48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	e00a      	b.n	8000d70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d5a:	f3af 8000 	nop.w
 8000d5e:	4601      	mov	r1, r0
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	1c5a      	adds	r2, r3, #1
 8000d64:	60ba      	str	r2, [r7, #8]
 8000d66:	b2ca      	uxtb	r2, r1
 8000d68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	697a      	ldr	r2, [r7, #20]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	dbf0      	blt.n	8000d5a <_read+0x12>
  }

  return len;
 8000d78:	687b      	ldr	r3, [r7, #4]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60f8      	str	r0, [r7, #12]
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
 8000d92:	e009      	b.n	8000da8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	1c5a      	adds	r2, r3, #1
 8000d98:	60ba      	str	r2, [r7, #8]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 f9d7 	bl	8001150 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	3301      	adds	r3, #1
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	697a      	ldr	r2, [r7, #20]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	dbf1      	blt.n	8000d94 <_write+0x12>
  }
  return len;
 8000db0:	687b      	ldr	r3, [r7, #4]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <_close>:

int _close(int file)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	b083      	sub	sp, #12
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000de2:	605a      	str	r2, [r3, #4]
  return 0;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <_isatty>:

int _isatty(int file)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dfa:	2301      	movs	r3, #1
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e2c:	4a14      	ldr	r2, [pc, #80]	@ (8000e80 <_sbrk+0x5c>)
 8000e2e:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <_sbrk+0x60>)
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e38:	4b13      	ldr	r3, [pc, #76]	@ (8000e88 <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d102      	bne.n	8000e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e40:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <_sbrk+0x64>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	@ (8000e8c <_sbrk+0x68>)
 8000e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e46:	4b10      	ldr	r3, [pc, #64]	@ (8000e88 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d207      	bcs.n	8000e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e54:	f00a fed4 	bl	800bc00 <__errno>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e62:	e009      	b.n	8000e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e64:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6a:	4b07      	ldr	r3, [pc, #28]	@ (8000e88 <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	4a05      	ldr	r2, [pc, #20]	@ (8000e88 <_sbrk+0x64>)
 8000e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e76:	68fb      	ldr	r3, [r7, #12]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20020000 	.word	0x20020000
 8000e84:	00000400 	.word	0x00000400
 8000e88:	200012d4 	.word	0x200012d4
 8000e8c:	20002a30 	.word	0x20002a30

08000e90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e94:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <SystemInit+0x20>)
 8000e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e9a:	4a05      	ldr	r2, [pc, #20]	@ (8000eb0 <SystemInit+0x20>)
 8000e9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ea0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000eb4:	480d      	ldr	r0, [pc, #52]	@ (8000eec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eb6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eb8:	f7ff ffea 	bl	8000e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ebc:	480c      	ldr	r0, [pc, #48]	@ (8000ef0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ebe:	490d      	ldr	r1, [pc, #52]	@ (8000ef4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef8 <LoopForever+0xe>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8000efc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ed4:	4c0a      	ldr	r4, [pc, #40]	@ (8000f00 <LoopForever+0x16>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ee2:	f00a fe93 	bl	800bc0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ee6:	f7ff fb7b 	bl	80005e0 <main>

08000eea <LoopForever>:

LoopForever:
    b LoopForever
 8000eea:	e7fe      	b.n	8000eea <LoopForever>
  ldr   r0, =_estack
 8000eec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef4:	20000140 	.word	0x20000140
  ldr r2, =_sidata
 8000ef8:	0800dd88 	.word	0x0800dd88
  ldr r2, =_sbss
 8000efc:	20000140 	.word	0x20000140
  ldr r4, =_ebss
 8000f00:	20002a30 	.word	0x20002a30

08000f04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <ADC1_2_IRQHandler>
	...

08000f08 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b088      	sub	sp, #32
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8000f12:	4b16      	ldr	r3, [pc, #88]	@ (8000f6c <BSP_LED_Init+0x64>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f16:	4a15      	ldr	r2, [pc, #84]	@ (8000f6c <BSP_LED_Init+0x64>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f1e:	4b13      	ldr	r3, [pc, #76]	@ (8000f6c <BSP_LED_Init+0x64>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8000f2a:	2320      	movs	r3, #32
 8000f2c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f36:	2303      	movs	r3, #3
 8000f38:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	4a0c      	ldr	r2, [pc, #48]	@ (8000f70 <BSP_LED_Init+0x68>)
 8000f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f42:	f107 020c 	add.w	r2, r7, #12
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 fb73 	bl	8001634 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	4a07      	ldr	r2, [pc, #28]	@ (8000f70 <BSP_LED_Init+0x68>)
 8000f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f56:	2120      	movs	r1, #32
 8000f58:	2200      	movs	r2, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 fcec 	bl	8001938 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3720      	adds	r7, #32
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	20000004 	.word	0x20000004

08000f74 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	460a      	mov	r2, r1
 8000f7e:	71fb      	strb	r3, [r7, #7]
 8000f80:	4613      	mov	r3, r2
 8000f82:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8000f84:	4b2c      	ldr	r3, [pc, #176]	@ (8001038 <BSP_PB_Init+0xc4>)
 8000f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f88:	4a2b      	ldr	r2, [pc, #172]	@ (8001038 <BSP_PB_Init+0xc4>)
 8000f8a:	f043 0304 	orr.w	r3, r3, #4
 8000f8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f90:	4b29      	ldr	r3, [pc, #164]	@ (8001038 <BSP_PB_Init+0xc4>)
 8000f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f94:	f003 0304 	and.w	r3, r3, #4
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000f9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fa0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000faa:	79bb      	ldrb	r3, [r7, #6]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d10c      	bne.n	8000fca <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	4a21      	ldr	r2, [pc, #132]	@ (800103c <BSP_PB_Init+0xc8>)
 8000fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fbc:	f107 020c 	add.w	r2, r7, #12
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 fb36 	bl	8001634 <HAL_GPIO_Init>
 8000fc8:	e031      	b.n	800102e <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000fca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fce:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	4a1a      	ldr	r2, [pc, #104]	@ (800103c <BSP_PB_Init+0xc8>)
 8000fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd8:	f107 020c 	add.w	r2, r7, #12
 8000fdc:	4611      	mov	r1, r2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 fb28 	bl	8001634 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	4a15      	ldr	r2, [pc, #84]	@ (8001040 <BSP_PB_Init+0xcc>)
 8000fea:	441a      	add	r2, r3
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	4915      	ldr	r1, [pc, #84]	@ (8001044 <BSP_PB_Init+0xd0>)
 8000ff0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	f000 fad8 	bl	80015ac <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	4a0f      	ldr	r2, [pc, #60]	@ (8001040 <BSP_PB_Init+0xcc>)
 8001002:	1898      	adds	r0, r3, r2
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	4a10      	ldr	r2, [pc, #64]	@ (8001048 <BSP_PB_Init+0xd4>)
 8001008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100c:	461a      	mov	r2, r3
 800100e:	2100      	movs	r1, #0
 8001010:	f000 faaf 	bl	8001572 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001014:	2028      	movs	r0, #40	@ 0x28
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	4a0c      	ldr	r2, [pc, #48]	@ (800104c <BSP_PB_Init+0xd8>)
 800101a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101e:	2200      	movs	r2, #0
 8001020:	4619      	mov	r1, r3
 8001022:	f000 fa72 	bl	800150a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001026:	2328      	movs	r3, #40	@ 0x28
 8001028:	4618      	mov	r0, r3
 800102a:	f000 fa88 	bl	800153e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40021000 	.word	0x40021000
 800103c:	20000008 	.word	0x20000008
 8001040:	200012d8 	.word	0x200012d8
 8001044:	0800d738 	.word	0x0800d738
 8001048:	20000010 	.word	0x20000010
 800104c:	20000014 	.word	0x20000014

08001050 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	4a04      	ldr	r2, [pc, #16]	@ (8001070 <BSP_PB_IRQHandler+0x20>)
 8001060:	4413      	add	r3, r2
 8001062:	4618      	mov	r0, r3
 8001064:	f000 fab6 	bl	80015d4 <HAL_EXTI_IRQHandler>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	200012d8 	.word	0x200012d8

08001074 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d903      	bls.n	80010aa <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80010a2:	f06f 0301 	mvn.w	r3, #1
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	e018      	b.n	80010dc <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2294      	movs	r2, #148	@ 0x94
 80010ae:	fb02 f303 	mul.w	r3, r2, r3
 80010b2:	4a0d      	ldr	r2, [pc, #52]	@ (80010e8 <BSP_COM_Init+0x5c>)
 80010b4:	4413      	add	r3, r2
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f86e 	bl	8001198 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	2294      	movs	r2, #148	@ 0x94
 80010c0:	fb02 f303 	mul.w	r3, r2, r3
 80010c4:	4a08      	ldr	r2, [pc, #32]	@ (80010e8 <BSP_COM_Init+0x5c>)
 80010c6:	4413      	add	r3, r2
 80010c8:	6839      	ldr	r1, [r7, #0]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f80e 	bl	80010ec <MX_LPUART1_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d002      	beq.n	80010dc <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 80010d6:	f06f 0303 	mvn.w	r3, #3
 80010da:	e000      	b.n	80010de <BSP_COM_Init+0x52>
    }
  }

  return ret;
 80010dc:	68fb      	ldr	r3, [r7, #12]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200012e0 	.word	0x200012e0

080010ec <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80010f6:	4b15      	ldr	r3, [pc, #84]	@ (800114c <MX_LPUART1_Init+0x60>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	220c      	movs	r2, #12
 800110a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	895b      	ldrh	r3, [r3, #10]
 8001110:	461a      	mov	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	891b      	ldrh	r3, [r3, #8]
 8001122:	461a      	mov	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	899b      	ldrh	r3, [r3, #12]
 800112c:	461a      	mov	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001138:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f002 f92a 	bl	8003394 <HAL_UART_Init>
 8001140:	4603      	mov	r3, r0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	2000000c 	.word	0x2000000c

08001150 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001158:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <__io_putchar+0x30>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	2394      	movs	r3, #148	@ 0x94
 8001160:	fb02 f303 	mul.w	r3, r2, r3
 8001164:	4a07      	ldr	r2, [pc, #28]	@ (8001184 <__io_putchar+0x34>)
 8001166:	1898      	adds	r0, r3, r2
 8001168:	1d39      	adds	r1, r7, #4
 800116a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800116e:	2201      	movs	r2, #1
 8001170:	f002 f96a 	bl	8003448 <HAL_UART_Transmit>
  return ch;
 8001174:	687b      	ldr	r3, [r7, #4]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20001374 	.word	0x20001374
 8001184:	200012e0 	.word	0x200012e0

08001188 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800118c:	2000      	movs	r0, #0
 800118e:	f7ff ff71 	bl	8001074 <BSP_PB_Callback>
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	@ 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80011a0:	4b22      	ldr	r3, [pc, #136]	@ (800122c <COM1_MspInit+0x94>)
 80011a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a4:	4a21      	ldr	r2, [pc, #132]	@ (800122c <COM1_MspInit+0x94>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ac:	4b1f      	ldr	r3, [pc, #124]	@ (800122c <COM1_MspInit+0x94>)
 80011ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80011b8:	4b1c      	ldr	r3, [pc, #112]	@ (800122c <COM1_MspInit+0x94>)
 80011ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011bc:	4a1b      	ldr	r2, [pc, #108]	@ (800122c <COM1_MspInit+0x94>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c4:	4b19      	ldr	r3, [pc, #100]	@ (800122c <COM1_MspInit+0x94>)
 80011c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80011d0:	4b16      	ldr	r3, [pc, #88]	@ (800122c <COM1_MspInit+0x94>)
 80011d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011d4:	4a15      	ldr	r2, [pc, #84]	@ (800122c <COM1_MspInit+0x94>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80011dc:	4b13      	ldr	r3, [pc, #76]	@ (800122c <COM1_MspInit+0x94>)
 80011de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 80011e8:	2304      	movs	r3, #4
 80011ea:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80011f0:	2302      	movs	r3, #2
 80011f2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80011f8:	230c      	movs	r3, #12
 80011fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4619      	mov	r1, r3
 8001202:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001206:	f000 fa15 	bl	8001634 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800120a:	2308      	movs	r3, #8
 800120c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001212:	230c      	movs	r3, #12
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001220:	f000 fa08 	bl	8001634 <HAL_GPIO_Init>
}
 8001224:	bf00      	nop
 8001226:	3728      	adds	r7, #40	@ 0x28
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40021000 	.word	0x40021000

08001230 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800123a:	2003      	movs	r0, #3
 800123c:	f000 f95a 	bl	80014f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001240:	2000      	movs	r0, #0
 8001242:	f000 f80d 	bl	8001260 <HAL_InitTick>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d002      	beq.n	8001252 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	71fb      	strb	r3, [r7, #7]
 8001250:	e001      	b.n	8001256 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001252:	f7ff fc6b 	bl	8000b2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001256:	79fb      	ldrb	r3, [r7, #7]

}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800126c:	4b16      	ldr	r3, [pc, #88]	@ (80012c8 <HAL_InitTick+0x68>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d022      	beq.n	80012ba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001274:	4b15      	ldr	r3, [pc, #84]	@ (80012cc <HAL_InitTick+0x6c>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <HAL_InitTick+0x68>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001280:	fbb1 f3f3 	udiv	r3, r1, r3
 8001284:	fbb2 f3f3 	udiv	r3, r2, r3
 8001288:	4618      	mov	r0, r3
 800128a:	f000 f966 	bl	800155a <HAL_SYSTICK_Config>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d10f      	bne.n	80012b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b0f      	cmp	r3, #15
 8001298:	d809      	bhi.n	80012ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800129a:	2200      	movs	r2, #0
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	f04f 30ff 	mov.w	r0, #4294967295
 80012a2:	f000 f932 	bl	800150a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012a6:	4a0a      	ldr	r2, [pc, #40]	@ (80012d0 <HAL_InitTick+0x70>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	e007      	b.n	80012be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	73fb      	strb	r3, [r7, #15]
 80012b2:	e004      	b.n	80012be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	73fb      	strb	r3, [r7, #15]
 80012b8:	e001      	b.n	80012be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012be:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	2000001c 	.word	0x2000001c
 80012cc:	20000000 	.word	0x20000000
 80012d0:	20000018 	.word	0x20000018

080012d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d8:	4b05      	ldr	r3, [pc, #20]	@ (80012f0 <HAL_IncTick+0x1c>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <HAL_IncTick+0x20>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4413      	add	r3, r2
 80012e2:	4a03      	ldr	r2, [pc, #12]	@ (80012f0 <HAL_IncTick+0x1c>)
 80012e4:	6013      	str	r3, [r2, #0]
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	20001378 	.word	0x20001378
 80012f4:	2000001c 	.word	0x2000001c

080012f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return uwTick;
 80012fc:	4b03      	ldr	r3, [pc, #12]	@ (800130c <HAL_GetTick+0x14>)
 80012fe:	681b      	ldr	r3, [r3, #0]
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20001378 	.word	0x20001378

08001310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001318:	f7ff ffee 	bl	80012f8 <HAL_GetTick>
 800131c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001328:	d004      	beq.n	8001334 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800132a:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <HAL_Delay+0x40>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	4413      	add	r3, r2
 8001332:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001334:	bf00      	nop
 8001336:	f7ff ffdf 	bl	80012f8 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	429a      	cmp	r2, r3
 8001344:	d8f7      	bhi.n	8001336 <HAL_Delay+0x26>
  {
  }
}
 8001346:	bf00      	nop
 8001348:	bf00      	nop
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	2000001c 	.word	0x2000001c

08001354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001370:	4013      	ands	r3, r2
 8001372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800137c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001386:	4a04      	ldr	r2, [pc, #16]	@ (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	60d3      	str	r3, [r2, #12]
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a0:	4b04      	ldr	r3, [pc, #16]	@ (80013b4 <__NVIC_GetPriorityGrouping+0x18>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	f003 0307 	and.w	r3, r3, #7
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	db0b      	blt.n	80013e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	4907      	ldr	r1, [pc, #28]	@ (80013f0 <__NVIC_EnableIRQ+0x38>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	095b      	lsrs	r3, r3, #5
 80013d8:	2001      	movs	r0, #1
 80013da:	fa00 f202 	lsl.w	r2, r0, r2
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000e100 	.word	0xe000e100

080013f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	6039      	str	r1, [r7, #0]
 80013fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001404:	2b00      	cmp	r3, #0
 8001406:	db0a      	blt.n	800141e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	b2da      	uxtb	r2, r3
 800140c:	490c      	ldr	r1, [pc, #48]	@ (8001440 <__NVIC_SetPriority+0x4c>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	0112      	lsls	r2, r2, #4
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	440b      	add	r3, r1
 8001418:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800141c:	e00a      	b.n	8001434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4908      	ldr	r1, [pc, #32]	@ (8001444 <__NVIC_SetPriority+0x50>)
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	3b04      	subs	r3, #4
 800142c:	0112      	lsls	r2, r2, #4
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	440b      	add	r3, r1
 8001432:	761a      	strb	r2, [r3, #24]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000e100 	.word	0xe000e100
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001448:	b480      	push	{r7}
 800144a:	b089      	sub	sp, #36	@ 0x24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f1c3 0307 	rsb	r3, r3, #7
 8001462:	2b04      	cmp	r3, #4
 8001464:	bf28      	it	cs
 8001466:	2304      	movcs	r3, #4
 8001468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3304      	adds	r3, #4
 800146e:	2b06      	cmp	r3, #6
 8001470:	d902      	bls.n	8001478 <NVIC_EncodePriority+0x30>
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3b03      	subs	r3, #3
 8001476:	e000      	b.n	800147a <NVIC_EncodePriority+0x32>
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	f04f 32ff 	mov.w	r2, #4294967295
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43da      	mvns	r2, r3
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	401a      	ands	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001490:	f04f 31ff 	mov.w	r1, #4294967295
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	43d9      	mvns	r1, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	4313      	orrs	r3, r2
         );
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3724      	adds	r7, #36	@ 0x24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014c0:	d301      	bcc.n	80014c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c2:	2301      	movs	r3, #1
 80014c4:	e00f      	b.n	80014e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c6:	4a0a      	ldr	r2, [pc, #40]	@ (80014f0 <SysTick_Config+0x40>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ce:	210f      	movs	r1, #15
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295
 80014d4:	f7ff ff8e 	bl	80013f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d8:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <SysTick_Config+0x40>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014de:	4b04      	ldr	r3, [pc, #16]	@ (80014f0 <SysTick_Config+0x40>)
 80014e0:	2207      	movs	r2, #7
 80014e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	e000e010 	.word	0xe000e010

080014f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ff29 	bl	8001354 <__NVIC_SetPriorityGrouping>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001518:	f7ff ff40 	bl	800139c <__NVIC_GetPriorityGrouping>
 800151c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	68b9      	ldr	r1, [r7, #8]
 8001522:	6978      	ldr	r0, [r7, #20]
 8001524:	f7ff ff90 	bl	8001448 <NVIC_EncodePriority>
 8001528:	4602      	mov	r2, r0
 800152a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152e:	4611      	mov	r1, r2
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff5f 	bl	80013f4 <__NVIC_SetPriority>
}
 8001536:	bf00      	nop
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	4603      	mov	r3, r0
 8001546:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff33 	bl	80013b8 <__NVIC_EnableIRQ>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff ffa4 	bl	80014b0 <SysTick_Config>
 8001568:	4603      	mov	r3, r0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001572:	b480      	push	{r7}
 8001574:	b087      	sub	sp, #28
 8001576:	af00      	add	r7, sp, #0
 8001578:	60f8      	str	r0, [r7, #12]
 800157a:	460b      	mov	r3, r1
 800157c:	607a      	str	r2, [r7, #4]
 800157e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001580:	2300      	movs	r3, #0
 8001582:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 8001584:	7afb      	ldrb	r3, [r7, #11]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d103      	bne.n	8001592 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	605a      	str	r2, [r3, #4]
      break;
 8001590:	e005      	b.n	800159e <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2200      	movs	r2, #0
 8001596:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	75fb      	strb	r3, [r7, #23]
      break;
 800159c:	bf00      	nop
  }

  return status;
 800159e:	7dfb      	ldrb	r3, [r7, #23]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	371c      	adds	r7, #28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e003      	b.n	80015c8 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80015c6:	2300      	movs	r3, #0
  }
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	0c1b      	lsrs	r3, r3, #16
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 031f 	and.w	r3, r3, #31
 80015f0:	2201      	movs	r2, #1
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	015a      	lsls	r2, r3, #5
 80015fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001630 <HAL_EXTI_IRQHandler+0x5c>)
 80015fe:	4413      	add	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4013      	ands	r3, r2
 800160a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d009      	beq.n	8001626 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d002      	beq.n	8001626 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	4798      	blx	r3
    }
  }
}
 8001626:	bf00      	nop
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40010414 	.word	0x40010414

08001634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001634:	b480      	push	{r7}
 8001636:	b087      	sub	sp, #28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001642:	e15a      	b.n	80018fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	2101      	movs	r1, #1
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	fa01 f303 	lsl.w	r3, r1, r3
 8001650:	4013      	ands	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 814c 	beq.w	80018f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b01      	cmp	r3, #1
 8001666:	d005      	beq.n	8001674 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001670:	2b02      	cmp	r3, #2
 8001672:	d130      	bne.n	80016d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	2203      	movs	r2, #3
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4013      	ands	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	68da      	ldr	r2, [r3, #12]
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016aa:	2201      	movs	r2, #1
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43db      	mvns	r3, r3
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4013      	ands	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	091b      	lsrs	r3, r3, #4
 80016c0:	f003 0201 	and.w	r2, r3, #1
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d017      	beq.n	8001712 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	2203      	movs	r2, #3
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	4313      	orrs	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d123      	bne.n	8001766 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	08da      	lsrs	r2, r3, #3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3208      	adds	r2, #8
 8001726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800172a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	220f      	movs	r2, #15
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	4013      	ands	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	691a      	ldr	r2, [r3, #16]
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	08da      	lsrs	r2, r3, #3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3208      	adds	r2, #8
 8001760:	6939      	ldr	r1, [r7, #16]
 8001762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	2203      	movs	r2, #3
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 0203 	and.w	r2, r3, #3
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 80a6 	beq.w	80018f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a8:	4b5b      	ldr	r3, [pc, #364]	@ (8001918 <HAL_GPIO_Init+0x2e4>)
 80017aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ac:	4a5a      	ldr	r2, [pc, #360]	@ (8001918 <HAL_GPIO_Init+0x2e4>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	6613      	str	r3, [r2, #96]	@ 0x60
 80017b4:	4b58      	ldr	r3, [pc, #352]	@ (8001918 <HAL_GPIO_Init+0x2e4>)
 80017b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017c0:	4a56      	ldr	r2, [pc, #344]	@ (800191c <HAL_GPIO_Init+0x2e8>)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	089b      	lsrs	r3, r3, #2
 80017c6:	3302      	adds	r3, #2
 80017c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	220f      	movs	r2, #15
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80017ea:	d01f      	beq.n	800182c <HAL_GPIO_Init+0x1f8>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a4c      	ldr	r2, [pc, #304]	@ (8001920 <HAL_GPIO_Init+0x2ec>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d019      	beq.n	8001828 <HAL_GPIO_Init+0x1f4>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a4b      	ldr	r2, [pc, #300]	@ (8001924 <HAL_GPIO_Init+0x2f0>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d013      	beq.n	8001824 <HAL_GPIO_Init+0x1f0>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a4a      	ldr	r2, [pc, #296]	@ (8001928 <HAL_GPIO_Init+0x2f4>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d00d      	beq.n	8001820 <HAL_GPIO_Init+0x1ec>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a49      	ldr	r2, [pc, #292]	@ (800192c <HAL_GPIO_Init+0x2f8>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d007      	beq.n	800181c <HAL_GPIO_Init+0x1e8>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a48      	ldr	r2, [pc, #288]	@ (8001930 <HAL_GPIO_Init+0x2fc>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d101      	bne.n	8001818 <HAL_GPIO_Init+0x1e4>
 8001814:	2305      	movs	r3, #5
 8001816:	e00a      	b.n	800182e <HAL_GPIO_Init+0x1fa>
 8001818:	2306      	movs	r3, #6
 800181a:	e008      	b.n	800182e <HAL_GPIO_Init+0x1fa>
 800181c:	2304      	movs	r3, #4
 800181e:	e006      	b.n	800182e <HAL_GPIO_Init+0x1fa>
 8001820:	2303      	movs	r3, #3
 8001822:	e004      	b.n	800182e <HAL_GPIO_Init+0x1fa>
 8001824:	2302      	movs	r3, #2
 8001826:	e002      	b.n	800182e <HAL_GPIO_Init+0x1fa>
 8001828:	2301      	movs	r3, #1
 800182a:	e000      	b.n	800182e <HAL_GPIO_Init+0x1fa>
 800182c:	2300      	movs	r3, #0
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	f002 0203 	and.w	r2, r2, #3
 8001834:	0092      	lsls	r2, r2, #2
 8001836:	4093      	lsls	r3, r2
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4313      	orrs	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800183e:	4937      	ldr	r1, [pc, #220]	@ (800191c <HAL_GPIO_Init+0x2e8>)
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	089b      	lsrs	r3, r3, #2
 8001844:	3302      	adds	r3, #2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800184c:	4b39      	ldr	r3, [pc, #228]	@ (8001934 <HAL_GPIO_Init+0x300>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	43db      	mvns	r3, r3
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4013      	ands	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4313      	orrs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001870:	4a30      	ldr	r2, [pc, #192]	@ (8001934 <HAL_GPIO_Init+0x300>)
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001876:	4b2f      	ldr	r3, [pc, #188]	@ (8001934 <HAL_GPIO_Init+0x300>)
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	43db      	mvns	r3, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4313      	orrs	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800189a:	4a26      	ldr	r2, [pc, #152]	@ (8001934 <HAL_GPIO_Init+0x300>)
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80018a0:	4b24      	ldr	r3, [pc, #144]	@ (8001934 <HAL_GPIO_Init+0x300>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001934 <HAL_GPIO_Init+0x300>)
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001934 <HAL_GPIO_Init+0x300>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	43db      	mvns	r3, r3
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4013      	ands	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018ee:	4a11      	ldr	r2, [pc, #68]	@ (8001934 <HAL_GPIO_Init+0x300>)
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	3301      	adds	r3, #1
 80018f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	fa22 f303 	lsr.w	r3, r2, r3
 8001904:	2b00      	cmp	r3, #0
 8001906:	f47f ae9d 	bne.w	8001644 <HAL_GPIO_Init+0x10>
  }
}
 800190a:	bf00      	nop
 800190c:	bf00      	nop
 800190e:	371c      	adds	r7, #28
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	40021000 	.word	0x40021000
 800191c:	40010000 	.word	0x40010000
 8001920:	48000400 	.word	0x48000400
 8001924:	48000800 	.word	0x48000800
 8001928:	48000c00 	.word	0x48000c00
 800192c:	48001000 	.word	0x48001000
 8001930:	48001400 	.word	0x48001400
 8001934:	40010400 	.word	0x40010400

08001938 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	807b      	strh	r3, [r7, #2]
 8001944:	4613      	mov	r3, r2
 8001946:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001948:	787b      	ldrb	r3, [r7, #1]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800194e:	887a      	ldrh	r2, [r7, #2]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001954:	e002      	b.n	800195c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001956:	887a      	ldrh	r2, [r7, #2]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d141      	bne.n	80019fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001976:	4b4b      	ldr	r3, [pc, #300]	@ (8001aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800197e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001982:	d131      	bne.n	80019e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001984:	4b47      	ldr	r3, [pc, #284]	@ (8001aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800198a:	4a46      	ldr	r2, [pc, #280]	@ (8001aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800198c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001990:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001994:	4b43      	ldr	r3, [pc, #268]	@ (8001aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800199c:	4a41      	ldr	r2, [pc, #260]	@ (8001aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800199e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019a4:	4b40      	ldr	r3, [pc, #256]	@ (8001aa8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2232      	movs	r2, #50	@ 0x32
 80019aa:	fb02 f303 	mul.w	r3, r2, r3
 80019ae:	4a3f      	ldr	r2, [pc, #252]	@ (8001aac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019b0:	fba2 2303 	umull	r2, r3, r2, r3
 80019b4:	0c9b      	lsrs	r3, r3, #18
 80019b6:	3301      	adds	r3, #1
 80019b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019ba:	e002      	b.n	80019c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	3b01      	subs	r3, #1
 80019c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019c2:	4b38      	ldr	r3, [pc, #224]	@ (8001aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019ce:	d102      	bne.n	80019d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f2      	bne.n	80019bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019d6:	4b33      	ldr	r3, [pc, #204]	@ (8001aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019e2:	d158      	bne.n	8001a96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e057      	b.n	8001a98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019e8:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019ee:	4a2d      	ldr	r2, [pc, #180]	@ (8001aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80019f8:	e04d      	b.n	8001a96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a00:	d141      	bne.n	8001a86 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a02:	4b28      	ldr	r3, [pc, #160]	@ (8001aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a0e:	d131      	bne.n	8001a74 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a10:	4b24      	ldr	r3, [pc, #144]	@ (8001aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a16:	4a23      	ldr	r2, [pc, #140]	@ (8001aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a20:	4b20      	ldr	r3, [pc, #128]	@ (8001aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a28:	4a1e      	ldr	r2, [pc, #120]	@ (8001aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a30:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2232      	movs	r2, #50	@ 0x32
 8001a36:	fb02 f303 	mul.w	r3, r2, r3
 8001a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8001aac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a40:	0c9b      	lsrs	r3, r3, #18
 8001a42:	3301      	adds	r3, #1
 8001a44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a46:	e002      	b.n	8001a4e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a4e:	4b15      	ldr	r3, [pc, #84]	@ (8001aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a5a:	d102      	bne.n	8001a62 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f2      	bne.n	8001a48 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a62:	4b10      	ldr	r3, [pc, #64]	@ (8001aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a6e:	d112      	bne.n	8001a96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e011      	b.n	8001a98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a74:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001a84:	e007      	b.n	8001a96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a86:	4b07      	ldr	r3, [pc, #28]	@ (8001aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a8e:	4a05      	ldr	r2, [pc, #20]	@ (8001aa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a94:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	40007000 	.word	0x40007000
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	431bde83 	.word	0x431bde83

08001ab0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001ab4:	4b05      	ldr	r3, [pc, #20]	@ (8001acc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	4a04      	ldr	r2, [pc, #16]	@ (8001acc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001aba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001abe:	6093      	str	r3, [r2, #8]
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40007000 	.word	0x40007000

08001ad0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e2fe      	b.n	80020e0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d075      	beq.n	8001bda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aee:	4b97      	ldr	r3, [pc, #604]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 030c 	and.w	r3, r3, #12
 8001af6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001af8:	4b94      	ldr	r3, [pc, #592]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f003 0303 	and.w	r3, r3, #3
 8001b00:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	2b0c      	cmp	r3, #12
 8001b06:	d102      	bne.n	8001b0e <HAL_RCC_OscConfig+0x3e>
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d002      	beq.n	8001b14 <HAL_RCC_OscConfig+0x44>
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d10b      	bne.n	8001b2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b14:	4b8d      	ldr	r3, [pc, #564]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d05b      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x108>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d157      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e2d9      	b.n	80020e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b34:	d106      	bne.n	8001b44 <HAL_RCC_OscConfig+0x74>
 8001b36:	4b85      	ldr	r3, [pc, #532]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a84      	ldr	r2, [pc, #528]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001b3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	e01d      	b.n	8001b80 <HAL_RCC_OscConfig+0xb0>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b4c:	d10c      	bne.n	8001b68 <HAL_RCC_OscConfig+0x98>
 8001b4e:	4b7f      	ldr	r3, [pc, #508]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a7e      	ldr	r2, [pc, #504]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001b54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	4b7c      	ldr	r3, [pc, #496]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a7b      	ldr	r2, [pc, #492]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001b60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	e00b      	b.n	8001b80 <HAL_RCC_OscConfig+0xb0>
 8001b68:	4b78      	ldr	r3, [pc, #480]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a77      	ldr	r2, [pc, #476]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001b6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	4b75      	ldr	r3, [pc, #468]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a74      	ldr	r2, [pc, #464]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001b7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d013      	beq.n	8001bb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b88:	f7ff fbb6 	bl	80012f8 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b90:	f7ff fbb2 	bl	80012f8 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b64      	cmp	r3, #100	@ 0x64
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e29e      	b.n	80020e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ba2:	4b6a      	ldr	r3, [pc, #424]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0f0      	beq.n	8001b90 <HAL_RCC_OscConfig+0xc0>
 8001bae:	e014      	b.n	8001bda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb0:	f7ff fba2 	bl	80012f8 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb8:	f7ff fb9e 	bl	80012f8 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b64      	cmp	r3, #100	@ 0x64
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e28a      	b.n	80020e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bca:	4b60      	ldr	r3, [pc, #384]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f0      	bne.n	8001bb8 <HAL_RCC_OscConfig+0xe8>
 8001bd6:	e000      	b.n	8001bda <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d075      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001be6:	4b59      	ldr	r3, [pc, #356]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 030c 	and.w	r3, r3, #12
 8001bee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bf0:	4b56      	ldr	r3, [pc, #344]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	2b0c      	cmp	r3, #12
 8001bfe:	d102      	bne.n	8001c06 <HAL_RCC_OscConfig+0x136>
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d002      	beq.n	8001c0c <HAL_RCC_OscConfig+0x13c>
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	d11f      	bne.n	8001c4c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c0c:	4b4f      	ldr	r3, [pc, #316]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d005      	beq.n	8001c24 <HAL_RCC_OscConfig+0x154>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e25d      	b.n	80020e0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c24:	4b49      	ldr	r3, [pc, #292]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	061b      	lsls	r3, r3, #24
 8001c32:	4946      	ldr	r1, [pc, #280]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c38:	4b45      	ldr	r3, [pc, #276]	@ (8001d50 <HAL_RCC_OscConfig+0x280>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff fb0f 	bl	8001260 <HAL_InitTick>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d043      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e249      	b.n	80020e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d023      	beq.n	8001c9c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c54:	4b3d      	ldr	r3, [pc, #244]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a3c      	ldr	r2, [pc, #240]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001c5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c60:	f7ff fb4a 	bl	80012f8 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c68:	f7ff fb46 	bl	80012f8 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e232      	b.n	80020e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c7a:	4b34      	ldr	r3, [pc, #208]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c86:	4b31      	ldr	r3, [pc, #196]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	061b      	lsls	r3, r3, #24
 8001c94:	492d      	ldr	r1, [pc, #180]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	604b      	str	r3, [r1, #4]
 8001c9a:	e01a      	b.n	8001cd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c9c:	4b2b      	ldr	r3, [pc, #172]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a2a      	ldr	r2, [pc, #168]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001ca2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fb26 	bl	80012f8 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb0:	f7ff fb22 	bl	80012f8 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e20e      	b.n	80020e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cc2:	4b22      	ldr	r3, [pc, #136]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x1e0>
 8001cce:	e000      	b.n	8001cd2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cd0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d041      	beq.n	8001d62 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d01c      	beq.n	8001d20 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce6:	4b19      	ldr	r3, [pc, #100]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cec:	4a17      	ldr	r2, [pc, #92]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf6:	f7ff faff 	bl	80012f8 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cfe:	f7ff fafb 	bl	80012f8 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e1e7      	b.n	80020e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d10:	4b0e      	ldr	r3, [pc, #56]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0ef      	beq.n	8001cfe <HAL_RCC_OscConfig+0x22e>
 8001d1e:	e020      	b.n	8001d62 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d20:	4b0a      	ldr	r3, [pc, #40]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d26:	4a09      	ldr	r2, [pc, #36]	@ (8001d4c <HAL_RCC_OscConfig+0x27c>)
 8001d28:	f023 0301 	bic.w	r3, r3, #1
 8001d2c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d30:	f7ff fae2 	bl	80012f8 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d36:	e00d      	b.n	8001d54 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d38:	f7ff fade 	bl	80012f8 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d906      	bls.n	8001d54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e1ca      	b.n	80020e0 <HAL_RCC_OscConfig+0x610>
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d54:	4b8c      	ldr	r3, [pc, #560]	@ (8001f88 <HAL_RCC_OscConfig+0x4b8>)
 8001d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1ea      	bne.n	8001d38 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 80a6 	beq.w	8001ebc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d70:	2300      	movs	r3, #0
 8001d72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d74:	4b84      	ldr	r3, [pc, #528]	@ (8001f88 <HAL_RCC_OscConfig+0x4b8>)
 8001d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_RCC_OscConfig+0x2b4>
 8001d80:	2301      	movs	r3, #1
 8001d82:	e000      	b.n	8001d86 <HAL_RCC_OscConfig+0x2b6>
 8001d84:	2300      	movs	r3, #0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00d      	beq.n	8001da6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d8a:	4b7f      	ldr	r3, [pc, #508]	@ (8001f88 <HAL_RCC_OscConfig+0x4b8>)
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8e:	4a7e      	ldr	r2, [pc, #504]	@ (8001f88 <HAL_RCC_OscConfig+0x4b8>)
 8001d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d94:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d96:	4b7c      	ldr	r3, [pc, #496]	@ (8001f88 <HAL_RCC_OscConfig+0x4b8>)
 8001d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001da2:	2301      	movs	r3, #1
 8001da4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001da6:	4b79      	ldr	r3, [pc, #484]	@ (8001f8c <HAL_RCC_OscConfig+0x4bc>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d118      	bne.n	8001de4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001db2:	4b76      	ldr	r3, [pc, #472]	@ (8001f8c <HAL_RCC_OscConfig+0x4bc>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a75      	ldr	r2, [pc, #468]	@ (8001f8c <HAL_RCC_OscConfig+0x4bc>)
 8001db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dbe:	f7ff fa9b 	bl	80012f8 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc6:	f7ff fa97 	bl	80012f8 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e183      	b.n	80020e0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd8:	4b6c      	ldr	r3, [pc, #432]	@ (8001f8c <HAL_RCC_OscConfig+0x4bc>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d108      	bne.n	8001dfe <HAL_RCC_OscConfig+0x32e>
 8001dec:	4b66      	ldr	r3, [pc, #408]	@ (8001f88 <HAL_RCC_OscConfig+0x4b8>)
 8001dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001df2:	4a65      	ldr	r2, [pc, #404]	@ (8001f88 <HAL_RCC_OscConfig+0x4b8>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001dfc:	e024      	b.n	8001e48 <HAL_RCC_OscConfig+0x378>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2b05      	cmp	r3, #5
 8001e04:	d110      	bne.n	8001e28 <HAL_RCC_OscConfig+0x358>
 8001e06:	4b60      	ldr	r3, [pc, #384]	@ (8001f88 <HAL_RCC_OscConfig+0x4b8>)
 8001e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e0c:	4a5e      	ldr	r2, [pc, #376]	@ (8001f88 <HAL_RCC_OscConfig+0x4b8>)
 8001e0e:	f043 0304 	orr.w	r3, r3, #4
 8001e12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e16:	4b5c      	ldr	r3, [pc, #368]	@ (8001f88 <HAL_RCC_OscConfig+0x4b8>)
 8001e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e1c:	4a5a      	ldr	r2, [pc, #360]	@ (8001f88 <HAL_RCC_OscConfig+0x4b8>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e26:	e00f      	b.n	8001e48 <HAL_RCC_OscConfig+0x378>
 8001e28:	4b57      	ldr	r3, [pc, #348]	@ (8001f88 <HAL_RCC_OscConfig+0x4b8>)
 8001e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e2e:	4a56      	ldr	r2, [pc, #344]	@ (8001f88 <HAL_RCC_OscConfig+0x4b8>)
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e38:	4b53      	ldr	r3, [pc, #332]	@ (8001f88 <HAL_RCC_OscConfig+0x4b8>)
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e3e:	4a52      	ldr	r2, [pc, #328]	@ (8001f88 <HAL_RCC_OscConfig+0x4b8>)
 8001e40:	f023 0304 	bic.w	r3, r3, #4
 8001e44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d016      	beq.n	8001e7e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e50:	f7ff fa52 	bl	80012f8 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e56:	e00a      	b.n	8001e6e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e58:	f7ff fa4e 	bl	80012f8 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e138      	b.n	80020e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e6e:	4b46      	ldr	r3, [pc, #280]	@ (8001f88 <HAL_RCC_OscConfig+0x4b8>)
 8001e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0ed      	beq.n	8001e58 <HAL_RCC_OscConfig+0x388>
 8001e7c:	e015      	b.n	8001eaa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7e:	f7ff fa3b 	bl	80012f8 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e84:	e00a      	b.n	8001e9c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e86:	f7ff fa37 	bl	80012f8 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e121      	b.n	80020e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e9c:	4b3a      	ldr	r3, [pc, #232]	@ (8001f88 <HAL_RCC_OscConfig+0x4b8>)
 8001e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1ed      	bne.n	8001e86 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001eaa:	7ffb      	ldrb	r3, [r7, #31]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d105      	bne.n	8001ebc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb0:	4b35      	ldr	r3, [pc, #212]	@ (8001f88 <HAL_RCC_OscConfig+0x4b8>)
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb4:	4a34      	ldr	r2, [pc, #208]	@ (8001f88 <HAL_RCC_OscConfig+0x4b8>)
 8001eb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001eba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0320 	and.w	r3, r3, #32
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d03c      	beq.n	8001f42 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d01c      	beq.n	8001f0a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ed0:	4b2d      	ldr	r3, [pc, #180]	@ (8001f88 <HAL_RCC_OscConfig+0x4b8>)
 8001ed2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ed6:	4a2c      	ldr	r2, [pc, #176]	@ (8001f88 <HAL_RCC_OscConfig+0x4b8>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee0:	f7ff fa0a 	bl	80012f8 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ee8:	f7ff fa06 	bl	80012f8 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e0f2      	b.n	80020e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001efa:	4b23      	ldr	r3, [pc, #140]	@ (8001f88 <HAL_RCC_OscConfig+0x4b8>)
 8001efc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0ef      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x418>
 8001f08:	e01b      	b.n	8001f42 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001f88 <HAL_RCC_OscConfig+0x4b8>)
 8001f0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f10:	4a1d      	ldr	r2, [pc, #116]	@ (8001f88 <HAL_RCC_OscConfig+0x4b8>)
 8001f12:	f023 0301 	bic.w	r3, r3, #1
 8001f16:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1a:	f7ff f9ed 	bl	80012f8 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f22:	f7ff f9e9 	bl	80012f8 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e0d5      	b.n	80020e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f34:	4b14      	ldr	r3, [pc, #80]	@ (8001f88 <HAL_RCC_OscConfig+0x4b8>)
 8001f36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1ef      	bne.n	8001f22 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 80c9 	beq.w	80020de <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f88 <HAL_RCC_OscConfig+0x4b8>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 030c 	and.w	r3, r3, #12
 8001f54:	2b0c      	cmp	r3, #12
 8001f56:	f000 8083 	beq.w	8002060 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d15e      	bne.n	8002020 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f62:	4b09      	ldr	r3, [pc, #36]	@ (8001f88 <HAL_RCC_OscConfig+0x4b8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a08      	ldr	r2, [pc, #32]	@ (8001f88 <HAL_RCC_OscConfig+0x4b8>)
 8001f68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6e:	f7ff f9c3 	bl	80012f8 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f74:	e00c      	b.n	8001f90 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f76:	f7ff f9bf 	bl	80012f8 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d905      	bls.n	8001f90 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e0ab      	b.n	80020e0 <HAL_RCC_OscConfig+0x610>
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f90:	4b55      	ldr	r3, [pc, #340]	@ (80020e8 <HAL_RCC_OscConfig+0x618>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1ec      	bne.n	8001f76 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f9c:	4b52      	ldr	r3, [pc, #328]	@ (80020e8 <HAL_RCC_OscConfig+0x618>)
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	4b52      	ldr	r3, [pc, #328]	@ (80020ec <HAL_RCC_OscConfig+0x61c>)
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6a11      	ldr	r1, [r2, #32]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001fac:	3a01      	subs	r2, #1
 8001fae:	0112      	lsls	r2, r2, #4
 8001fb0:	4311      	orrs	r1, r2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001fb6:	0212      	lsls	r2, r2, #8
 8001fb8:	4311      	orrs	r1, r2
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001fbe:	0852      	lsrs	r2, r2, #1
 8001fc0:	3a01      	subs	r2, #1
 8001fc2:	0552      	lsls	r2, r2, #21
 8001fc4:	4311      	orrs	r1, r2
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001fca:	0852      	lsrs	r2, r2, #1
 8001fcc:	3a01      	subs	r2, #1
 8001fce:	0652      	lsls	r2, r2, #25
 8001fd0:	4311      	orrs	r1, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001fd6:	06d2      	lsls	r2, r2, #27
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	4943      	ldr	r1, [pc, #268]	@ (80020e8 <HAL_RCC_OscConfig+0x618>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fe0:	4b41      	ldr	r3, [pc, #260]	@ (80020e8 <HAL_RCC_OscConfig+0x618>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a40      	ldr	r2, [pc, #256]	@ (80020e8 <HAL_RCC_OscConfig+0x618>)
 8001fe6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fec:	4b3e      	ldr	r3, [pc, #248]	@ (80020e8 <HAL_RCC_OscConfig+0x618>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4a3d      	ldr	r2, [pc, #244]	@ (80020e8 <HAL_RCC_OscConfig+0x618>)
 8001ff2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ff6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff8:	f7ff f97e 	bl	80012f8 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002000:	f7ff f97a 	bl	80012f8 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e066      	b.n	80020e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002012:	4b35      	ldr	r3, [pc, #212]	@ (80020e8 <HAL_RCC_OscConfig+0x618>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0f0      	beq.n	8002000 <HAL_RCC_OscConfig+0x530>
 800201e:	e05e      	b.n	80020de <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002020:	4b31      	ldr	r3, [pc, #196]	@ (80020e8 <HAL_RCC_OscConfig+0x618>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a30      	ldr	r2, [pc, #192]	@ (80020e8 <HAL_RCC_OscConfig+0x618>)
 8002026:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800202a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202c:	f7ff f964 	bl	80012f8 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002034:	f7ff f960 	bl	80012f8 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e04c      	b.n	80020e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002046:	4b28      	ldr	r3, [pc, #160]	@ (80020e8 <HAL_RCC_OscConfig+0x618>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002052:	4b25      	ldr	r3, [pc, #148]	@ (80020e8 <HAL_RCC_OscConfig+0x618>)
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	4924      	ldr	r1, [pc, #144]	@ (80020e8 <HAL_RCC_OscConfig+0x618>)
 8002058:	4b25      	ldr	r3, [pc, #148]	@ (80020f0 <HAL_RCC_OscConfig+0x620>)
 800205a:	4013      	ands	r3, r2
 800205c:	60cb      	str	r3, [r1, #12]
 800205e:	e03e      	b.n	80020de <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e039      	b.n	80020e0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800206c:	4b1e      	ldr	r3, [pc, #120]	@ (80020e8 <HAL_RCC_OscConfig+0x618>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f003 0203 	and.w	r2, r3, #3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	429a      	cmp	r2, r3
 800207e:	d12c      	bne.n	80020da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208a:	3b01      	subs	r3, #1
 800208c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208e:	429a      	cmp	r2, r3
 8002090:	d123      	bne.n	80020da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800209e:	429a      	cmp	r2, r3
 80020a0:	d11b      	bne.n	80020da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d113      	bne.n	80020da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020bc:	085b      	lsrs	r3, r3, #1
 80020be:	3b01      	subs	r3, #1
 80020c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d109      	bne.n	80020da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020d0:	085b      	lsrs	r3, r3, #1
 80020d2:	3b01      	subs	r3, #1
 80020d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d001      	beq.n	80020de <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3720      	adds	r7, #32
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40021000 	.word	0x40021000
 80020ec:	019f800c 	.word	0x019f800c
 80020f0:	feeefffc 	.word	0xfeeefffc

080020f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e11e      	b.n	800234a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800210c:	4b91      	ldr	r3, [pc, #580]	@ (8002354 <HAL_RCC_ClockConfig+0x260>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 030f 	and.w	r3, r3, #15
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d910      	bls.n	800213c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211a:	4b8e      	ldr	r3, [pc, #568]	@ (8002354 <HAL_RCC_ClockConfig+0x260>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 020f 	bic.w	r2, r3, #15
 8002122:	498c      	ldr	r1, [pc, #560]	@ (8002354 <HAL_RCC_ClockConfig+0x260>)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	4313      	orrs	r3, r2
 8002128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800212a:	4b8a      	ldr	r3, [pc, #552]	@ (8002354 <HAL_RCC_ClockConfig+0x260>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	429a      	cmp	r2, r3
 8002136:	d001      	beq.n	800213c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e106      	b.n	800234a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b00      	cmp	r3, #0
 8002146:	d073      	beq.n	8002230 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b03      	cmp	r3, #3
 800214e:	d129      	bne.n	80021a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002150:	4b81      	ldr	r3, [pc, #516]	@ (8002358 <HAL_RCC_ClockConfig+0x264>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e0f4      	b.n	800234a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002160:	f000 f99e 	bl	80024a0 <RCC_GetSysClockFreqFromPLLSource>
 8002164:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4a7c      	ldr	r2, [pc, #496]	@ (800235c <HAL_RCC_ClockConfig+0x268>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d93f      	bls.n	80021ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800216e:	4b7a      	ldr	r3, [pc, #488]	@ (8002358 <HAL_RCC_ClockConfig+0x264>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d009      	beq.n	800218e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002182:	2b00      	cmp	r3, #0
 8002184:	d033      	beq.n	80021ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800218a:	2b00      	cmp	r3, #0
 800218c:	d12f      	bne.n	80021ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800218e:	4b72      	ldr	r3, [pc, #456]	@ (8002358 <HAL_RCC_ClockConfig+0x264>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002196:	4a70      	ldr	r2, [pc, #448]	@ (8002358 <HAL_RCC_ClockConfig+0x264>)
 8002198:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800219c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800219e:	2380      	movs	r3, #128	@ 0x80
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	e024      	b.n	80021ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d107      	bne.n	80021bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ac:	4b6a      	ldr	r3, [pc, #424]	@ (8002358 <HAL_RCC_ClockConfig+0x264>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d109      	bne.n	80021cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e0c6      	b.n	800234a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021bc:	4b66      	ldr	r3, [pc, #408]	@ (8002358 <HAL_RCC_ClockConfig+0x264>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0be      	b.n	800234a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80021cc:	f000 f8ce 	bl	800236c <HAL_RCC_GetSysClockFreq>
 80021d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4a61      	ldr	r2, [pc, #388]	@ (800235c <HAL_RCC_ClockConfig+0x268>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d909      	bls.n	80021ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021da:	4b5f      	ldr	r3, [pc, #380]	@ (8002358 <HAL_RCC_ClockConfig+0x264>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80021e2:	4a5d      	ldr	r2, [pc, #372]	@ (8002358 <HAL_RCC_ClockConfig+0x264>)
 80021e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80021ea:	2380      	movs	r3, #128	@ 0x80
 80021ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021ee:	4b5a      	ldr	r3, [pc, #360]	@ (8002358 <HAL_RCC_ClockConfig+0x264>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f023 0203 	bic.w	r2, r3, #3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	4957      	ldr	r1, [pc, #348]	@ (8002358 <HAL_RCC_ClockConfig+0x264>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002200:	f7ff f87a 	bl	80012f8 <HAL_GetTick>
 8002204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002206:	e00a      	b.n	800221e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002208:	f7ff f876 	bl	80012f8 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e095      	b.n	800234a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221e:	4b4e      	ldr	r3, [pc, #312]	@ (8002358 <HAL_RCC_ClockConfig+0x264>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 020c 	and.w	r2, r3, #12
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	429a      	cmp	r2, r3
 800222e:	d1eb      	bne.n	8002208 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d023      	beq.n	8002284 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002248:	4b43      	ldr	r3, [pc, #268]	@ (8002358 <HAL_RCC_ClockConfig+0x264>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	4a42      	ldr	r2, [pc, #264]	@ (8002358 <HAL_RCC_ClockConfig+0x264>)
 800224e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002252:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	2b00      	cmp	r3, #0
 800225e:	d007      	beq.n	8002270 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002260:	4b3d      	ldr	r3, [pc, #244]	@ (8002358 <HAL_RCC_ClockConfig+0x264>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002268:	4a3b      	ldr	r2, [pc, #236]	@ (8002358 <HAL_RCC_ClockConfig+0x264>)
 800226a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800226e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002270:	4b39      	ldr	r3, [pc, #228]	@ (8002358 <HAL_RCC_ClockConfig+0x264>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	4936      	ldr	r1, [pc, #216]	@ (8002358 <HAL_RCC_ClockConfig+0x264>)
 800227e:	4313      	orrs	r3, r2
 8002280:	608b      	str	r3, [r1, #8]
 8002282:	e008      	b.n	8002296 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	2b80      	cmp	r3, #128	@ 0x80
 8002288:	d105      	bne.n	8002296 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800228a:	4b33      	ldr	r3, [pc, #204]	@ (8002358 <HAL_RCC_ClockConfig+0x264>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	4a32      	ldr	r2, [pc, #200]	@ (8002358 <HAL_RCC_ClockConfig+0x264>)
 8002290:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002294:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002296:	4b2f      	ldr	r3, [pc, #188]	@ (8002354 <HAL_RCC_ClockConfig+0x260>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d21d      	bcs.n	80022e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002354 <HAL_RCC_ClockConfig+0x260>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f023 020f 	bic.w	r2, r3, #15
 80022ac:	4929      	ldr	r1, [pc, #164]	@ (8002354 <HAL_RCC_ClockConfig+0x260>)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022b4:	f7ff f820 	bl	80012f8 <HAL_GetTick>
 80022b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ba:	e00a      	b.n	80022d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022bc:	f7ff f81c 	bl	80012f8 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e03b      	b.n	800234a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d2:	4b20      	ldr	r3, [pc, #128]	@ (8002354 <HAL_RCC_ClockConfig+0x260>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d1ed      	bne.n	80022bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d008      	beq.n	80022fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002358 <HAL_RCC_ClockConfig+0x264>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	4917      	ldr	r1, [pc, #92]	@ (8002358 <HAL_RCC_ClockConfig+0x264>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d009      	beq.n	800231e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800230a:	4b13      	ldr	r3, [pc, #76]	@ (8002358 <HAL_RCC_ClockConfig+0x264>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	490f      	ldr	r1, [pc, #60]	@ (8002358 <HAL_RCC_ClockConfig+0x264>)
 800231a:	4313      	orrs	r3, r2
 800231c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800231e:	f000 f825 	bl	800236c <HAL_RCC_GetSysClockFreq>
 8002322:	4602      	mov	r2, r0
 8002324:	4b0c      	ldr	r3, [pc, #48]	@ (8002358 <HAL_RCC_ClockConfig+0x264>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	091b      	lsrs	r3, r3, #4
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	490c      	ldr	r1, [pc, #48]	@ (8002360 <HAL_RCC_ClockConfig+0x26c>)
 8002330:	5ccb      	ldrb	r3, [r1, r3]
 8002332:	f003 031f 	and.w	r3, r3, #31
 8002336:	fa22 f303 	lsr.w	r3, r2, r3
 800233a:	4a0a      	ldr	r2, [pc, #40]	@ (8002364 <HAL_RCC_ClockConfig+0x270>)
 800233c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800233e:	4b0a      	ldr	r3, [pc, #40]	@ (8002368 <HAL_RCC_ClockConfig+0x274>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f7fe ff8c 	bl	8001260 <HAL_InitTick>
 8002348:	4603      	mov	r3, r0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40022000 	.word	0x40022000
 8002358:	40021000 	.word	0x40021000
 800235c:	04c4b400 	.word	0x04c4b400
 8002360:	0800d720 	.word	0x0800d720
 8002364:	20000000 	.word	0x20000000
 8002368:	20000018 	.word	0x20000018

0800236c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800236c:	b480      	push	{r7}
 800236e:	b087      	sub	sp, #28
 8002370:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002372:	4b2c      	ldr	r3, [pc, #176]	@ (8002424 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 030c 	and.w	r3, r3, #12
 800237a:	2b04      	cmp	r3, #4
 800237c:	d102      	bne.n	8002384 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800237e:	4b2a      	ldr	r3, [pc, #168]	@ (8002428 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	e047      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002384:	4b27      	ldr	r3, [pc, #156]	@ (8002424 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 030c 	and.w	r3, r3, #12
 800238c:	2b08      	cmp	r3, #8
 800238e:	d102      	bne.n	8002396 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002390:	4b26      	ldr	r3, [pc, #152]	@ (800242c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	e03e      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002396:	4b23      	ldr	r3, [pc, #140]	@ (8002424 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 030c 	and.w	r3, r3, #12
 800239e:	2b0c      	cmp	r3, #12
 80023a0:	d136      	bne.n	8002410 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023a2:	4b20      	ldr	r3, [pc, #128]	@ (8002424 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002424 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	091b      	lsrs	r3, r3, #4
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	3301      	adds	r3, #1
 80023b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d10c      	bne.n	80023da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023c0:	4a1a      	ldr	r2, [pc, #104]	@ (800242c <HAL_RCC_GetSysClockFreq+0xc0>)
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c8:	4a16      	ldr	r2, [pc, #88]	@ (8002424 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023ca:	68d2      	ldr	r2, [r2, #12]
 80023cc:	0a12      	lsrs	r2, r2, #8
 80023ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80023d2:	fb02 f303 	mul.w	r3, r2, r3
 80023d6:	617b      	str	r3, [r7, #20]
      break;
 80023d8:	e00c      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023da:	4a13      	ldr	r2, [pc, #76]	@ (8002428 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e2:	4a10      	ldr	r2, [pc, #64]	@ (8002424 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023e4:	68d2      	ldr	r2, [r2, #12]
 80023e6:	0a12      	lsrs	r2, r2, #8
 80023e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80023ec:	fb02 f303 	mul.w	r3, r2, r3
 80023f0:	617b      	str	r3, [r7, #20]
      break;
 80023f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002424 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	0e5b      	lsrs	r3, r3, #25
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	3301      	adds	r3, #1
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	fbb2 f3f3 	udiv	r3, r2, r3
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	e001      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002414:	693b      	ldr	r3, [r7, #16]
}
 8002416:	4618      	mov	r0, r3
 8002418:	371c      	adds	r7, #28
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40021000 	.word	0x40021000
 8002428:	00f42400 	.word	0x00f42400
 800242c:	016e3600 	.word	0x016e3600

08002430 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002434:	4b03      	ldr	r3, [pc, #12]	@ (8002444 <HAL_RCC_GetHCLKFreq+0x14>)
 8002436:	681b      	ldr	r3, [r3, #0]
}
 8002438:	4618      	mov	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	20000000 	.word	0x20000000

08002448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800244c:	f7ff fff0 	bl	8002430 <HAL_RCC_GetHCLKFreq>
 8002450:	4602      	mov	r2, r0
 8002452:	4b06      	ldr	r3, [pc, #24]	@ (800246c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	0a1b      	lsrs	r3, r3, #8
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	4904      	ldr	r1, [pc, #16]	@ (8002470 <HAL_RCC_GetPCLK1Freq+0x28>)
 800245e:	5ccb      	ldrb	r3, [r1, r3]
 8002460:	f003 031f 	and.w	r3, r3, #31
 8002464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002468:	4618      	mov	r0, r3
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40021000 	.word	0x40021000
 8002470:	0800d730 	.word	0x0800d730

08002474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002478:	f7ff ffda 	bl	8002430 <HAL_RCC_GetHCLKFreq>
 800247c:	4602      	mov	r2, r0
 800247e:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	0adb      	lsrs	r3, r3, #11
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	4904      	ldr	r1, [pc, #16]	@ (800249c <HAL_RCC_GetPCLK2Freq+0x28>)
 800248a:	5ccb      	ldrb	r3, [r1, r3]
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002494:	4618      	mov	r0, r3
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000
 800249c:	0800d730 	.word	0x0800d730

080024a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b087      	sub	sp, #28
 80024a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002520 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002520 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	091b      	lsrs	r3, r3, #4
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	3301      	adds	r3, #1
 80024bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d10c      	bne.n	80024de <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024c4:	4a17      	ldr	r2, [pc, #92]	@ (8002524 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024cc:	4a14      	ldr	r2, [pc, #80]	@ (8002520 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024ce:	68d2      	ldr	r2, [r2, #12]
 80024d0:	0a12      	lsrs	r2, r2, #8
 80024d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80024d6:	fb02 f303 	mul.w	r3, r2, r3
 80024da:	617b      	str	r3, [r7, #20]
    break;
 80024dc:	e00c      	b.n	80024f8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024de:	4a12      	ldr	r2, [pc, #72]	@ (8002528 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e6:	4a0e      	ldr	r2, [pc, #56]	@ (8002520 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024e8:	68d2      	ldr	r2, [r2, #12]
 80024ea:	0a12      	lsrs	r2, r2, #8
 80024ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80024f0:	fb02 f303 	mul.w	r3, r2, r3
 80024f4:	617b      	str	r3, [r7, #20]
    break;
 80024f6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024f8:	4b09      	ldr	r3, [pc, #36]	@ (8002520 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	0e5b      	lsrs	r3, r3, #25
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	3301      	adds	r3, #1
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002510:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002512:	687b      	ldr	r3, [r7, #4]
}
 8002514:	4618      	mov	r0, r3
 8002516:	371c      	adds	r7, #28
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	40021000 	.word	0x40021000
 8002524:	016e3600 	.word	0x016e3600
 8002528:	00f42400 	.word	0x00f42400

0800252c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e09d      	b.n	800267a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002542:	2b00      	cmp	r3, #0
 8002544:	d108      	bne.n	8002558 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800254e:	d009      	beq.n	8002564 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	61da      	str	r2, [r3, #28]
 8002556:	e005      	b.n	8002564 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d106      	bne.n	8002584 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7fe faf8 	bl	8000b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800259a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80025a4:	d902      	bls.n	80025ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	e002      	b.n	80025b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80025ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80025ba:	d007      	beq.n	80025cc <HAL_SPI_Init+0xa0>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80025c4:	d002      	beq.n	80025cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80025dc:	431a      	orrs	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	431a      	orrs	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800260e:	ea42 0103 	orr.w	r1, r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002616:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	0c1b      	lsrs	r3, r3, #16
 8002628:	f003 0204 	and.w	r2, r3, #4
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002630:	f003 0310 	and.w	r3, r3, #16
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002648:	ea42 0103 	orr.w	r1, r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	69da      	ldr	r2, [r3, #28]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002668:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b088      	sub	sp, #32
 8002686:	af00      	add	r7, sp, #0
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	603b      	str	r3, [r7, #0]
 800268e:	4613      	mov	r3, r2
 8002690:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002692:	f7fe fe31 	bl	80012f8 <HAL_GetTick>
 8002696:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d001      	beq.n	80026ac <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80026a8:	2302      	movs	r3, #2
 80026aa:	e15c      	b.n	8002966 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <HAL_SPI_Transmit+0x36>
 80026b2:	88fb      	ldrh	r3, [r7, #6]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e154      	b.n	8002966 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_SPI_Transmit+0x48>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e14d      	b.n	8002966 <HAL_SPI_Transmit+0x2e4>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2203      	movs	r2, #3
 80026d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	88fa      	ldrh	r2, [r7, #6]
 80026ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	88fa      	ldrh	r2, [r7, #6]
 80026f0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800271c:	d10f      	bne.n	800273e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800272c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800273c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002748:	2b40      	cmp	r3, #64	@ 0x40
 800274a:	d007      	beq.n	800275c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800275a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002764:	d952      	bls.n	800280c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d002      	beq.n	8002774 <HAL_SPI_Transmit+0xf2>
 800276e:	8b7b      	ldrh	r3, [r7, #26]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d145      	bne.n	8002800 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002778:	881a      	ldrh	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002784:	1c9a      	adds	r2, r3, #2
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800278e:	b29b      	uxth	r3, r3
 8002790:	3b01      	subs	r3, #1
 8002792:	b29a      	uxth	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002798:	e032      	b.n	8002800 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d112      	bne.n	80027ce <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ac:	881a      	ldrh	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b8:	1c9a      	adds	r2, r3, #2
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80027cc:	e018      	b.n	8002800 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027ce:	f7fe fd93 	bl	80012f8 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d803      	bhi.n	80027e6 <HAL_SPI_Transmit+0x164>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e4:	d102      	bne.n	80027ec <HAL_SPI_Transmit+0x16a>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d109      	bne.n	8002800 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e0b2      	b.n	8002966 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002804:	b29b      	uxth	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1c7      	bne.n	800279a <HAL_SPI_Transmit+0x118>
 800280a:	e083      	b.n	8002914 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <HAL_SPI_Transmit+0x198>
 8002814:	8b7b      	ldrh	r3, [r7, #26]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d177      	bne.n	800290a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800281e:	b29b      	uxth	r3, r3
 8002820:	2b01      	cmp	r3, #1
 8002822:	d912      	bls.n	800284a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002828:	881a      	ldrh	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002834:	1c9a      	adds	r2, r3, #2
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800283e:	b29b      	uxth	r3, r3
 8002840:	3b02      	subs	r3, #2
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002848:	e05f      	b.n	800290a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	330c      	adds	r3, #12
 8002854:	7812      	ldrb	r2, [r2, #0]
 8002856:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002866:	b29b      	uxth	r3, r3
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002870:	e04b      	b.n	800290a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b02      	cmp	r3, #2
 800287e:	d12b      	bne.n	80028d8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002884:	b29b      	uxth	r3, r3
 8002886:	2b01      	cmp	r3, #1
 8002888:	d912      	bls.n	80028b0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800288e:	881a      	ldrh	r2, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800289a:	1c9a      	adds	r2, r3, #2
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	3b02      	subs	r3, #2
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80028ae:	e02c      	b.n	800290a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	330c      	adds	r3, #12
 80028ba:	7812      	ldrb	r2, [r2, #0]
 80028bc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80028d6:	e018      	b.n	800290a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028d8:	f7fe fd0e 	bl	80012f8 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d803      	bhi.n	80028f0 <HAL_SPI_Transmit+0x26e>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ee:	d102      	bne.n	80028f6 <HAL_SPI_Transmit+0x274>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d109      	bne.n	800290a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e02d      	b.n	8002966 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800290e:	b29b      	uxth	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1ae      	bne.n	8002872 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002914:	69fa      	ldr	r2, [r7, #28]
 8002916:	6839      	ldr	r1, [r7, #0]
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 fcf5 	bl	8003308 <SPI_EndRxTxTransaction>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d002      	beq.n	800292a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2220      	movs	r2, #32
 8002928:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10a      	bne.n	8002948 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002932:	2300      	movs	r3, #0
 8002934:	617b      	str	r3, [r7, #20]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002964:	2300      	movs	r3, #0
  }
}
 8002966:	4618      	mov	r0, r3
 8002968:	3720      	adds	r7, #32
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b088      	sub	sp, #32
 8002972:	af02      	add	r7, sp, #8
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	603b      	str	r3, [r7, #0]
 800297a:	4613      	mov	r3, r2
 800297c:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b01      	cmp	r3, #1
 8002988:	d001      	beq.n	800298e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800298a:	2302      	movs	r3, #2
 800298c:	e123      	b.n	8002bd6 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <HAL_SPI_Receive+0x2c>
 8002994:	88fb      	ldrh	r3, [r7, #6]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e11b      	b.n	8002bd6 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029a6:	d112      	bne.n	80029ce <HAL_SPI_Receive+0x60>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10e      	bne.n	80029ce <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2204      	movs	r2, #4
 80029b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80029b8:	88fa      	ldrh	r2, [r7, #6]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	4613      	mov	r3, r2
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	68b9      	ldr	r1, [r7, #8]
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 f90a 	bl	8002bde <HAL_SPI_TransmitReceive>
 80029ca:	4603      	mov	r3, r0
 80029cc:	e103      	b.n	8002bd6 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029ce:	f7fe fc93 	bl	80012f8 <HAL_GetTick>
 80029d2:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d101      	bne.n	80029e2 <HAL_SPI_Receive+0x74>
 80029de:	2302      	movs	r3, #2
 80029e0:	e0f9      	b.n	8002bd6 <HAL_SPI_Receive+0x268>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2204      	movs	r2, #4
 80029ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	88fa      	ldrh	r2, [r7, #6]
 8002a02:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	88fa      	ldrh	r2, [r7, #6]
 8002a0a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a34:	d908      	bls.n	8002a48 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	e007      	b.n	8002a58 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002a56:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a60:	d10f      	bne.n	8002a82 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002a80:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a8c:	2b40      	cmp	r3, #64	@ 0x40
 8002a8e:	d007      	beq.n	8002aa0 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a9e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002aa8:	d875      	bhi.n	8002b96 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002aaa:	e037      	b.n	8002b1c <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d117      	bne.n	8002aea <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f103 020c 	add.w	r2, r3, #12
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	7812      	ldrb	r2, [r2, #0]
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002ae8:	e018      	b.n	8002b1c <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002aea:	f7fe fc05 	bl	80012f8 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d803      	bhi.n	8002b02 <HAL_SPI_Receive+0x194>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b00:	d102      	bne.n	8002b08 <HAL_SPI_Receive+0x19a>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d109      	bne.n	8002b1c <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e05c      	b.n	8002bd6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1c1      	bne.n	8002aac <HAL_SPI_Receive+0x13e>
 8002b28:	e03b      	b.n	8002ba2 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d115      	bne.n	8002b64 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	b292      	uxth	r2, r2
 8002b44:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4a:	1c9a      	adds	r2, r3, #2
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002b62:	e018      	b.n	8002b96 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b64:	f7fe fbc8 	bl	80012f8 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d803      	bhi.n	8002b7c <HAL_SPI_Receive+0x20e>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7a:	d102      	bne.n	8002b82 <HAL_SPI_Receive+0x214>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d109      	bne.n	8002b96 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e01f      	b.n	8002bd6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1c3      	bne.n	8002b2a <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	6839      	ldr	r1, [r7, #0]
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 fb56 	bl	8003258 <SPI_EndRxTransaction>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e000      	b.n	8002bd6 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
  }
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b08a      	sub	sp, #40	@ 0x28
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	60f8      	str	r0, [r7, #12]
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
 8002bea:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002bec:	2301      	movs	r3, #1
 8002bee:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bf0:	f7fe fb82 	bl	80012f8 <HAL_GetTick>
 8002bf4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002bfc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002c04:	887b      	ldrh	r3, [r7, #2]
 8002c06:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8002c08:	887b      	ldrh	r3, [r7, #2]
 8002c0a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c0c:	7ffb      	ldrb	r3, [r7, #31]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d00c      	beq.n	8002c2c <HAL_SPI_TransmitReceive+0x4e>
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c18:	d106      	bne.n	8002c28 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d102      	bne.n	8002c28 <HAL_SPI_TransmitReceive+0x4a>
 8002c22:	7ffb      	ldrb	r3, [r7, #31]
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d001      	beq.n	8002c2c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e1f3      	b.n	8003014 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d005      	beq.n	8002c3e <HAL_SPI_TransmitReceive+0x60>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <HAL_SPI_TransmitReceive+0x60>
 8002c38:	887b      	ldrh	r3, [r7, #2]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e1e8      	b.n	8003014 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_SPI_TransmitReceive+0x72>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e1e1      	b.n	8003014 <HAL_SPI_TransmitReceive+0x436>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d003      	beq.n	8002c6c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2205      	movs	r2, #5
 8002c68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	887a      	ldrh	r2, [r7, #2]
 8002c7c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	887a      	ldrh	r2, [r7, #2]
 8002c84:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	887a      	ldrh	r2, [r7, #2]
 8002c92:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	887a      	ldrh	r2, [r7, #2]
 8002c98:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002cae:	d802      	bhi.n	8002cb6 <HAL_SPI_TransmitReceive+0xd8>
 8002cb0:	8abb      	ldrh	r3, [r7, #20]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d908      	bls.n	8002cc8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002cc4:	605a      	str	r2, [r3, #4]
 8002cc6:	e007      	b.n	8002cd8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002cd6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce2:	2b40      	cmp	r3, #64	@ 0x40
 8002ce4:	d007      	beq.n	8002cf6 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cf4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002cfe:	f240 8083 	bls.w	8002e08 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_SPI_TransmitReceive+0x132>
 8002d0a:	8afb      	ldrh	r3, [r7, #22]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d16f      	bne.n	8002df0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d14:	881a      	ldrh	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d20:	1c9a      	adds	r2, r3, #2
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d34:	e05c      	b.n	8002df0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d11b      	bne.n	8002d7c <HAL_SPI_TransmitReceive+0x19e>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d016      	beq.n	8002d7c <HAL_SPI_TransmitReceive+0x19e>
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d113      	bne.n	8002d7c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d58:	881a      	ldrh	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d64:	1c9a      	adds	r2, r3, #2
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d11c      	bne.n	8002dc4 <HAL_SPI_TransmitReceive+0x1e6>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d016      	beq.n	8002dc4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da0:	b292      	uxth	r2, r2
 8002da2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da8:	1c9a      	adds	r2, r3, #2
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002dc4:	f7fe fa98 	bl	80012f8 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d80d      	bhi.n	8002df0 <HAL_SPI_TransmitReceive+0x212>
 8002dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dda:	d009      	beq.n	8002df0 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e111      	b.n	8003014 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d19d      	bne.n	8002d36 <HAL_SPI_TransmitReceive+0x158>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d197      	bne.n	8002d36 <HAL_SPI_TransmitReceive+0x158>
 8002e06:	e0e5      	b.n	8002fd4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d003      	beq.n	8002e18 <HAL_SPI_TransmitReceive+0x23a>
 8002e10:	8afb      	ldrh	r3, [r7, #22]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	f040 80d1 	bne.w	8002fba <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d912      	bls.n	8002e48 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e26:	881a      	ldrh	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e32:	1c9a      	adds	r2, r3, #2
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	3b02      	subs	r3, #2
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e46:	e0b8      	b.n	8002fba <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	330c      	adds	r3, #12
 8002e52:	7812      	ldrb	r2, [r2, #0]
 8002e54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e5a:	1c5a      	adds	r2, r3, #1
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	3b01      	subs	r3, #1
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e6e:	e0a4      	b.n	8002fba <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d134      	bne.n	8002ee8 <HAL_SPI_TransmitReceive+0x30a>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d02f      	beq.n	8002ee8 <HAL_SPI_TransmitReceive+0x30a>
 8002e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d12c      	bne.n	8002ee8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d912      	bls.n	8002ebe <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e9c:	881a      	ldrh	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea8:	1c9a      	adds	r2, r3, #2
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3b02      	subs	r3, #2
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ebc:	e012      	b.n	8002ee4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	330c      	adds	r3, #12
 8002ec8:	7812      	ldrb	r2, [r2, #0]
 8002eca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d148      	bne.n	8002f88 <HAL_SPI_TransmitReceive+0x3aa>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d042      	beq.n	8002f88 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d923      	bls.n	8002f56 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f18:	b292      	uxth	r2, r2
 8002f1a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f20:	1c9a      	adds	r2, r3, #2
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	3b02      	subs	r3, #2
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d81f      	bhi.n	8002f84 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002f52:	605a      	str	r2, [r3, #4]
 8002f54:	e016      	b.n	8002f84 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f103 020c 	add.w	r2, r3, #12
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f62:	7812      	ldrb	r2, [r2, #0]
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f84:	2301      	movs	r3, #1
 8002f86:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f88:	f7fe f9b6 	bl	80012f8 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d803      	bhi.n	8002fa0 <HAL_SPI_TransmitReceive+0x3c2>
 8002f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9e:	d102      	bne.n	8002fa6 <HAL_SPI_TransmitReceive+0x3c8>
 8002fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d109      	bne.n	8002fba <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e02c      	b.n	8003014 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f47f af55 	bne.w	8002e70 <HAL_SPI_TransmitReceive+0x292>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f47f af4e 	bne.w	8002e70 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fd4:	6a3a      	ldr	r2, [r7, #32]
 8002fd6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f995 	bl	8003308 <SPI_EndRxTxTransaction>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e00e      	b.n	8003014 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003012:	2300      	movs	r3, #0
  }
}
 8003014:	4618      	mov	r0, r3
 8003016:	3728      	adds	r7, #40	@ 0x28
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	603b      	str	r3, [r7, #0]
 8003028:	4613      	mov	r3, r2
 800302a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800302c:	f7fe f964 	bl	80012f8 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	4413      	add	r3, r2
 800303a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800303c:	f7fe f95c 	bl	80012f8 <HAL_GetTick>
 8003040:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003042:	4b39      	ldr	r3, [pc, #228]	@ (8003128 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	015b      	lsls	r3, r3, #5
 8003048:	0d1b      	lsrs	r3, r3, #20
 800304a:	69fa      	ldr	r2, [r7, #28]
 800304c:	fb02 f303 	mul.w	r3, r2, r3
 8003050:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003052:	e054      	b.n	80030fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305a:	d050      	beq.n	80030fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800305c:	f7fe f94c 	bl	80012f8 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	69fa      	ldr	r2, [r7, #28]
 8003068:	429a      	cmp	r2, r3
 800306a:	d902      	bls.n	8003072 <SPI_WaitFlagStateUntilTimeout+0x56>
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d13d      	bne.n	80030ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003080:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800308a:	d111      	bne.n	80030b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003094:	d004      	beq.n	80030a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800309e:	d107      	bne.n	80030b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030b8:	d10f      	bne.n	80030da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e017      	b.n	800311e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	4013      	ands	r3, r2
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	429a      	cmp	r2, r3
 800310c:	bf0c      	ite	eq
 800310e:	2301      	moveq	r3, #1
 8003110:	2300      	movne	r3, #0
 8003112:	b2db      	uxtb	r3, r3
 8003114:	461a      	mov	r2, r3
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	429a      	cmp	r2, r3
 800311a:	d19b      	bne.n	8003054 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3720      	adds	r7, #32
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20000000 	.word	0x20000000

0800312c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08a      	sub	sp, #40	@ 0x28
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
 8003138:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800313a:	2300      	movs	r3, #0
 800313c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800313e:	f7fe f8db 	bl	80012f8 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003146:	1a9b      	subs	r3, r3, r2
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	4413      	add	r3, r2
 800314c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800314e:	f7fe f8d3 	bl	80012f8 <HAL_GetTick>
 8003152:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	330c      	adds	r3, #12
 800315a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800315c:	4b3d      	ldr	r3, [pc, #244]	@ (8003254 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4613      	mov	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	00da      	lsls	r2, r3, #3
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	0d1b      	lsrs	r3, r3, #20
 800316c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800316e:	fb02 f303 	mul.w	r3, r2, r3
 8003172:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003174:	e060      	b.n	8003238 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800317c:	d107      	bne.n	800318e <SPI_WaitFifoStateUntilTimeout+0x62>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d104      	bne.n	800318e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	b2db      	uxtb	r3, r3
 800318a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800318c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003194:	d050      	beq.n	8003238 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003196:	f7fe f8af 	bl	80012f8 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d902      	bls.n	80031ac <SPI_WaitFifoStateUntilTimeout+0x80>
 80031a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d13d      	bne.n	8003228 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80031ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031c4:	d111      	bne.n	80031ea <SPI_WaitFifoStateUntilTimeout+0xbe>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031ce:	d004      	beq.n	80031da <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031d8:	d107      	bne.n	80031ea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031f2:	d10f      	bne.n	8003214 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003212:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e010      	b.n	800324a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	3b01      	subs	r3, #1
 8003236:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	4013      	ands	r3, r2
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	429a      	cmp	r2, r3
 8003246:	d196      	bne.n	8003176 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3728      	adds	r7, #40	@ 0x28
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	20000000 	.word	0x20000000

08003258 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af02      	add	r7, sp, #8
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800326c:	d111      	bne.n	8003292 <SPI_EndRxTransaction+0x3a>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003276:	d004      	beq.n	8003282 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003280:	d107      	bne.n	8003292 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003290:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2200      	movs	r2, #0
 800329a:	2180      	movs	r1, #128	@ 0x80
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f7ff febd 	bl	800301c <SPI_WaitFlagStateUntilTimeout>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d007      	beq.n	80032b8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ac:	f043 0220 	orr.w	r2, r3, #32
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e023      	b.n	8003300 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032c0:	d11d      	bne.n	80032fe <SPI_EndRxTransaction+0xa6>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032ca:	d004      	beq.n	80032d6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032d4:	d113      	bne.n	80032fe <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2200      	movs	r2, #0
 80032de:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f7ff ff22 	bl	800312c <SPI_WaitFifoStateUntilTimeout>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d007      	beq.n	80032fe <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032f2:	f043 0220 	orr.w	r2, r3, #32
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e000      	b.n	8003300 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af02      	add	r7, sp, #8
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2200      	movs	r2, #0
 800331c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f7ff ff03 	bl	800312c <SPI_WaitFifoStateUntilTimeout>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d007      	beq.n	800333c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003330:	f043 0220 	orr.w	r2, r3, #32
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e027      	b.n	800338c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2200      	movs	r2, #0
 8003344:	2180      	movs	r1, #128	@ 0x80
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f7ff fe68 	bl	800301c <SPI_WaitFlagStateUntilTimeout>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d007      	beq.n	8003362 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003356:	f043 0220 	orr.w	r2, r3, #32
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e014      	b.n	800338c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2200      	movs	r2, #0
 800336a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f7ff fedc 	bl	800312c <SPI_WaitFifoStateUntilTimeout>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d007      	beq.n	800338a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800337e:	f043 0220 	orr.w	r2, r3, #32
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e000      	b.n	800338c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e042      	b.n	800342c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d106      	bne.n	80033be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f83b 	bl	8003434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2224      	movs	r2, #36	@ 0x24
 80033c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0201 	bic.w	r2, r2, #1
 80033d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fbbc 	bl	8003b5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f8bd 	bl	8003564 <UART_SetConfig>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e01b      	b.n	800342c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003402:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003412:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 fc3b 	bl	8003ca0 <UART_CheckIdleState>
 800342a:	4603      	mov	r3, r0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08a      	sub	sp, #40	@ 0x28
 800344c:	af02      	add	r7, sp, #8
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	4613      	mov	r3, r2
 8003456:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800345e:	2b20      	cmp	r3, #32
 8003460:	d17b      	bne.n	800355a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d002      	beq.n	800346e <HAL_UART_Transmit+0x26>
 8003468:	88fb      	ldrh	r3, [r7, #6]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e074      	b.n	800355c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2221      	movs	r2, #33	@ 0x21
 800347e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003482:	f7fd ff39 	bl	80012f8 <HAL_GetTick>
 8003486:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	88fa      	ldrh	r2, [r7, #6]
 800348c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	88fa      	ldrh	r2, [r7, #6]
 8003494:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034a0:	d108      	bne.n	80034b4 <HAL_UART_Transmit+0x6c>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d104      	bne.n	80034b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	61bb      	str	r3, [r7, #24]
 80034b2:	e003      	b.n	80034bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034bc:	e030      	b.n	8003520 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	2200      	movs	r2, #0
 80034c6:	2180      	movs	r1, #128	@ 0x80
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 fc93 	bl	8003df4 <UART_WaitOnFlagUntilTimeout>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d005      	beq.n	80034e0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e03d      	b.n	800355c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10b      	bne.n	80034fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	461a      	mov	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034f4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	3302      	adds	r3, #2
 80034fa:	61bb      	str	r3, [r7, #24]
 80034fc:	e007      	b.n	800350e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	781a      	ldrb	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	3301      	adds	r3, #1
 800350c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003514:	b29b      	uxth	r3, r3
 8003516:	3b01      	subs	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003526:	b29b      	uxth	r3, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1c8      	bne.n	80034be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	2200      	movs	r2, #0
 8003534:	2140      	movs	r1, #64	@ 0x40
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 fc5c 	bl	8003df4 <UART_WaitOnFlagUntilTimeout>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d005      	beq.n	800354e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2220      	movs	r2, #32
 8003546:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e006      	b.n	800355c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2220      	movs	r2, #32
 8003552:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003556:	2300      	movs	r3, #0
 8003558:	e000      	b.n	800355c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800355a:	2302      	movs	r3, #2
  }
}
 800355c:	4618      	mov	r0, r3
 800355e:	3720      	adds	r7, #32
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003568:	b08c      	sub	sp, #48	@ 0x30
 800356a:	af00      	add	r7, sp, #0
 800356c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	431a      	orrs	r2, r3
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	431a      	orrs	r2, r3
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	4313      	orrs	r3, r2
 800358a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	4baa      	ldr	r3, [pc, #680]	@ (800383c <UART_SetConfig+0x2d8>)
 8003594:	4013      	ands	r3, r2
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	6812      	ldr	r2, [r2, #0]
 800359a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800359c:	430b      	orrs	r3, r1
 800359e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a9f      	ldr	r2, [pc, #636]	@ (8003840 <UART_SetConfig+0x2dc>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d004      	beq.n	80035d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035cc:	4313      	orrs	r3, r2
 80035ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80035da:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	6812      	ldr	r2, [r2, #0]
 80035e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035e4:	430b      	orrs	r3, r1
 80035e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ee:	f023 010f 	bic.w	r1, r3, #15
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a90      	ldr	r2, [pc, #576]	@ (8003844 <UART_SetConfig+0x2e0>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d125      	bne.n	8003654 <UART_SetConfig+0xf0>
 8003608:	4b8f      	ldr	r3, [pc, #572]	@ (8003848 <UART_SetConfig+0x2e4>)
 800360a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800360e:	f003 0303 	and.w	r3, r3, #3
 8003612:	2b03      	cmp	r3, #3
 8003614:	d81a      	bhi.n	800364c <UART_SetConfig+0xe8>
 8003616:	a201      	add	r2, pc, #4	@ (adr r2, 800361c <UART_SetConfig+0xb8>)
 8003618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361c:	0800362d 	.word	0x0800362d
 8003620:	0800363d 	.word	0x0800363d
 8003624:	08003635 	.word	0x08003635
 8003628:	08003645 	.word	0x08003645
 800362c:	2301      	movs	r3, #1
 800362e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003632:	e116      	b.n	8003862 <UART_SetConfig+0x2fe>
 8003634:	2302      	movs	r3, #2
 8003636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800363a:	e112      	b.n	8003862 <UART_SetConfig+0x2fe>
 800363c:	2304      	movs	r3, #4
 800363e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003642:	e10e      	b.n	8003862 <UART_SetConfig+0x2fe>
 8003644:	2308      	movs	r3, #8
 8003646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800364a:	e10a      	b.n	8003862 <UART_SetConfig+0x2fe>
 800364c:	2310      	movs	r3, #16
 800364e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003652:	e106      	b.n	8003862 <UART_SetConfig+0x2fe>
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a7c      	ldr	r2, [pc, #496]	@ (800384c <UART_SetConfig+0x2e8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d138      	bne.n	80036d0 <UART_SetConfig+0x16c>
 800365e:	4b7a      	ldr	r3, [pc, #488]	@ (8003848 <UART_SetConfig+0x2e4>)
 8003660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003664:	f003 030c 	and.w	r3, r3, #12
 8003668:	2b0c      	cmp	r3, #12
 800366a:	d82d      	bhi.n	80036c8 <UART_SetConfig+0x164>
 800366c:	a201      	add	r2, pc, #4	@ (adr r2, 8003674 <UART_SetConfig+0x110>)
 800366e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003672:	bf00      	nop
 8003674:	080036a9 	.word	0x080036a9
 8003678:	080036c9 	.word	0x080036c9
 800367c:	080036c9 	.word	0x080036c9
 8003680:	080036c9 	.word	0x080036c9
 8003684:	080036b9 	.word	0x080036b9
 8003688:	080036c9 	.word	0x080036c9
 800368c:	080036c9 	.word	0x080036c9
 8003690:	080036c9 	.word	0x080036c9
 8003694:	080036b1 	.word	0x080036b1
 8003698:	080036c9 	.word	0x080036c9
 800369c:	080036c9 	.word	0x080036c9
 80036a0:	080036c9 	.word	0x080036c9
 80036a4:	080036c1 	.word	0x080036c1
 80036a8:	2300      	movs	r3, #0
 80036aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036ae:	e0d8      	b.n	8003862 <UART_SetConfig+0x2fe>
 80036b0:	2302      	movs	r3, #2
 80036b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036b6:	e0d4      	b.n	8003862 <UART_SetConfig+0x2fe>
 80036b8:	2304      	movs	r3, #4
 80036ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036be:	e0d0      	b.n	8003862 <UART_SetConfig+0x2fe>
 80036c0:	2308      	movs	r3, #8
 80036c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036c6:	e0cc      	b.n	8003862 <UART_SetConfig+0x2fe>
 80036c8:	2310      	movs	r3, #16
 80036ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036ce:	e0c8      	b.n	8003862 <UART_SetConfig+0x2fe>
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a5e      	ldr	r2, [pc, #376]	@ (8003850 <UART_SetConfig+0x2ec>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d125      	bne.n	8003726 <UART_SetConfig+0x1c2>
 80036da:	4b5b      	ldr	r3, [pc, #364]	@ (8003848 <UART_SetConfig+0x2e4>)
 80036dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80036e4:	2b30      	cmp	r3, #48	@ 0x30
 80036e6:	d016      	beq.n	8003716 <UART_SetConfig+0x1b2>
 80036e8:	2b30      	cmp	r3, #48	@ 0x30
 80036ea:	d818      	bhi.n	800371e <UART_SetConfig+0x1ba>
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	d00a      	beq.n	8003706 <UART_SetConfig+0x1a2>
 80036f0:	2b20      	cmp	r3, #32
 80036f2:	d814      	bhi.n	800371e <UART_SetConfig+0x1ba>
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <UART_SetConfig+0x19a>
 80036f8:	2b10      	cmp	r3, #16
 80036fa:	d008      	beq.n	800370e <UART_SetConfig+0x1aa>
 80036fc:	e00f      	b.n	800371e <UART_SetConfig+0x1ba>
 80036fe:	2300      	movs	r3, #0
 8003700:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003704:	e0ad      	b.n	8003862 <UART_SetConfig+0x2fe>
 8003706:	2302      	movs	r3, #2
 8003708:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800370c:	e0a9      	b.n	8003862 <UART_SetConfig+0x2fe>
 800370e:	2304      	movs	r3, #4
 8003710:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003714:	e0a5      	b.n	8003862 <UART_SetConfig+0x2fe>
 8003716:	2308      	movs	r3, #8
 8003718:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800371c:	e0a1      	b.n	8003862 <UART_SetConfig+0x2fe>
 800371e:	2310      	movs	r3, #16
 8003720:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003724:	e09d      	b.n	8003862 <UART_SetConfig+0x2fe>
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a4a      	ldr	r2, [pc, #296]	@ (8003854 <UART_SetConfig+0x2f0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d125      	bne.n	800377c <UART_SetConfig+0x218>
 8003730:	4b45      	ldr	r3, [pc, #276]	@ (8003848 <UART_SetConfig+0x2e4>)
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003736:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800373a:	2bc0      	cmp	r3, #192	@ 0xc0
 800373c:	d016      	beq.n	800376c <UART_SetConfig+0x208>
 800373e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003740:	d818      	bhi.n	8003774 <UART_SetConfig+0x210>
 8003742:	2b80      	cmp	r3, #128	@ 0x80
 8003744:	d00a      	beq.n	800375c <UART_SetConfig+0x1f8>
 8003746:	2b80      	cmp	r3, #128	@ 0x80
 8003748:	d814      	bhi.n	8003774 <UART_SetConfig+0x210>
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <UART_SetConfig+0x1f0>
 800374e:	2b40      	cmp	r3, #64	@ 0x40
 8003750:	d008      	beq.n	8003764 <UART_SetConfig+0x200>
 8003752:	e00f      	b.n	8003774 <UART_SetConfig+0x210>
 8003754:	2300      	movs	r3, #0
 8003756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800375a:	e082      	b.n	8003862 <UART_SetConfig+0x2fe>
 800375c:	2302      	movs	r3, #2
 800375e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003762:	e07e      	b.n	8003862 <UART_SetConfig+0x2fe>
 8003764:	2304      	movs	r3, #4
 8003766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800376a:	e07a      	b.n	8003862 <UART_SetConfig+0x2fe>
 800376c:	2308      	movs	r3, #8
 800376e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003772:	e076      	b.n	8003862 <UART_SetConfig+0x2fe>
 8003774:	2310      	movs	r3, #16
 8003776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800377a:	e072      	b.n	8003862 <UART_SetConfig+0x2fe>
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a35      	ldr	r2, [pc, #212]	@ (8003858 <UART_SetConfig+0x2f4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d12a      	bne.n	80037dc <UART_SetConfig+0x278>
 8003786:	4b30      	ldr	r3, [pc, #192]	@ (8003848 <UART_SetConfig+0x2e4>)
 8003788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800378c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003790:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003794:	d01a      	beq.n	80037cc <UART_SetConfig+0x268>
 8003796:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800379a:	d81b      	bhi.n	80037d4 <UART_SetConfig+0x270>
 800379c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037a0:	d00c      	beq.n	80037bc <UART_SetConfig+0x258>
 80037a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037a6:	d815      	bhi.n	80037d4 <UART_SetConfig+0x270>
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <UART_SetConfig+0x250>
 80037ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037b0:	d008      	beq.n	80037c4 <UART_SetConfig+0x260>
 80037b2:	e00f      	b.n	80037d4 <UART_SetConfig+0x270>
 80037b4:	2300      	movs	r3, #0
 80037b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037ba:	e052      	b.n	8003862 <UART_SetConfig+0x2fe>
 80037bc:	2302      	movs	r3, #2
 80037be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037c2:	e04e      	b.n	8003862 <UART_SetConfig+0x2fe>
 80037c4:	2304      	movs	r3, #4
 80037c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037ca:	e04a      	b.n	8003862 <UART_SetConfig+0x2fe>
 80037cc:	2308      	movs	r3, #8
 80037ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037d2:	e046      	b.n	8003862 <UART_SetConfig+0x2fe>
 80037d4:	2310      	movs	r3, #16
 80037d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037da:	e042      	b.n	8003862 <UART_SetConfig+0x2fe>
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a17      	ldr	r2, [pc, #92]	@ (8003840 <UART_SetConfig+0x2dc>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d13a      	bne.n	800385c <UART_SetConfig+0x2f8>
 80037e6:	4b18      	ldr	r3, [pc, #96]	@ (8003848 <UART_SetConfig+0x2e4>)
 80037e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80037f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80037f4:	d01a      	beq.n	800382c <UART_SetConfig+0x2c8>
 80037f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80037fa:	d81b      	bhi.n	8003834 <UART_SetConfig+0x2d0>
 80037fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003800:	d00c      	beq.n	800381c <UART_SetConfig+0x2b8>
 8003802:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003806:	d815      	bhi.n	8003834 <UART_SetConfig+0x2d0>
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <UART_SetConfig+0x2b0>
 800380c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003810:	d008      	beq.n	8003824 <UART_SetConfig+0x2c0>
 8003812:	e00f      	b.n	8003834 <UART_SetConfig+0x2d0>
 8003814:	2300      	movs	r3, #0
 8003816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800381a:	e022      	b.n	8003862 <UART_SetConfig+0x2fe>
 800381c:	2302      	movs	r3, #2
 800381e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003822:	e01e      	b.n	8003862 <UART_SetConfig+0x2fe>
 8003824:	2304      	movs	r3, #4
 8003826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800382a:	e01a      	b.n	8003862 <UART_SetConfig+0x2fe>
 800382c:	2308      	movs	r3, #8
 800382e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003832:	e016      	b.n	8003862 <UART_SetConfig+0x2fe>
 8003834:	2310      	movs	r3, #16
 8003836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800383a:	e012      	b.n	8003862 <UART_SetConfig+0x2fe>
 800383c:	cfff69f3 	.word	0xcfff69f3
 8003840:	40008000 	.word	0x40008000
 8003844:	40013800 	.word	0x40013800
 8003848:	40021000 	.word	0x40021000
 800384c:	40004400 	.word	0x40004400
 8003850:	40004800 	.word	0x40004800
 8003854:	40004c00 	.word	0x40004c00
 8003858:	40005000 	.word	0x40005000
 800385c:	2310      	movs	r3, #16
 800385e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4aae      	ldr	r2, [pc, #696]	@ (8003b20 <UART_SetConfig+0x5bc>)
 8003868:	4293      	cmp	r3, r2
 800386a:	f040 8097 	bne.w	800399c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800386e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003872:	2b08      	cmp	r3, #8
 8003874:	d823      	bhi.n	80038be <UART_SetConfig+0x35a>
 8003876:	a201      	add	r2, pc, #4	@ (adr r2, 800387c <UART_SetConfig+0x318>)
 8003878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387c:	080038a1 	.word	0x080038a1
 8003880:	080038bf 	.word	0x080038bf
 8003884:	080038a9 	.word	0x080038a9
 8003888:	080038bf 	.word	0x080038bf
 800388c:	080038af 	.word	0x080038af
 8003890:	080038bf 	.word	0x080038bf
 8003894:	080038bf 	.word	0x080038bf
 8003898:	080038bf 	.word	0x080038bf
 800389c:	080038b7 	.word	0x080038b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038a0:	f7fe fdd2 	bl	8002448 <HAL_RCC_GetPCLK1Freq>
 80038a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80038a6:	e010      	b.n	80038ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038a8:	4b9e      	ldr	r3, [pc, #632]	@ (8003b24 <UART_SetConfig+0x5c0>)
 80038aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80038ac:	e00d      	b.n	80038ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ae:	f7fe fd5d 	bl	800236c <HAL_RCC_GetSysClockFreq>
 80038b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80038b4:	e009      	b.n	80038ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80038bc:	e005      	b.n	80038ca <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80038be:	2300      	movs	r3, #0
 80038c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80038c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80038ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f000 8130 	beq.w	8003b32 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d6:	4a94      	ldr	r2, [pc, #592]	@ (8003b28 <UART_SetConfig+0x5c4>)
 80038d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038dc:	461a      	mov	r2, r3
 80038de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	4613      	mov	r3, r2
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	4413      	add	r3, r2
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d305      	bcc.n	8003902 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d903      	bls.n	800390a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003908:	e113      	b.n	8003b32 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800390a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390c:	2200      	movs	r2, #0
 800390e:	60bb      	str	r3, [r7, #8]
 8003910:	60fa      	str	r2, [r7, #12]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003916:	4a84      	ldr	r2, [pc, #528]	@ (8003b28 <UART_SetConfig+0x5c4>)
 8003918:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800391c:	b29b      	uxth	r3, r3
 800391e:	2200      	movs	r2, #0
 8003920:	603b      	str	r3, [r7, #0]
 8003922:	607a      	str	r2, [r7, #4]
 8003924:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003928:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800392c:	f7fc fce0 	bl	80002f0 <__aeabi_uldivmod>
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	4610      	mov	r0, r2
 8003936:	4619      	mov	r1, r3
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	f04f 0300 	mov.w	r3, #0
 8003940:	020b      	lsls	r3, r1, #8
 8003942:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003946:	0202      	lsls	r2, r0, #8
 8003948:	6979      	ldr	r1, [r7, #20]
 800394a:	6849      	ldr	r1, [r1, #4]
 800394c:	0849      	lsrs	r1, r1, #1
 800394e:	2000      	movs	r0, #0
 8003950:	460c      	mov	r4, r1
 8003952:	4605      	mov	r5, r0
 8003954:	eb12 0804 	adds.w	r8, r2, r4
 8003958:	eb43 0905 	adc.w	r9, r3, r5
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	469a      	mov	sl, r3
 8003964:	4693      	mov	fp, r2
 8003966:	4652      	mov	r2, sl
 8003968:	465b      	mov	r3, fp
 800396a:	4640      	mov	r0, r8
 800396c:	4649      	mov	r1, r9
 800396e:	f7fc fcbf 	bl	80002f0 <__aeabi_uldivmod>
 8003972:	4602      	mov	r2, r0
 8003974:	460b      	mov	r3, r1
 8003976:	4613      	mov	r3, r2
 8003978:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003980:	d308      	bcc.n	8003994 <UART_SetConfig+0x430>
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003988:	d204      	bcs.n	8003994 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6a3a      	ldr	r2, [r7, #32]
 8003990:	60da      	str	r2, [r3, #12]
 8003992:	e0ce      	b.n	8003b32 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800399a:	e0ca      	b.n	8003b32 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039a4:	d166      	bne.n	8003a74 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80039a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80039aa:	2b08      	cmp	r3, #8
 80039ac:	d827      	bhi.n	80039fe <UART_SetConfig+0x49a>
 80039ae:	a201      	add	r2, pc, #4	@ (adr r2, 80039b4 <UART_SetConfig+0x450>)
 80039b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b4:	080039d9 	.word	0x080039d9
 80039b8:	080039e1 	.word	0x080039e1
 80039bc:	080039e9 	.word	0x080039e9
 80039c0:	080039ff 	.word	0x080039ff
 80039c4:	080039ef 	.word	0x080039ef
 80039c8:	080039ff 	.word	0x080039ff
 80039cc:	080039ff 	.word	0x080039ff
 80039d0:	080039ff 	.word	0x080039ff
 80039d4:	080039f7 	.word	0x080039f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039d8:	f7fe fd36 	bl	8002448 <HAL_RCC_GetPCLK1Freq>
 80039dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039de:	e014      	b.n	8003a0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039e0:	f7fe fd48 	bl	8002474 <HAL_RCC_GetPCLK2Freq>
 80039e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039e6:	e010      	b.n	8003a0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039e8:	4b4e      	ldr	r3, [pc, #312]	@ (8003b24 <UART_SetConfig+0x5c0>)
 80039ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039ec:	e00d      	b.n	8003a0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ee:	f7fe fcbd 	bl	800236c <HAL_RCC_GetSysClockFreq>
 80039f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039f4:	e009      	b.n	8003a0a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039fc:	e005      	b.n	8003a0a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003a08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 8090 	beq.w	8003b32 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a16:	4a44      	ldr	r2, [pc, #272]	@ (8003b28 <UART_SetConfig+0x5c4>)
 8003a18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a20:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a24:	005a      	lsls	r2, r3, #1
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	085b      	lsrs	r3, r3, #1
 8003a2c:	441a      	add	r2, r3
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	2b0f      	cmp	r3, #15
 8003a3c:	d916      	bls.n	8003a6c <UART_SetConfig+0x508>
 8003a3e:	6a3b      	ldr	r3, [r7, #32]
 8003a40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a44:	d212      	bcs.n	8003a6c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	f023 030f 	bic.w	r3, r3, #15
 8003a4e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	085b      	lsrs	r3, r3, #1
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	8bfb      	ldrh	r3, [r7, #30]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	8bfa      	ldrh	r2, [r7, #30]
 8003a68:	60da      	str	r2, [r3, #12]
 8003a6a:	e062      	b.n	8003b32 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003a72:	e05e      	b.n	8003b32 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a74:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d828      	bhi.n	8003ace <UART_SetConfig+0x56a>
 8003a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a84 <UART_SetConfig+0x520>)
 8003a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a82:	bf00      	nop
 8003a84:	08003aa9 	.word	0x08003aa9
 8003a88:	08003ab1 	.word	0x08003ab1
 8003a8c:	08003ab9 	.word	0x08003ab9
 8003a90:	08003acf 	.word	0x08003acf
 8003a94:	08003abf 	.word	0x08003abf
 8003a98:	08003acf 	.word	0x08003acf
 8003a9c:	08003acf 	.word	0x08003acf
 8003aa0:	08003acf 	.word	0x08003acf
 8003aa4:	08003ac7 	.word	0x08003ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aa8:	f7fe fcce 	bl	8002448 <HAL_RCC_GetPCLK1Freq>
 8003aac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003aae:	e014      	b.n	8003ada <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ab0:	f7fe fce0 	bl	8002474 <HAL_RCC_GetPCLK2Freq>
 8003ab4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ab6:	e010      	b.n	8003ada <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b24 <UART_SetConfig+0x5c0>)
 8003aba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003abc:	e00d      	b.n	8003ada <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003abe:	f7fe fc55 	bl	800236c <HAL_RCC_GetSysClockFreq>
 8003ac2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ac4:	e009      	b.n	8003ada <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ac6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003aca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003acc:	e005      	b.n	8003ada <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003ad8:	bf00      	nop
    }

    if (pclk != 0U)
 8003ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d028      	beq.n	8003b32 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae4:	4a10      	ldr	r2, [pc, #64]	@ (8003b28 <UART_SetConfig+0x5c4>)
 8003ae6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003aea:	461a      	mov	r2, r3
 8003aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aee:	fbb3 f2f2 	udiv	r2, r3, r2
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	085b      	lsrs	r3, r3, #1
 8003af8:	441a      	add	r2, r3
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b02:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	2b0f      	cmp	r3, #15
 8003b08:	d910      	bls.n	8003b2c <UART_SetConfig+0x5c8>
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b10:	d20c      	bcs.n	8003b2c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	60da      	str	r2, [r3, #12]
 8003b1c:	e009      	b.n	8003b32 <UART_SetConfig+0x5ce>
 8003b1e:	bf00      	nop
 8003b20:	40008000 	.word	0x40008000
 8003b24:	00f42400 	.word	0x00f42400
 8003b28:	0800d73c 	.word	0x0800d73c
      }
      else
      {
        ret = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2200      	movs	r2, #0
 8003b46:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003b4e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3730      	adds	r7, #48	@ 0x30
 8003b56:	46bd      	mov	sp, r7
 8003b58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003b5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b68:	f003 0308 	and.w	r3, r3, #8
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00a      	beq.n	8003ba8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00a      	beq.n	8003bca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf0:	f003 0310 	and.w	r3, r3, #16
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00a      	beq.n	8003c0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c12:	f003 0320 	and.w	r3, r3, #32
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d01a      	beq.n	8003c72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c5a:	d10a      	bne.n	8003c72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	605a      	str	r2, [r3, #4]
  }
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b098      	sub	sp, #96	@ 0x60
 8003ca4:	af02      	add	r7, sp, #8
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cb0:	f7fd fb22 	bl	80012f8 <HAL_GetTick>
 8003cb4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d12f      	bne.n	8003d24 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cc4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f88e 	bl	8003df4 <UART_WaitOnFlagUntilTimeout>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d022      	beq.n	8003d24 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ce6:	e853 3f00 	ldrex	r3, [r3]
 8003cea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cf2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cfe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d04:	e841 2300 	strex	r3, r2, [r1]
 8003d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1e6      	bne.n	8003cde <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e063      	b.n	8003dec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0304 	and.w	r3, r3, #4
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d149      	bne.n	8003dc6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d32:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f857 	bl	8003df4 <UART_WaitOnFlagUntilTimeout>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d03c      	beq.n	8003dc6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d54:	e853 3f00 	ldrex	r3, [r3]
 8003d58:	623b      	str	r3, [r7, #32]
   return(result);
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	461a      	mov	r2, r3
 8003d68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d72:	e841 2300 	strex	r3, r2, [r1]
 8003d76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1e6      	bne.n	8003d4c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3308      	adds	r3, #8
 8003d84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	e853 3f00 	ldrex	r3, [r3]
 8003d8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f023 0301 	bic.w	r3, r3, #1
 8003d94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	3308      	adds	r3, #8
 8003d9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d9e:	61fa      	str	r2, [r7, #28]
 8003da0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da2:	69b9      	ldr	r1, [r7, #24]
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	e841 2300 	strex	r3, r2, [r1]
 8003daa:	617b      	str	r3, [r7, #20]
   return(result);
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1e5      	bne.n	8003d7e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e012      	b.n	8003dec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3758      	adds	r7, #88	@ 0x58
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	603b      	str	r3, [r7, #0]
 8003e00:	4613      	mov	r3, r2
 8003e02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e04:	e04f      	b.n	8003ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0c:	d04b      	beq.n	8003ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e0e:	f7fd fa73 	bl	80012f8 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d302      	bcc.n	8003e24 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e04e      	b.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0304 	and.w	r3, r3, #4
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d037      	beq.n	8003ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b80      	cmp	r3, #128	@ 0x80
 8003e3a:	d034      	beq.n	8003ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2b40      	cmp	r3, #64	@ 0x40
 8003e40:	d031      	beq.n	8003ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	f003 0308 	and.w	r3, r3, #8
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d110      	bne.n	8003e72 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2208      	movs	r2, #8
 8003e56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 f838 	bl	8003ece <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2208      	movs	r2, #8
 8003e62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e029      	b.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e80:	d111      	bne.n	8003ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 f81e 	bl	8003ece <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2220      	movs	r2, #32
 8003e96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e00f      	b.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	69da      	ldr	r2, [r3, #28]
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	bf0c      	ite	eq
 8003eb6:	2301      	moveq	r3, #1
 8003eb8:	2300      	movne	r3, #0
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	79fb      	ldrb	r3, [r7, #7]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d0a0      	beq.n	8003e06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b095      	sub	sp, #84	@ 0x54
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ede:	e853 3f00 	ldrex	r3, [r3]
 8003ee2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ef4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ef6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003efa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003efc:	e841 2300 	strex	r3, r2, [r1]
 8003f00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1e6      	bne.n	8003ed6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3308      	adds	r3, #8
 8003f0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	e853 3f00 	ldrex	r3, [r3]
 8003f16:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f1e:	f023 0301 	bic.w	r3, r3, #1
 8003f22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3308      	adds	r3, #8
 8003f2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f34:	e841 2300 	strex	r3, r2, [r1]
 8003f38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1e3      	bne.n	8003f08 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d118      	bne.n	8003f7a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	e853 3f00 	ldrex	r3, [r3]
 8003f54:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	f023 0310 	bic.w	r3, r3, #16
 8003f5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f66:	61bb      	str	r3, [r7, #24]
 8003f68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6a:	6979      	ldr	r1, [r7, #20]
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	e841 2300 	strex	r3, r2, [r1]
 8003f72:	613b      	str	r3, [r7, #16]
   return(result);
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1e6      	bne.n	8003f48 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003f8e:	bf00      	nop
 8003f90:	3754      	adds	r7, #84	@ 0x54
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
	...

08003f9c <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8003fa0:	4907      	ldr	r1, [pc, #28]	@ (8003fc0 <MX_FATFS_Init+0x24>)
 8003fa2:	4808      	ldr	r0, [pc, #32]	@ (8003fc4 <MX_FATFS_Init+0x28>)
 8003fa4:	f004 f9d2 	bl	800834c <FATFS_LinkDriver>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8003fae:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb2:	e003      	b.n	8003fbc <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8003fb4:	4b04      	ldr	r3, [pc, #16]	@ (8003fc8 <MX_FATFS_Init+0x2c>)
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 8003fba:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	2000137c 	.word	0x2000137c
 8003fc4:	20000024 	.word	0x20000024
 8003fc8:	20001380 	.word	0x20001380

08003fcc <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003fd0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	2110      	movs	r1, #16
 8003fe4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fe8:	f7fd fca6 	bl	8001938 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003fec:	2001      	movs	r0, #1
 8003fee:	f7fd f98f 	bl	8001310 <HAL_Delay>
}
 8003ff2:	bf00      	nop
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	2110      	movs	r1, #16
 8003ffe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004002:	f7fd fc99 	bl	8001938 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004006:	2001      	movs	r0, #1
 8004008:	f7fd f982 	bl	8001310 <HAL_Delay>
}
 800400c:	bf00      	nop
 800400e:	bd80      	pop	{r7, pc}

08004010 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	4603      	mov	r3, r0
 8004018:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800401a:	bf00      	nop
 800401c:	4b08      	ldr	r3, [pc, #32]	@ (8004040 <SPI_TxByte+0x30>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b02      	cmp	r3, #2
 8004028:	d1f8      	bne.n	800401c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800402a:	1df9      	adds	r1, r7, #7
 800402c:	2364      	movs	r3, #100	@ 0x64
 800402e:	2201      	movs	r2, #1
 8004030:	4803      	ldr	r0, [pc, #12]	@ (8004040 <SPI_TxByte+0x30>)
 8004032:	f7fe fb26 	bl	8002682 <HAL_SPI_Transmit>
}
 8004036:	bf00      	nop
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	2000016c 	.word	0x2000016c

08004044 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8004050:	bf00      	nop
 8004052:	4b08      	ldr	r3, [pc, #32]	@ (8004074 <SPI_TxBuffer+0x30>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b02      	cmp	r3, #2
 800405e:	d1f8      	bne.n	8004052 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8004060:	887a      	ldrh	r2, [r7, #2]
 8004062:	2364      	movs	r3, #100	@ 0x64
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	4803      	ldr	r0, [pc, #12]	@ (8004074 <SPI_TxBuffer+0x30>)
 8004068:	f7fe fb0b 	bl	8002682 <HAL_SPI_Transmit>
}
 800406c:	bf00      	nop
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	2000016c 	.word	0x2000016c

08004078 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800407e:	23ff      	movs	r3, #255	@ 0xff
 8004080:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8004082:	bf00      	nop
 8004084:	4b09      	ldr	r3, [pc, #36]	@ (80040ac <SPI_RxByte+0x34>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b02      	cmp	r3, #2
 8004090:	d1f8      	bne.n	8004084 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8004092:	1dba      	adds	r2, r7, #6
 8004094:	1df9      	adds	r1, r7, #7
 8004096:	2364      	movs	r3, #100	@ 0x64
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	2301      	movs	r3, #1
 800409c:	4803      	ldr	r0, [pc, #12]	@ (80040ac <SPI_RxByte+0x34>)
 800409e:	f7fe fd9e 	bl	8002bde <HAL_SPI_TransmitReceive>

	return data;
 80040a2:	79bb      	ldrb	r3, [r7, #6]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	2000016c 	.word	0x2000016c

080040b0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80040b8:	f7ff ffde 	bl	8004078 <SPI_RxByte>
 80040bc:	4603      	mov	r3, r0
 80040be:	461a      	mov	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	701a      	strb	r2, [r3, #0]
}
 80040c4:	bf00      	nop
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80040d2:	4b0a      	ldr	r3, [pc, #40]	@ (80040fc <SD_ReadyWait+0x30>)
 80040d4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80040d8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80040da:	f7ff ffcd 	bl	8004078 <SPI_RxByte>
 80040de:	4603      	mov	r3, r0
 80040e0:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80040e2:	79fb      	ldrb	r3, [r7, #7]
 80040e4:	2bff      	cmp	r3, #255	@ 0xff
 80040e6:	d003      	beq.n	80040f0 <SD_ReadyWait+0x24>
 80040e8:	4b04      	ldr	r3, [pc, #16]	@ (80040fc <SD_ReadyWait+0x30>)
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1f4      	bne.n	80040da <SD_ReadyWait+0xe>

	return res;
 80040f0:	79fb      	ldrb	r3, [r7, #7]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	20001384 	.word	0x20001384

08004100 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8004106:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800410a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800410c:	f7ff ff73 	bl	8003ff6 <DESELECT>
	for(int i = 0; i < 10; i++)
 8004110:	2300      	movs	r3, #0
 8004112:	60bb      	str	r3, [r7, #8]
 8004114:	e005      	b.n	8004122 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8004116:	20ff      	movs	r0, #255	@ 0xff
 8004118:	f7ff ff7a 	bl	8004010 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	3301      	adds	r3, #1
 8004120:	60bb      	str	r3, [r7, #8]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	2b09      	cmp	r3, #9
 8004126:	ddf6      	ble.n	8004116 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8004128:	f7ff ff58 	bl	8003fdc <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800412c:	2340      	movs	r3, #64	@ 0x40
 800412e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8004130:	2300      	movs	r3, #0
 8004132:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8004134:	2300      	movs	r3, #0
 8004136:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8004138:	2300      	movs	r3, #0
 800413a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800413c:	2300      	movs	r3, #0
 800413e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8004140:	2395      	movs	r3, #149	@ 0x95
 8004142:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8004144:	463b      	mov	r3, r7
 8004146:	2106      	movs	r1, #6
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff ff7b 	bl	8004044 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800414e:	e002      	b.n	8004156 <SD_PowerOn+0x56>
	{
		cnt--;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	3b01      	subs	r3, #1
 8004154:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8004156:	f7ff ff8f 	bl	8004078 <SPI_RxByte>
 800415a:	4603      	mov	r3, r0
 800415c:	2b01      	cmp	r3, #1
 800415e:	d002      	beq.n	8004166 <SD_PowerOn+0x66>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1f4      	bne.n	8004150 <SD_PowerOn+0x50>
	}

	DESELECT();
 8004166:	f7ff ff46 	bl	8003ff6 <DESELECT>
	SPI_TxByte(0XFF);
 800416a:	20ff      	movs	r0, #255	@ 0xff
 800416c:	f7ff ff50 	bl	8004010 <SPI_TxByte>

	PowerFlag = 1;
 8004170:	4b03      	ldr	r3, [pc, #12]	@ (8004180 <SD_PowerOn+0x80>)
 8004172:	2201      	movs	r2, #1
 8004174:	701a      	strb	r2, [r3, #0]
}
 8004176:	bf00      	nop
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20001387 	.word	0x20001387

08004184 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8004188:	4b03      	ldr	r3, [pc, #12]	@ (8004198 <SD_PowerOff+0x14>)
 800418a:	2200      	movs	r2, #0
 800418c:	701a      	strb	r2, [r3, #0]
}
 800418e:	bf00      	nop
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	20001387 	.word	0x20001387

0800419c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
	return PowerFlag;
 80041a0:	4b03      	ldr	r3, [pc, #12]	@ (80041b0 <SD_CheckPower+0x14>)
 80041a2:	781b      	ldrb	r3, [r3, #0]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	20001387 	.word	0x20001387

080041b4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80041be:	4b13      	ldr	r3, [pc, #76]	@ (800420c <SD_RxDataBlock+0x58>)
 80041c0:	22c8      	movs	r2, #200	@ 0xc8
 80041c2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80041c4:	f7ff ff58 	bl	8004078 <SPI_RxByte>
 80041c8:	4603      	mov	r3, r0
 80041ca:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
 80041ce:	2bff      	cmp	r3, #255	@ 0xff
 80041d0:	d103      	bne.n	80041da <SD_RxDataBlock+0x26>
 80041d2:	4b0e      	ldr	r3, [pc, #56]	@ (800420c <SD_RxDataBlock+0x58>)
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1f4      	bne.n	80041c4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80041da:	7bfb      	ldrb	r3, [r7, #15]
 80041dc:	2bfe      	cmp	r3, #254	@ 0xfe
 80041de:	d001      	beq.n	80041e4 <SD_RxDataBlock+0x30>
 80041e0:	2300      	movs	r3, #0
 80041e2:	e00f      	b.n	8004204 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	607a      	str	r2, [r7, #4]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff ff60 	bl	80040b0 <SPI_RxBytePtr>
	} while(len--);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	1e5a      	subs	r2, r3, #1
 80041f4:	603a      	str	r2, [r7, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1f4      	bne.n	80041e4 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80041fa:	f7ff ff3d 	bl	8004078 <SPI_RxByte>
	SPI_RxByte();
 80041fe:	f7ff ff3b 	bl	8004078 <SPI_RxByte>

	return TRUE;
 8004202:	2301      	movs	r3, #1
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	20001382 	.word	0x20001382

08004210 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	460b      	mov	r3, r1
 800421a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800421c:	2300      	movs	r3, #0
 800421e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8004220:	f7ff ff54 	bl	80040cc <SD_ReadyWait>
 8004224:	4603      	mov	r3, r0
 8004226:	2bff      	cmp	r3, #255	@ 0xff
 8004228:	d001      	beq.n	800422e <SD_TxDataBlock+0x1e>
 800422a:	2300      	movs	r3, #0
 800422c:	e02f      	b.n	800428e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800422e:	78fb      	ldrb	r3, [r7, #3]
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff feed 	bl	8004010 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8004236:	78fb      	ldrb	r3, [r7, #3]
 8004238:	2bfd      	cmp	r3, #253	@ 0xfd
 800423a:	d020      	beq.n	800427e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800423c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7ff feff 	bl	8004044 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8004246:	f7ff ff17 	bl	8004078 <SPI_RxByte>
		SPI_RxByte();
 800424a:	f7ff ff15 	bl	8004078 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800424e:	e00b      	b.n	8004268 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8004250:	f7ff ff12 	bl	8004078 <SPI_RxByte>
 8004254:	4603      	mov	r3, r0
 8004256:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8004258:	7bfb      	ldrb	r3, [r7, #15]
 800425a:	f003 031f 	and.w	r3, r3, #31
 800425e:	2b05      	cmp	r3, #5
 8004260:	d006      	beq.n	8004270 <SD_TxDataBlock+0x60>
			i++;
 8004262:	7bbb      	ldrb	r3, [r7, #14]
 8004264:	3301      	adds	r3, #1
 8004266:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8004268:	7bbb      	ldrb	r3, [r7, #14]
 800426a:	2b40      	cmp	r3, #64	@ 0x40
 800426c:	d9f0      	bls.n	8004250 <SD_TxDataBlock+0x40>
 800426e:	e000      	b.n	8004272 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8004270:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8004272:	bf00      	nop
 8004274:	f7ff ff00 	bl	8004078 <SPI_RxByte>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0fa      	beq.n	8004274 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800427e:	7bfb      	ldrb	r3, [r7, #15]
 8004280:	f003 031f 	and.w	r3, r3, #31
 8004284:	2b05      	cmp	r3, #5
 8004286:	d101      	bne.n	800428c <SD_TxDataBlock+0x7c>
 8004288:	2301      	movs	r3, #1
 800428a:	e000      	b.n	800428e <SD_TxDataBlock+0x7e>

	return FALSE;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b084      	sub	sp, #16
 800429a:	af00      	add	r7, sp, #0
 800429c:	4603      	mov	r3, r0
 800429e:	6039      	str	r1, [r7, #0]
 80042a0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80042a2:	f7ff ff13 	bl	80040cc <SD_ReadyWait>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2bff      	cmp	r3, #255	@ 0xff
 80042aa:	d001      	beq.n	80042b0 <SD_SendCmd+0x1a>
 80042ac:	23ff      	movs	r3, #255	@ 0xff
 80042ae:	e042      	b.n	8004336 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80042b0:	79fb      	ldrb	r3, [r7, #7]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff feac 	bl	8004010 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	0e1b      	lsrs	r3, r3, #24
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	4618      	mov	r0, r3
 80042c0:	f7ff fea6 	bl	8004010 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	0c1b      	lsrs	r3, r3, #16
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff fea0 	bl	8004010 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	0a1b      	lsrs	r3, r3, #8
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7ff fe9a 	bl	8004010 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff fe95 	bl	8004010 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80042e6:	79fb      	ldrb	r3, [r7, #7]
 80042e8:	2b40      	cmp	r3, #64	@ 0x40
 80042ea:	d102      	bne.n	80042f2 <SD_SendCmd+0x5c>
 80042ec:	2395      	movs	r3, #149	@ 0x95
 80042ee:	73fb      	strb	r3, [r7, #15]
 80042f0:	e007      	b.n	8004302 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80042f2:	79fb      	ldrb	r3, [r7, #7]
 80042f4:	2b48      	cmp	r3, #72	@ 0x48
 80042f6:	d102      	bne.n	80042fe <SD_SendCmd+0x68>
 80042f8:	2387      	movs	r3, #135	@ 0x87
 80042fa:	73fb      	strb	r3, [r7, #15]
 80042fc:	e001      	b.n	8004302 <SD_SendCmd+0x6c>
	else crc = 1;
 80042fe:	2301      	movs	r3, #1
 8004300:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8004302:	7bfb      	ldrb	r3, [r7, #15]
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff fe83 	bl	8004010 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800430a:	79fb      	ldrb	r3, [r7, #7]
 800430c:	2b4c      	cmp	r3, #76	@ 0x4c
 800430e:	d101      	bne.n	8004314 <SD_SendCmd+0x7e>
 8004310:	f7ff feb2 	bl	8004078 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8004314:	230a      	movs	r3, #10
 8004316:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8004318:	f7ff feae 	bl	8004078 <SPI_RxByte>
 800431c:	4603      	mov	r3, r0
 800431e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8004320:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004324:	2b00      	cmp	r3, #0
 8004326:	da05      	bge.n	8004334 <SD_SendCmd+0x9e>
 8004328:	7bbb      	ldrb	r3, [r7, #14]
 800432a:	3b01      	subs	r3, #1
 800432c:	73bb      	strb	r3, [r7, #14]
 800432e:	7bbb      	ldrb	r3, [r7, #14]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1f1      	bne.n	8004318 <SD_SendCmd+0x82>

	return res;
 8004334:	7b7b      	ldrb	r3, [r7, #13]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
	...

08004340 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8004340:	b590      	push	{r4, r7, lr}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	4603      	mov	r3, r0
 8004348:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800434a:	79fb      	ldrb	r3, [r7, #7]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <SD_disk_initialize+0x14>
 8004350:	2301      	movs	r3, #1
 8004352:	e0d1      	b.n	80044f8 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8004354:	4b6a      	ldr	r3, [pc, #424]	@ (8004500 <SD_disk_initialize+0x1c0>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	b2db      	uxtb	r3, r3
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <SD_disk_initialize+0x2a>
 8004362:	4b67      	ldr	r3, [pc, #412]	@ (8004500 <SD_disk_initialize+0x1c0>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	b2db      	uxtb	r3, r3
 8004368:	e0c6      	b.n	80044f8 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800436a:	f7ff fec9 	bl	8004100 <SD_PowerOn>

	/* slave select */
	SELECT();
 800436e:	f7ff fe35 	bl	8003fdc <SELECT>

	/* check disk type */
	type = 0;
 8004372:	2300      	movs	r3, #0
 8004374:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8004376:	2100      	movs	r1, #0
 8004378:	2040      	movs	r0, #64	@ 0x40
 800437a:	f7ff ff8c 	bl	8004296 <SD_SendCmd>
 800437e:	4603      	mov	r3, r0
 8004380:	2b01      	cmp	r3, #1
 8004382:	f040 80a1 	bne.w	80044c8 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8004386:	4b5f      	ldr	r3, [pc, #380]	@ (8004504 <SD_disk_initialize+0x1c4>)
 8004388:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800438c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800438e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8004392:	2048      	movs	r0, #72	@ 0x48
 8004394:	f7ff ff7f 	bl	8004296 <SD_SendCmd>
 8004398:	4603      	mov	r3, r0
 800439a:	2b01      	cmp	r3, #1
 800439c:	d155      	bne.n	800444a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800439e:	2300      	movs	r3, #0
 80043a0:	73fb      	strb	r3, [r7, #15]
 80043a2:	e00c      	b.n	80043be <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80043a4:	7bfc      	ldrb	r4, [r7, #15]
 80043a6:	f7ff fe67 	bl	8004078 <SPI_RxByte>
 80043aa:	4603      	mov	r3, r0
 80043ac:	461a      	mov	r2, r3
 80043ae:	f104 0310 	add.w	r3, r4, #16
 80043b2:	443b      	add	r3, r7
 80043b4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
 80043ba:	3301      	adds	r3, #1
 80043bc:	73fb      	strb	r3, [r7, #15]
 80043be:	7bfb      	ldrb	r3, [r7, #15]
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d9ef      	bls.n	80043a4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80043c4:	7abb      	ldrb	r3, [r7, #10]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d17e      	bne.n	80044c8 <SD_disk_initialize+0x188>
 80043ca:	7afb      	ldrb	r3, [r7, #11]
 80043cc:	2baa      	cmp	r3, #170	@ 0xaa
 80043ce:	d17b      	bne.n	80044c8 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80043d0:	2100      	movs	r1, #0
 80043d2:	2077      	movs	r0, #119	@ 0x77
 80043d4:	f7ff ff5f 	bl	8004296 <SD_SendCmd>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d807      	bhi.n	80043ee <SD_disk_initialize+0xae>
 80043de:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80043e2:	2069      	movs	r0, #105	@ 0x69
 80043e4:	f7ff ff57 	bl	8004296 <SD_SendCmd>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d004      	beq.n	80043f8 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80043ee:	4b45      	ldr	r3, [pc, #276]	@ (8004504 <SD_disk_initialize+0x1c4>)
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1ec      	bne.n	80043d0 <SD_disk_initialize+0x90>
 80043f6:	e000      	b.n	80043fa <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80043f8:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80043fa:	4b42      	ldr	r3, [pc, #264]	@ (8004504 <SD_disk_initialize+0x1c4>)
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d062      	beq.n	80044c8 <SD_disk_initialize+0x188>
 8004402:	2100      	movs	r1, #0
 8004404:	207a      	movs	r0, #122	@ 0x7a
 8004406:	f7ff ff46 	bl	8004296 <SD_SendCmd>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d15b      	bne.n	80044c8 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8004410:	2300      	movs	r3, #0
 8004412:	73fb      	strb	r3, [r7, #15]
 8004414:	e00c      	b.n	8004430 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8004416:	7bfc      	ldrb	r4, [r7, #15]
 8004418:	f7ff fe2e 	bl	8004078 <SPI_RxByte>
 800441c:	4603      	mov	r3, r0
 800441e:	461a      	mov	r2, r3
 8004420:	f104 0310 	add.w	r3, r4, #16
 8004424:	443b      	add	r3, r7
 8004426:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800442a:	7bfb      	ldrb	r3, [r7, #15]
 800442c:	3301      	adds	r3, #1
 800442e:	73fb      	strb	r3, [r7, #15]
 8004430:	7bfb      	ldrb	r3, [r7, #15]
 8004432:	2b03      	cmp	r3, #3
 8004434:	d9ef      	bls.n	8004416 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8004436:	7a3b      	ldrb	r3, [r7, #8]
 8004438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <SD_disk_initialize+0x104>
 8004440:	230c      	movs	r3, #12
 8004442:	e000      	b.n	8004446 <SD_disk_initialize+0x106>
 8004444:	2304      	movs	r3, #4
 8004446:	73bb      	strb	r3, [r7, #14]
 8004448:	e03e      	b.n	80044c8 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800444a:	2100      	movs	r1, #0
 800444c:	2077      	movs	r0, #119	@ 0x77
 800444e:	f7ff ff22 	bl	8004296 <SD_SendCmd>
 8004452:	4603      	mov	r3, r0
 8004454:	2b01      	cmp	r3, #1
 8004456:	d808      	bhi.n	800446a <SD_disk_initialize+0x12a>
 8004458:	2100      	movs	r1, #0
 800445a:	2069      	movs	r0, #105	@ 0x69
 800445c:	f7ff ff1b 	bl	8004296 <SD_SendCmd>
 8004460:	4603      	mov	r3, r0
 8004462:	2b01      	cmp	r3, #1
 8004464:	d801      	bhi.n	800446a <SD_disk_initialize+0x12a>
 8004466:	2302      	movs	r3, #2
 8004468:	e000      	b.n	800446c <SD_disk_initialize+0x12c>
 800446a:	2301      	movs	r3, #1
 800446c:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800446e:	7bbb      	ldrb	r3, [r7, #14]
 8004470:	2b02      	cmp	r3, #2
 8004472:	d10e      	bne.n	8004492 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8004474:	2100      	movs	r1, #0
 8004476:	2077      	movs	r0, #119	@ 0x77
 8004478:	f7ff ff0d 	bl	8004296 <SD_SendCmd>
 800447c:	4603      	mov	r3, r0
 800447e:	2b01      	cmp	r3, #1
 8004480:	d80e      	bhi.n	80044a0 <SD_disk_initialize+0x160>
 8004482:	2100      	movs	r1, #0
 8004484:	2069      	movs	r0, #105	@ 0x69
 8004486:	f7ff ff06 	bl	8004296 <SD_SendCmd>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d107      	bne.n	80044a0 <SD_disk_initialize+0x160>
 8004490:	e00c      	b.n	80044ac <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8004492:	2100      	movs	r1, #0
 8004494:	2041      	movs	r0, #65	@ 0x41
 8004496:	f7ff fefe 	bl	8004296 <SD_SendCmd>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d004      	beq.n	80044aa <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80044a0:	4b18      	ldr	r3, [pc, #96]	@ (8004504 <SD_disk_initialize+0x1c4>)
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e2      	bne.n	800446e <SD_disk_initialize+0x12e>
 80044a8:	e000      	b.n	80044ac <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80044aa:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80044ac:	4b15      	ldr	r3, [pc, #84]	@ (8004504 <SD_disk_initialize+0x1c4>)
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d007      	beq.n	80044c4 <SD_disk_initialize+0x184>
 80044b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80044b8:	2050      	movs	r0, #80	@ 0x50
 80044ba:	f7ff feec 	bl	8004296 <SD_SendCmd>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <SD_disk_initialize+0x188>
 80044c4:	2300      	movs	r3, #0
 80044c6:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80044c8:	4a0f      	ldr	r2, [pc, #60]	@ (8004508 <SD_disk_initialize+0x1c8>)
 80044ca:	7bbb      	ldrb	r3, [r7, #14]
 80044cc:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80044ce:	f7ff fd92 	bl	8003ff6 <DESELECT>
	SPI_RxByte();
 80044d2:	f7ff fdd1 	bl	8004078 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80044d6:	7bbb      	ldrb	r3, [r7, #14]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d008      	beq.n	80044ee <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80044dc:	4b08      	ldr	r3, [pc, #32]	@ (8004500 <SD_disk_initialize+0x1c0>)
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	f023 0301 	bic.w	r3, r3, #1
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	4b05      	ldr	r3, [pc, #20]	@ (8004500 <SD_disk_initialize+0x1c0>)
 80044ea:	701a      	strb	r2, [r3, #0]
 80044ec:	e001      	b.n	80044f2 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80044ee:	f7ff fe49 	bl	8004184 <SD_PowerOff>
	}

	return Stat;
 80044f2:	4b03      	ldr	r3, [pc, #12]	@ (8004500 <SD_disk_initialize+0x1c0>)
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	b2db      	uxtb	r3, r3
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd90      	pop	{r4, r7, pc}
 8004500:	20000020 	.word	0x20000020
 8004504:	20001382 	.word	0x20001382
 8004508:	20001386 	.word	0x20001386

0800450c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	4603      	mov	r3, r0
 8004514:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8004516:	79fb      	ldrb	r3, [r7, #7]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <SD_disk_status+0x14>
 800451c:	2301      	movs	r3, #1
 800451e:	e002      	b.n	8004526 <SD_disk_status+0x1a>
	return Stat;
 8004520:	4b04      	ldr	r3, [pc, #16]	@ (8004534 <SD_disk_status+0x28>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	b2db      	uxtb	r3, r3
}
 8004526:	4618      	mov	r0, r3
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	20000020 	.word	0x20000020

08004538 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	60b9      	str	r1, [r7, #8]
 8004540:	607a      	str	r2, [r7, #4]
 8004542:	603b      	str	r3, [r7, #0]
 8004544:	4603      	mov	r3, r0
 8004546:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8004548:	7bfb      	ldrb	r3, [r7, #15]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d102      	bne.n	8004554 <SD_disk_read+0x1c>
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <SD_disk_read+0x20>
 8004554:	2304      	movs	r3, #4
 8004556:	e051      	b.n	80045fc <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004558:	4b2a      	ldr	r3, [pc, #168]	@ (8004604 <SD_disk_read+0xcc>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	b2db      	uxtb	r3, r3
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <SD_disk_read+0x32>
 8004566:	2303      	movs	r3, #3
 8004568:	e048      	b.n	80045fc <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800456a:	4b27      	ldr	r3, [pc, #156]	@ (8004608 <SD_disk_read+0xd0>)
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	f003 0304 	and.w	r3, r3, #4
 8004572:	2b00      	cmp	r3, #0
 8004574:	d102      	bne.n	800457c <SD_disk_read+0x44>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	025b      	lsls	r3, r3, #9
 800457a:	607b      	str	r3, [r7, #4]

	SELECT();
 800457c:	f7ff fd2e 	bl	8003fdc <SELECT>

	if (count == 1)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d111      	bne.n	80045aa <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	2051      	movs	r0, #81	@ 0x51
 800458a:	f7ff fe84 	bl	8004296 <SD_SendCmd>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d129      	bne.n	80045e8 <SD_disk_read+0xb0>
 8004594:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004598:	68b8      	ldr	r0, [r7, #8]
 800459a:	f7ff fe0b 	bl	80041b4 <SD_RxDataBlock>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d021      	beq.n	80045e8 <SD_disk_read+0xb0>
 80045a4:	2300      	movs	r3, #0
 80045a6:	603b      	str	r3, [r7, #0]
 80045a8:	e01e      	b.n	80045e8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	2052      	movs	r0, #82	@ 0x52
 80045ae:	f7ff fe72 	bl	8004296 <SD_SendCmd>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d117      	bne.n	80045e8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80045b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80045bc:	68b8      	ldr	r0, [r7, #8]
 80045be:	f7ff fdf9 	bl	80041b4 <SD_RxDataBlock>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00a      	beq.n	80045de <SD_disk_read+0xa6>
				buff += 512;
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80045ce:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	603b      	str	r3, [r7, #0]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1ed      	bne.n	80045b8 <SD_disk_read+0x80>
 80045dc:	e000      	b.n	80045e0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80045de:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80045e0:	2100      	movs	r1, #0
 80045e2:	204c      	movs	r0, #76	@ 0x4c
 80045e4:	f7ff fe57 	bl	8004296 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80045e8:	f7ff fd05 	bl	8003ff6 <DESELECT>
	SPI_RxByte();
 80045ec:	f7ff fd44 	bl	8004078 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	bf14      	ite	ne
 80045f6:	2301      	movne	r3, #1
 80045f8:	2300      	moveq	r3, #0
 80045fa:	b2db      	uxtb	r3, r3
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	20000020 	.word	0x20000020
 8004608:	20001386 	.word	0x20001386

0800460c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	60b9      	str	r1, [r7, #8]
 8004614:	607a      	str	r2, [r7, #4]
 8004616:	603b      	str	r3, [r7, #0]
 8004618:	4603      	mov	r3, r0
 800461a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800461c:	7bfb      	ldrb	r3, [r7, #15]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d102      	bne.n	8004628 <SD_disk_write+0x1c>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <SD_disk_write+0x20>
 8004628:	2304      	movs	r3, #4
 800462a:	e06b      	b.n	8004704 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800462c:	4b37      	ldr	r3, [pc, #220]	@ (800470c <SD_disk_write+0x100>)
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	b2db      	uxtb	r3, r3
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <SD_disk_write+0x32>
 800463a:	2303      	movs	r3, #3
 800463c:	e062      	b.n	8004704 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800463e:	4b33      	ldr	r3, [pc, #204]	@ (800470c <SD_disk_write+0x100>)
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	b2db      	uxtb	r3, r3
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <SD_disk_write+0x44>
 800464c:	2302      	movs	r3, #2
 800464e:	e059      	b.n	8004704 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8004650:	4b2f      	ldr	r3, [pc, #188]	@ (8004710 <SD_disk_write+0x104>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b00      	cmp	r3, #0
 800465a:	d102      	bne.n	8004662 <SD_disk_write+0x56>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	025b      	lsls	r3, r3, #9
 8004660:	607b      	str	r3, [r7, #4]

	SELECT();
 8004662:	f7ff fcbb 	bl	8003fdc <SELECT>

	if (count == 1)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d110      	bne.n	800468e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800466c:	6879      	ldr	r1, [r7, #4]
 800466e:	2058      	movs	r0, #88	@ 0x58
 8004670:	f7ff fe11 	bl	8004296 <SD_SendCmd>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d13a      	bne.n	80046f0 <SD_disk_write+0xe4>
 800467a:	21fe      	movs	r1, #254	@ 0xfe
 800467c:	68b8      	ldr	r0, [r7, #8]
 800467e:	f7ff fdc7 	bl	8004210 <SD_TxDataBlock>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d033      	beq.n	80046f0 <SD_disk_write+0xe4>
			count = 0;
 8004688:	2300      	movs	r3, #0
 800468a:	603b      	str	r3, [r7, #0]
 800468c:	e030      	b.n	80046f0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800468e:	4b20      	ldr	r3, [pc, #128]	@ (8004710 <SD_disk_write+0x104>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d007      	beq.n	80046aa <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800469a:	2100      	movs	r1, #0
 800469c:	2077      	movs	r0, #119	@ 0x77
 800469e:	f7ff fdfa 	bl	8004296 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80046a2:	6839      	ldr	r1, [r7, #0]
 80046a4:	2057      	movs	r0, #87	@ 0x57
 80046a6:	f7ff fdf6 	bl	8004296 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80046aa:	6879      	ldr	r1, [r7, #4]
 80046ac:	2059      	movs	r0, #89	@ 0x59
 80046ae:	f7ff fdf2 	bl	8004296 <SD_SendCmd>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d11b      	bne.n	80046f0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80046b8:	21fc      	movs	r1, #252	@ 0xfc
 80046ba:	68b8      	ldr	r0, [r7, #8]
 80046bc:	f7ff fda8 	bl	8004210 <SD_TxDataBlock>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <SD_disk_write+0xd0>
				buff += 512;
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80046cc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	3b01      	subs	r3, #1
 80046d2:	603b      	str	r3, [r7, #0]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1ee      	bne.n	80046b8 <SD_disk_write+0xac>
 80046da:	e000      	b.n	80046de <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80046dc:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80046de:	21fd      	movs	r1, #253	@ 0xfd
 80046e0:	2000      	movs	r0, #0
 80046e2:	f7ff fd95 	bl	8004210 <SD_TxDataBlock>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <SD_disk_write+0xe4>
			{
				count = 1;
 80046ec:	2301      	movs	r3, #1
 80046ee:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80046f0:	f7ff fc81 	bl	8003ff6 <DESELECT>
	SPI_RxByte();
 80046f4:	f7ff fcc0 	bl	8004078 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	bf14      	ite	ne
 80046fe:	2301      	movne	r3, #1
 8004700:	2300      	moveq	r3, #0
 8004702:	b2db      	uxtb	r3, r3
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	20000020 	.word	0x20000020
 8004710:	20001386 	.word	0x20001386

08004714 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8004714:	b590      	push	{r4, r7, lr}
 8004716:	b08b      	sub	sp, #44	@ 0x2c
 8004718:	af00      	add	r7, sp, #0
 800471a:	4603      	mov	r3, r0
 800471c:	603a      	str	r2, [r7, #0]
 800471e:	71fb      	strb	r3, [r7, #7]
 8004720:	460b      	mov	r3, r1
 8004722:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8004728:	79fb      	ldrb	r3, [r7, #7]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <SD_disk_ioctl+0x1e>
 800472e:	2304      	movs	r3, #4
 8004730:	e113      	b.n	800495a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8004738:	79bb      	ldrb	r3, [r7, #6]
 800473a:	2b05      	cmp	r3, #5
 800473c:	d124      	bne.n	8004788 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2b02      	cmp	r3, #2
 8004744:	d012      	beq.n	800476c <SD_disk_ioctl+0x58>
 8004746:	2b02      	cmp	r3, #2
 8004748:	dc1a      	bgt.n	8004780 <SD_disk_ioctl+0x6c>
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <SD_disk_ioctl+0x40>
 800474e:	2b01      	cmp	r3, #1
 8004750:	d006      	beq.n	8004760 <SD_disk_ioctl+0x4c>
 8004752:	e015      	b.n	8004780 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8004754:	f7ff fd16 	bl	8004184 <SD_PowerOff>
			res = RES_OK;
 8004758:	2300      	movs	r3, #0
 800475a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800475e:	e0fa      	b.n	8004956 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8004760:	f7ff fcce 	bl	8004100 <SD_PowerOn>
			res = RES_OK;
 8004764:	2300      	movs	r3, #0
 8004766:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800476a:	e0f4      	b.n	8004956 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	1c5c      	adds	r4, r3, #1
 8004770:	f7ff fd14 	bl	800419c <SD_CheckPower>
 8004774:	4603      	mov	r3, r0
 8004776:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8004778:	2300      	movs	r3, #0
 800477a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800477e:	e0ea      	b.n	8004956 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8004780:	2304      	movs	r3, #4
 8004782:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004786:	e0e6      	b.n	8004956 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004788:	4b76      	ldr	r3, [pc, #472]	@ (8004964 <SD_disk_ioctl+0x250>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	b2db      	uxtb	r3, r3
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <SD_disk_ioctl+0x86>
 8004796:	2303      	movs	r3, #3
 8004798:	e0df      	b.n	800495a <SD_disk_ioctl+0x246>

		SELECT();
 800479a:	f7ff fc1f 	bl	8003fdc <SELECT>

		switch (ctrl)
 800479e:	79bb      	ldrb	r3, [r7, #6]
 80047a0:	2b0d      	cmp	r3, #13
 80047a2:	f200 80c9 	bhi.w	8004938 <SD_disk_ioctl+0x224>
 80047a6:	a201      	add	r2, pc, #4	@ (adr r2, 80047ac <SD_disk_ioctl+0x98>)
 80047a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ac:	080048a3 	.word	0x080048a3
 80047b0:	080047e5 	.word	0x080047e5
 80047b4:	08004893 	.word	0x08004893
 80047b8:	08004939 	.word	0x08004939
 80047bc:	08004939 	.word	0x08004939
 80047c0:	08004939 	.word	0x08004939
 80047c4:	08004939 	.word	0x08004939
 80047c8:	08004939 	.word	0x08004939
 80047cc:	08004939 	.word	0x08004939
 80047d0:	08004939 	.word	0x08004939
 80047d4:	08004939 	.word	0x08004939
 80047d8:	080048b5 	.word	0x080048b5
 80047dc:	080048d9 	.word	0x080048d9
 80047e0:	080048fd 	.word	0x080048fd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80047e4:	2100      	movs	r1, #0
 80047e6:	2049      	movs	r0, #73	@ 0x49
 80047e8:	f7ff fd55 	bl	8004296 <SD_SendCmd>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f040 80a6 	bne.w	8004940 <SD_disk_ioctl+0x22c>
 80047f4:	f107 030c 	add.w	r3, r7, #12
 80047f8:	2110      	movs	r1, #16
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff fcda 	bl	80041b4 <SD_RxDataBlock>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 809c 	beq.w	8004940 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8004808:	7b3b      	ldrb	r3, [r7, #12]
 800480a:	099b      	lsrs	r3, r3, #6
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b01      	cmp	r3, #1
 8004810:	d10d      	bne.n	800482e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8004812:	7d7b      	ldrb	r3, [r7, #21]
 8004814:	461a      	mov	r2, r3
 8004816:	7d3b      	ldrb	r3, [r7, #20]
 8004818:	021b      	lsls	r3, r3, #8
 800481a:	b29b      	uxth	r3, r3
 800481c:	4413      	add	r3, r2
 800481e:	b29b      	uxth	r3, r3
 8004820:	3301      	adds	r3, #1
 8004822:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8004824:	8bfb      	ldrh	r3, [r7, #30]
 8004826:	029a      	lsls	r2, r3, #10
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	e02d      	b.n	800488a <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800482e:	7c7b      	ldrb	r3, [r7, #17]
 8004830:	f003 030f 	and.w	r3, r3, #15
 8004834:	b2da      	uxtb	r2, r3
 8004836:	7dbb      	ldrb	r3, [r7, #22]
 8004838:	09db      	lsrs	r3, r3, #7
 800483a:	b2db      	uxtb	r3, r3
 800483c:	4413      	add	r3, r2
 800483e:	b2da      	uxtb	r2, r3
 8004840:	7d7b      	ldrb	r3, [r7, #21]
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	b2db      	uxtb	r3, r3
 8004846:	f003 0306 	and.w	r3, r3, #6
 800484a:	b2db      	uxtb	r3, r3
 800484c:	4413      	add	r3, r2
 800484e:	b2db      	uxtb	r3, r3
 8004850:	3302      	adds	r3, #2
 8004852:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8004856:	7d3b      	ldrb	r3, [r7, #20]
 8004858:	099b      	lsrs	r3, r3, #6
 800485a:	b2db      	uxtb	r3, r3
 800485c:	461a      	mov	r2, r3
 800485e:	7cfb      	ldrb	r3, [r7, #19]
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	b29b      	uxth	r3, r3
 8004864:	4413      	add	r3, r2
 8004866:	b29a      	uxth	r2, r3
 8004868:	7cbb      	ldrb	r3, [r7, #18]
 800486a:	029b      	lsls	r3, r3, #10
 800486c:	b29b      	uxth	r3, r3
 800486e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004872:	b29b      	uxth	r3, r3
 8004874:	4413      	add	r3, r2
 8004876:	b29b      	uxth	r3, r3
 8004878:	3301      	adds	r3, #1
 800487a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800487c:	8bfa      	ldrh	r2, [r7, #30]
 800487e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004882:	3b09      	subs	r3, #9
 8004884:	409a      	lsls	r2, r3
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8004890:	e056      	b.n	8004940 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004898:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80048a0:	e055      	b.n	800494e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80048a2:	f7ff fc13 	bl	80040cc <SD_ReadyWait>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2bff      	cmp	r3, #255	@ 0xff
 80048aa:	d14b      	bne.n	8004944 <SD_disk_ioctl+0x230>
 80048ac:	2300      	movs	r3, #0
 80048ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80048b2:	e047      	b.n	8004944 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80048b4:	2100      	movs	r1, #0
 80048b6:	2049      	movs	r0, #73	@ 0x49
 80048b8:	f7ff fced 	bl	8004296 <SD_SendCmd>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d142      	bne.n	8004948 <SD_disk_ioctl+0x234>
 80048c2:	2110      	movs	r1, #16
 80048c4:	6a38      	ldr	r0, [r7, #32]
 80048c6:	f7ff fc75 	bl	80041b4 <SD_RxDataBlock>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d03b      	beq.n	8004948 <SD_disk_ioctl+0x234>
 80048d0:	2300      	movs	r3, #0
 80048d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80048d6:	e037      	b.n	8004948 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80048d8:	2100      	movs	r1, #0
 80048da:	204a      	movs	r0, #74	@ 0x4a
 80048dc:	f7ff fcdb 	bl	8004296 <SD_SendCmd>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d132      	bne.n	800494c <SD_disk_ioctl+0x238>
 80048e6:	2110      	movs	r1, #16
 80048e8:	6a38      	ldr	r0, [r7, #32]
 80048ea:	f7ff fc63 	bl	80041b4 <SD_RxDataBlock>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d02b      	beq.n	800494c <SD_disk_ioctl+0x238>
 80048f4:	2300      	movs	r3, #0
 80048f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80048fa:	e027      	b.n	800494c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80048fc:	2100      	movs	r1, #0
 80048fe:	207a      	movs	r0, #122	@ 0x7a
 8004900:	f7ff fcc9 	bl	8004296 <SD_SendCmd>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d116      	bne.n	8004938 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 800490a:	2300      	movs	r3, #0
 800490c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004910:	e00b      	b.n	800492a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8004912:	6a3c      	ldr	r4, [r7, #32]
 8004914:	1c63      	adds	r3, r4, #1
 8004916:	623b      	str	r3, [r7, #32]
 8004918:	f7ff fbae 	bl	8004078 <SPI_RxByte>
 800491c:	4603      	mov	r3, r0
 800491e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8004920:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004924:	3301      	adds	r3, #1
 8004926:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800492a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800492e:	2b03      	cmp	r3, #3
 8004930:	d9ef      	bls.n	8004912 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8004932:	2300      	movs	r3, #0
 8004934:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8004938:	2304      	movs	r3, #4
 800493a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800493e:	e006      	b.n	800494e <SD_disk_ioctl+0x23a>
			break;
 8004940:	bf00      	nop
 8004942:	e004      	b.n	800494e <SD_disk_ioctl+0x23a>
			break;
 8004944:	bf00      	nop
 8004946:	e002      	b.n	800494e <SD_disk_ioctl+0x23a>
			break;
 8004948:	bf00      	nop
 800494a:	e000      	b.n	800494e <SD_disk_ioctl+0x23a>
			break;
 800494c:	bf00      	nop
		}

		DESELECT();
 800494e:	f7ff fb52 	bl	8003ff6 <DESELECT>
		SPI_RxByte();
 8004952:	f7ff fb91 	bl	8004078 <SPI_RxByte>
	}

	return res;
 8004956:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800495a:	4618      	mov	r0, r3
 800495c:	372c      	adds	r7, #44	@ 0x2c
 800495e:	46bd      	mov	sp, r7
 8004960:	bd90      	pop	{r4, r7, pc}
 8004962:	bf00      	nop
 8004964:	20000020 	.word	0x20000020

08004968 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	4603      	mov	r3, r0
 8004970:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8004972:	4b06      	ldr	r3, [pc, #24]	@ (800498c <USER_initialize+0x24>)
 8004974:	2201      	movs	r2, #1
 8004976:	701a      	strb	r2, [r3, #0]
    return SD_disk_initialize(pdrv);
 8004978:	79fb      	ldrb	r3, [r7, #7]
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff fce0 	bl	8004340 <SD_disk_initialize>
 8004980:	4603      	mov	r3, r0
 8004982:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004984:	4618      	mov	r0, r3
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	20000021 	.word	0x20000021

08004990 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	4603      	mov	r3, r0
 8004998:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800499a:	4b06      	ldr	r3, [pc, #24]	@ (80049b4 <USER_status+0x24>)
 800499c:	2201      	movs	r2, #1
 800499e:	701a      	strb	r2, [r3, #0]
    return SD_disk_status(pdrv);
 80049a0:	79fb      	ldrb	r3, [r7, #7]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff fdb2 	bl	800450c <SD_disk_status>
 80049a8:	4603      	mov	r3, r0
 80049aa:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	20000021 	.word	0x20000021

080049b8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	607a      	str	r2, [r7, #4]
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	4603      	mov	r3, r0
 80049c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80049c8:	7bf8      	ldrb	r0, [r7, #15]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	68b9      	ldr	r1, [r7, #8]
 80049d0:	f7ff fdb2 	bl	8004538 <SD_disk_read>
 80049d4:	4603      	mov	r3, r0
 80049d6:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60b9      	str	r1, [r7, #8]
 80049e8:	607a      	str	r2, [r7, #4]
 80049ea:	603b      	str	r3, [r7, #0]
 80049ec:	4603      	mov	r3, r0
 80049ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 80049f0:	7bf8      	ldrb	r0, [r7, #15]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	68b9      	ldr	r1, [r7, #8]
 80049f8:	f7ff fe08 	bl	800460c <SD_disk_write>
 80049fc:	4603      	mov	r3, r0
 80049fe:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	4603      	mov	r3, r0
 8004a10:	603a      	str	r2, [r7, #0]
 8004a12:	71fb      	strb	r3, [r7, #7]
 8004a14:	460b      	mov	r3, r1
 8004a16:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	73fb      	strb	r3, [r7, #15]
    return SD_disk_ioctl(pdrv, cmd, buff);
 8004a1c:	79fb      	ldrb	r3, [r7, #7]
 8004a1e:	79b9      	ldrb	r1, [r7, #6]
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff fe76 	bl	8004714 <SD_disk_ioctl>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	4a08      	ldr	r2, [pc, #32]	@ (8004a64 <disk_status+0x30>)
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	79fa      	ldrb	r2, [r7, #7]
 8004a4c:	4905      	ldr	r1, [pc, #20]	@ (8004a64 <disk_status+0x30>)
 8004a4e:	440a      	add	r2, r1
 8004a50:	7a12      	ldrb	r2, [r2, #8]
 8004a52:	4610      	mov	r0, r2
 8004a54:	4798      	blx	r3
 8004a56:	4603      	mov	r3, r0
 8004a58:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	200015b0 	.word	0x200015b0

08004a68 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004a72:	2300      	movs	r3, #0
 8004a74:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004a76:	79fb      	ldrb	r3, [r7, #7]
 8004a78:	4a0d      	ldr	r2, [pc, #52]	@ (8004ab0 <disk_initialize+0x48>)
 8004a7a:	5cd3      	ldrb	r3, [r2, r3]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d111      	bne.n	8004aa4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004a80:	79fb      	ldrb	r3, [r7, #7]
 8004a82:	4a0b      	ldr	r2, [pc, #44]	@ (8004ab0 <disk_initialize+0x48>)
 8004a84:	2101      	movs	r1, #1
 8004a86:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004a88:	79fb      	ldrb	r3, [r7, #7]
 8004a8a:	4a09      	ldr	r2, [pc, #36]	@ (8004ab0 <disk_initialize+0x48>)
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4413      	add	r3, r2
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	79fa      	ldrb	r2, [r7, #7]
 8004a96:	4906      	ldr	r1, [pc, #24]	@ (8004ab0 <disk_initialize+0x48>)
 8004a98:	440a      	add	r2, r1
 8004a9a:	7a12      	ldrb	r2, [r2, #8]
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	4798      	blx	r3
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	200015b0 	.word	0x200015b0

08004ab4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004ab4:	b590      	push	{r4, r7, lr}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60b9      	str	r1, [r7, #8]
 8004abc:	607a      	str	r2, [r7, #4]
 8004abe:	603b      	str	r3, [r7, #0]
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
 8004ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8004af0 <disk_read+0x3c>)
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	689c      	ldr	r4, [r3, #8]
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
 8004ad2:	4a07      	ldr	r2, [pc, #28]	@ (8004af0 <disk_read+0x3c>)
 8004ad4:	4413      	add	r3, r2
 8004ad6:	7a18      	ldrb	r0, [r3, #8]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	47a0      	blx	r4
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	75fb      	strb	r3, [r7, #23]
  return res;
 8004ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	371c      	adds	r7, #28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd90      	pop	{r4, r7, pc}
 8004aee:	bf00      	nop
 8004af0:	200015b0 	.word	0x200015b0

08004af4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004af4:	b590      	push	{r4, r7, lr}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60b9      	str	r1, [r7, #8]
 8004afc:	607a      	str	r2, [r7, #4]
 8004afe:	603b      	str	r3, [r7, #0]
 8004b00:	4603      	mov	r3, r0
 8004b02:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
 8004b06:	4a0a      	ldr	r2, [pc, #40]	@ (8004b30 <disk_write+0x3c>)
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	68dc      	ldr	r4, [r3, #12]
 8004b10:	7bfb      	ldrb	r3, [r7, #15]
 8004b12:	4a07      	ldr	r2, [pc, #28]	@ (8004b30 <disk_write+0x3c>)
 8004b14:	4413      	add	r3, r2
 8004b16:	7a18      	ldrb	r0, [r3, #8]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	68b9      	ldr	r1, [r7, #8]
 8004b1e:	47a0      	blx	r4
 8004b20:	4603      	mov	r3, r0
 8004b22:	75fb      	strb	r3, [r7, #23]
  return res;
 8004b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	371c      	adds	r7, #28
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd90      	pop	{r4, r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	200015b0 	.word	0x200015b0

08004b34 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	603a      	str	r2, [r7, #0]
 8004b3e:	71fb      	strb	r3, [r7, #7]
 8004b40:	460b      	mov	r3, r1
 8004b42:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004b44:	79fb      	ldrb	r3, [r7, #7]
 8004b46:	4a09      	ldr	r2, [pc, #36]	@ (8004b6c <disk_ioctl+0x38>)
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	79fa      	ldrb	r2, [r7, #7]
 8004b52:	4906      	ldr	r1, [pc, #24]	@ (8004b6c <disk_ioctl+0x38>)
 8004b54:	440a      	add	r2, r1
 8004b56:	7a10      	ldrb	r0, [r2, #8]
 8004b58:	79b9      	ldrb	r1, [r7, #6]
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	4798      	blx	r3
 8004b5e:	4603      	mov	r3, r0
 8004b60:	73fb      	strb	r3, [r7, #15]
  return res;
 8004b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	200015b0 	.word	0x200015b0

08004b70 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004b80:	89fb      	ldrh	r3, [r7, #14]
 8004b82:	021b      	lsls	r3, r3, #8
 8004b84:	b21a      	sxth	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	b21b      	sxth	r3, r3
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	b21b      	sxth	r3, r3
 8004b90:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004b92:	89fb      	ldrh	r3, [r7, #14]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3303      	adds	r3, #3
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	021b      	lsls	r3, r3, #8
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	3202      	adds	r2, #2
 8004bb8:	7812      	ldrb	r2, [r2, #0]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	021b      	lsls	r3, r3, #8
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	3201      	adds	r2, #1
 8004bc6:	7812      	ldrb	r2, [r2, #0]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	021b      	lsls	r3, r3, #8
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	7812      	ldrb	r2, [r2, #0]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	60fb      	str	r3, [r7, #12]
	return rv;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	460b      	mov	r3, r1
 8004bf0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	1c5a      	adds	r2, r3, #1
 8004bf6:	607a      	str	r2, [r7, #4]
 8004bf8:	887a      	ldrh	r2, [r7, #2]
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	701a      	strb	r2, [r3, #0]
 8004bfe:	887b      	ldrh	r3, [r7, #2]
 8004c00:	0a1b      	lsrs	r3, r3, #8
 8004c02:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	607a      	str	r2, [r7, #4]
 8004c0a:	887a      	ldrh	r2, [r7, #2]
 8004c0c:	b2d2      	uxtb	r2, r2
 8004c0e:	701a      	strb	r2, [r3, #0]
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	1c5a      	adds	r2, r3, #1
 8004c2a:	607a      	str	r2, [r7, #4]
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	701a      	strb	r2, [r3, #0]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	0a1b      	lsrs	r3, r3, #8
 8004c36:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	1c5a      	adds	r2, r3, #1
 8004c3c:	607a      	str	r2, [r7, #4]
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	b2d2      	uxtb	r2, r2
 8004c42:	701a      	strb	r2, [r3, #0]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	0a1b      	lsrs	r3, r3, #8
 8004c48:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	1c5a      	adds	r2, r3, #1
 8004c4e:	607a      	str	r2, [r7, #4]
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	701a      	strb	r2, [r3, #0]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	0a1b      	lsrs	r3, r3, #8
 8004c5a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	1c5a      	adds	r2, r3, #1
 8004c60:	607a      	str	r2, [r7, #4]
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	b2d2      	uxtb	r2, r2
 8004c66:	701a      	strb	r2, [r3, #0]
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00d      	beq.n	8004caa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	1c53      	adds	r3, r2, #1
 8004c92:	613b      	str	r3, [r7, #16]
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	1c59      	adds	r1, r3, #1
 8004c98:	6179      	str	r1, [r7, #20]
 8004c9a:	7812      	ldrb	r2, [r2, #0]
 8004c9c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	607b      	str	r3, [r7, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1f1      	bne.n	8004c8e <mem_cpy+0x1a>
	}
}
 8004caa:	bf00      	nop
 8004cac:	371c      	adds	r7, #28
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004cb6:	b480      	push	{r7}
 8004cb8:	b087      	sub	sp, #28
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	60f8      	str	r0, [r7, #12]
 8004cbe:	60b9      	str	r1, [r7, #8]
 8004cc0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	617a      	str	r2, [r7, #20]
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	b2d2      	uxtb	r2, r2
 8004cd0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	607b      	str	r3, [r7, #4]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1f3      	bne.n	8004cc6 <mem_set+0x10>
}
 8004cde:	bf00      	nop
 8004ce0:	bf00      	nop
 8004ce2:	371c      	adds	r7, #28
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004cec:	b480      	push	{r7}
 8004cee:	b089      	sub	sp, #36	@ 0x24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	61fb      	str	r3, [r7, #28]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004d00:	2300      	movs	r3, #0
 8004d02:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	61fa      	str	r2, [r7, #28]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	61ba      	str	r2, [r7, #24]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	1acb      	subs	r3, r1, r3
 8004d18:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	607b      	str	r3, [r7, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d002      	beq.n	8004d2c <mem_cmp+0x40>
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0eb      	beq.n	8004d04 <mem_cmp+0x18>

	return r;
 8004d2c:	697b      	ldr	r3, [r7, #20]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3724      	adds	r7, #36	@ 0x24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004d44:	e002      	b.n	8004d4c <chk_chr+0x12>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	607b      	str	r3, [r7, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d005      	beq.n	8004d60 <chk_chr+0x26>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	461a      	mov	r2, r3
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d1f2      	bne.n	8004d46 <chk_chr+0xc>
	return *str;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	781b      	ldrb	r3, [r3, #0]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	60bb      	str	r3, [r7, #8]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	e029      	b.n	8004dd8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004d84:	4a27      	ldr	r2, [pc, #156]	@ (8004e24 <chk_lock+0xb4>)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	011b      	lsls	r3, r3, #4
 8004d8a:	4413      	add	r3, r2
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d01d      	beq.n	8004dce <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004d92:	4a24      	ldr	r2, [pc, #144]	@ (8004e24 <chk_lock+0xb4>)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	4413      	add	r3, r2
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d116      	bne.n	8004dd2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004da4:	4a1f      	ldr	r2, [pc, #124]	@ (8004e24 <chk_lock+0xb4>)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	4413      	add	r3, r2
 8004dac:	3304      	adds	r3, #4
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d10c      	bne.n	8004dd2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004db8:	4a1a      	ldr	r2, [pc, #104]	@ (8004e24 <chk_lock+0xb4>)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	011b      	lsls	r3, r3, #4
 8004dbe:	4413      	add	r3, r2
 8004dc0:	3308      	adds	r3, #8
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d102      	bne.n	8004dd2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004dcc:	e007      	b.n	8004dde <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d9d2      	bls.n	8004d84 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d109      	bne.n	8004df8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d102      	bne.n	8004df0 <chk_lock+0x80>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d101      	bne.n	8004df4 <chk_lock+0x84>
 8004df0:	2300      	movs	r3, #0
 8004df2:	e010      	b.n	8004e16 <chk_lock+0xa6>
 8004df4:	2312      	movs	r3, #18
 8004df6:	e00e      	b.n	8004e16 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d108      	bne.n	8004e10 <chk_lock+0xa0>
 8004dfe:	4a09      	ldr	r2, [pc, #36]	@ (8004e24 <chk_lock+0xb4>)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	011b      	lsls	r3, r3, #4
 8004e04:	4413      	add	r3, r2
 8004e06:	330c      	adds	r3, #12
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e0e:	d101      	bne.n	8004e14 <chk_lock+0xa4>
 8004e10:	2310      	movs	r3, #16
 8004e12:	e000      	b.n	8004e16 <chk_lock+0xa6>
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	20001390 	.word	0x20001390

08004e28 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	607b      	str	r3, [r7, #4]
 8004e32:	e002      	b.n	8004e3a <enq_lock+0x12>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3301      	adds	r3, #1
 8004e38:	607b      	str	r3, [r7, #4]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d806      	bhi.n	8004e4e <enq_lock+0x26>
 8004e40:	4a09      	ldr	r2, [pc, #36]	@ (8004e68 <enq_lock+0x40>)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	011b      	lsls	r3, r3, #4
 8004e46:	4413      	add	r3, r2
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1f2      	bne.n	8004e34 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	bf14      	ite	ne
 8004e54:	2301      	movne	r3, #1
 8004e56:	2300      	moveq	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	20001390 	.word	0x20001390

08004e6c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004e76:	2300      	movs	r3, #0
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	e01f      	b.n	8004ebc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004e7c:	4a41      	ldr	r2, [pc, #260]	@ (8004f84 <inc_lock+0x118>)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	011b      	lsls	r3, r3, #4
 8004e82:	4413      	add	r3, r2
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d113      	bne.n	8004eb6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004e8e:	4a3d      	ldr	r2, [pc, #244]	@ (8004f84 <inc_lock+0x118>)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	011b      	lsls	r3, r3, #4
 8004e94:	4413      	add	r3, r2
 8004e96:	3304      	adds	r3, #4
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d109      	bne.n	8004eb6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004ea2:	4a38      	ldr	r2, [pc, #224]	@ (8004f84 <inc_lock+0x118>)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	4413      	add	r3, r2
 8004eaa:	3308      	adds	r3, #8
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d006      	beq.n	8004ec4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d9dc      	bls.n	8004e7c <inc_lock+0x10>
 8004ec2:	e000      	b.n	8004ec6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004ec4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d132      	bne.n	8004f32 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	e002      	b.n	8004ed8 <inc_lock+0x6c>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d806      	bhi.n	8004eec <inc_lock+0x80>
 8004ede:	4a29      	ldr	r2, [pc, #164]	@ (8004f84 <inc_lock+0x118>)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	011b      	lsls	r3, r3, #4
 8004ee4:	4413      	add	r3, r2
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1f2      	bne.n	8004ed2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d101      	bne.n	8004ef6 <inc_lock+0x8a>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	e040      	b.n	8004f78 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	4922      	ldr	r1, [pc, #136]	@ (8004f84 <inc_lock+0x118>)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	440b      	add	r3, r1
 8004f02:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	491e      	ldr	r1, [pc, #120]	@ (8004f84 <inc_lock+0x118>)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	440b      	add	r3, r1
 8004f10:	3304      	adds	r3, #4
 8004f12:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	695a      	ldr	r2, [r3, #20]
 8004f18:	491a      	ldr	r1, [pc, #104]	@ (8004f84 <inc_lock+0x118>)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	011b      	lsls	r3, r3, #4
 8004f1e:	440b      	add	r3, r1
 8004f20:	3308      	adds	r3, #8
 8004f22:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004f24:	4a17      	ldr	r2, [pc, #92]	@ (8004f84 <inc_lock+0x118>)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	011b      	lsls	r3, r3, #4
 8004f2a:	4413      	add	r3, r2
 8004f2c:	330c      	adds	r3, #12
 8004f2e:	2200      	movs	r2, #0
 8004f30:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d009      	beq.n	8004f4c <inc_lock+0xe0>
 8004f38:	4a12      	ldr	r2, [pc, #72]	@ (8004f84 <inc_lock+0x118>)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	011b      	lsls	r3, r3, #4
 8004f3e:	4413      	add	r3, r2
 8004f40:	330c      	adds	r3, #12
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <inc_lock+0xe0>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	e015      	b.n	8004f78 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d108      	bne.n	8004f64 <inc_lock+0xf8>
 8004f52:	4a0c      	ldr	r2, [pc, #48]	@ (8004f84 <inc_lock+0x118>)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	011b      	lsls	r3, r3, #4
 8004f58:	4413      	add	r3, r2
 8004f5a:	330c      	adds	r3, #12
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	e001      	b.n	8004f68 <inc_lock+0xfc>
 8004f64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f68:	4906      	ldr	r1, [pc, #24]	@ (8004f84 <inc_lock+0x118>)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	011b      	lsls	r3, r3, #4
 8004f6e:	440b      	add	r3, r1
 8004f70:	330c      	adds	r3, #12
 8004f72:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	3301      	adds	r3, #1
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	20001390 	.word	0x20001390

08004f88 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	607b      	str	r3, [r7, #4]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d825      	bhi.n	8004fe8 <dec_lock+0x60>
		n = Files[i].ctr;
 8004f9c:	4a17      	ldr	r2, [pc, #92]	@ (8004ffc <dec_lock+0x74>)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	4413      	add	r3, r2
 8004fa4:	330c      	adds	r3, #12
 8004fa6:	881b      	ldrh	r3, [r3, #0]
 8004fa8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004faa:	89fb      	ldrh	r3, [r7, #14]
 8004fac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fb0:	d101      	bne.n	8004fb6 <dec_lock+0x2e>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004fb6:	89fb      	ldrh	r3, [r7, #14]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d002      	beq.n	8004fc2 <dec_lock+0x3a>
 8004fbc:	89fb      	ldrh	r3, [r7, #14]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004fc2:	4a0e      	ldr	r2, [pc, #56]	@ (8004ffc <dec_lock+0x74>)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	011b      	lsls	r3, r3, #4
 8004fc8:	4413      	add	r3, r2
 8004fca:	330c      	adds	r3, #12
 8004fcc:	89fa      	ldrh	r2, [r7, #14]
 8004fce:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004fd0:	89fb      	ldrh	r3, [r7, #14]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d105      	bne.n	8004fe2 <dec_lock+0x5a>
 8004fd6:	4a09      	ldr	r2, [pc, #36]	@ (8004ffc <dec_lock+0x74>)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	4413      	add	r3, r2
 8004fde:	2200      	movs	r2, #0
 8004fe0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	737b      	strb	r3, [r7, #13]
 8004fe6:	e001      	b.n	8004fec <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004fe8:	2302      	movs	r3, #2
 8004fea:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004fec:	7b7b      	ldrb	r3, [r7, #13]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	20001390 	.word	0x20001390

08005000 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005008:	2300      	movs	r3, #0
 800500a:	60fb      	str	r3, [r7, #12]
 800500c:	e010      	b.n	8005030 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800500e:	4a0d      	ldr	r2, [pc, #52]	@ (8005044 <clear_lock+0x44>)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	011b      	lsls	r3, r3, #4
 8005014:	4413      	add	r3, r2
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	429a      	cmp	r2, r3
 800501c:	d105      	bne.n	800502a <clear_lock+0x2a>
 800501e:	4a09      	ldr	r2, [pc, #36]	@ (8005044 <clear_lock+0x44>)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	011b      	lsls	r3, r3, #4
 8005024:	4413      	add	r3, r2
 8005026:	2200      	movs	r2, #0
 8005028:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	3301      	adds	r3, #1
 800502e:	60fb      	str	r3, [r7, #12]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d9eb      	bls.n	800500e <clear_lock+0xe>
	}
}
 8005036:	bf00      	nop
 8005038:	bf00      	nop
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	20001390 	.word	0x20001390

08005048 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005050:	2300      	movs	r3, #0
 8005052:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	78db      	ldrb	r3, [r3, #3]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d034      	beq.n	80050c6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005060:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	7858      	ldrb	r0, [r3, #1]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800506c:	2301      	movs	r3, #1
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	f7ff fd40 	bl	8004af4 <disk_write>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d002      	beq.n	8005080 <sync_window+0x38>
			res = FR_DISK_ERR;
 800507a:	2301      	movs	r3, #1
 800507c:	73fb      	strb	r3, [r7, #15]
 800507e:	e022      	b.n	80050c6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	1ad2      	subs	r2, r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	429a      	cmp	r2, r3
 8005094:	d217      	bcs.n	80050c6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	789b      	ldrb	r3, [r3, #2]
 800509a:	613b      	str	r3, [r7, #16]
 800509c:	e010      	b.n	80050c0 <sync_window+0x78>
					wsect += fs->fsize;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	4413      	add	r3, r2
 80050a6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	7858      	ldrb	r0, [r3, #1]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80050b2:	2301      	movs	r3, #1
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	f7ff fd1d 	bl	8004af4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	3b01      	subs	r3, #1
 80050be:	613b      	str	r3, [r7, #16]
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d8eb      	bhi.n	800509e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80050c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3718      	adds	r7, #24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80050da:	2300      	movs	r3, #0
 80050dc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d01b      	beq.n	8005120 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff ffad 	bl	8005048 <sync_window>
 80050ee:	4603      	mov	r3, r0
 80050f0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d113      	bne.n	8005120 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	7858      	ldrb	r0, [r3, #1]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005102:	2301      	movs	r3, #1
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	f7ff fcd5 	bl	8004ab4 <disk_read>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d004      	beq.n	800511a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005110:	f04f 33ff 	mov.w	r3, #4294967295
 8005114:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005116:	2301      	movs	r3, #1
 8005118:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8005120:	7bfb      	ldrb	r3, [r7, #15]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
	...

0800512c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f7ff ff87 	bl	8005048 <sync_window>
 800513a:	4603      	mov	r3, r0
 800513c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800513e:	7bfb      	ldrb	r3, [r7, #15]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d159      	bne.n	80051f8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	2b03      	cmp	r3, #3
 800514a:	d149      	bne.n	80051e0 <sync_fs+0xb4>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	791b      	ldrb	r3, [r3, #4]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d145      	bne.n	80051e0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	899b      	ldrh	r3, [r3, #12]
 800515e:	461a      	mov	r2, r3
 8005160:	2100      	movs	r1, #0
 8005162:	f7ff fda8 	bl	8004cb6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	3338      	adds	r3, #56	@ 0x38
 800516a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800516e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8005172:	4618      	mov	r0, r3
 8005174:	f7ff fd37 	bl	8004be6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	3338      	adds	r3, #56	@ 0x38
 800517c:	4921      	ldr	r1, [pc, #132]	@ (8005204 <sync_fs+0xd8>)
 800517e:	4618      	mov	r0, r3
 8005180:	f7ff fd4c 	bl	8004c1c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	3338      	adds	r3, #56	@ 0x38
 8005188:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800518c:	491e      	ldr	r1, [pc, #120]	@ (8005208 <sync_fs+0xdc>)
 800518e:	4618      	mov	r0, r3
 8005190:	f7ff fd44 	bl	8004c1c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3338      	adds	r3, #56	@ 0x38
 8005198:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	4619      	mov	r1, r3
 80051a2:	4610      	mov	r0, r2
 80051a4:	f7ff fd3a 	bl	8004c1c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3338      	adds	r3, #56	@ 0x38
 80051ac:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	4619      	mov	r1, r3
 80051b6:	4610      	mov	r0, r2
 80051b8:	f7ff fd30 	bl	8004c1c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	7858      	ldrb	r0, [r3, #1]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051d4:	2301      	movs	r3, #1
 80051d6:	f7ff fc8d 	bl	8004af4 <disk_write>
			fs->fsi_flag = 0;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	785b      	ldrb	r3, [r3, #1]
 80051e4:	2200      	movs	r2, #0
 80051e6:	2100      	movs	r1, #0
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7ff fca3 	bl	8004b34 <disk_ioctl>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d001      	beq.n	80051f8 <sync_fs+0xcc>
 80051f4:	2301      	movs	r3, #1
 80051f6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	41615252 	.word	0x41615252
 8005208:	61417272 	.word	0x61417272

0800520c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	3b02      	subs	r3, #2
 800521a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	69db      	ldr	r3, [r3, #28]
 8005220:	3b02      	subs	r3, #2
 8005222:	683a      	ldr	r2, [r7, #0]
 8005224:	429a      	cmp	r2, r3
 8005226:	d301      	bcc.n	800522c <clust2sect+0x20>
 8005228:	2300      	movs	r3, #0
 800522a:	e008      	b.n	800523e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	895b      	ldrh	r3, [r3, #10]
 8005230:	461a      	mov	r2, r3
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	fb03 f202 	mul.w	r2, r3, r2
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800523c:	4413      	add	r3, r2
}
 800523e:	4618      	mov	r0, r3
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b086      	sub	sp, #24
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d904      	bls.n	800526a <get_fat+0x20>
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	69db      	ldr	r3, [r3, #28]
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	429a      	cmp	r2, r3
 8005268:	d302      	bcc.n	8005270 <get_fat+0x26>
		val = 1;	/* Internal error */
 800526a:	2301      	movs	r3, #1
 800526c:	617b      	str	r3, [r7, #20]
 800526e:	e0ba      	b.n	80053e6 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005270:	f04f 33ff 	mov.w	r3, #4294967295
 8005274:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b03      	cmp	r3, #3
 800527c:	f000 8082 	beq.w	8005384 <get_fat+0x13a>
 8005280:	2b03      	cmp	r3, #3
 8005282:	f300 80a6 	bgt.w	80053d2 <get_fat+0x188>
 8005286:	2b01      	cmp	r3, #1
 8005288:	d002      	beq.n	8005290 <get_fat+0x46>
 800528a:	2b02      	cmp	r3, #2
 800528c:	d055      	beq.n	800533a <get_fat+0xf0>
 800528e:	e0a0      	b.n	80053d2 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	60fb      	str	r3, [r7, #12]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	085b      	lsrs	r3, r3, #1
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	4413      	add	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	899b      	ldrh	r3, [r3, #12]
 80052a6:	4619      	mov	r1, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80052ae:	4413      	add	r3, r2
 80052b0:	4619      	mov	r1, r3
 80052b2:	6938      	ldr	r0, [r7, #16]
 80052b4:	f7ff ff0c 	bl	80050d0 <move_window>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f040 808c 	bne.w	80053d8 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	1c5a      	adds	r2, r3, #1
 80052c4:	60fa      	str	r2, [r7, #12]
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	8992      	ldrh	r2, [r2, #12]
 80052ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80052ce:	fb01 f202 	mul.w	r2, r1, r2
 80052d2:	1a9b      	subs	r3, r3, r2
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	4413      	add	r3, r2
 80052d8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80052dc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	899b      	ldrh	r3, [r3, #12]
 80052e6:	4619      	mov	r1, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80052ee:	4413      	add	r3, r2
 80052f0:	4619      	mov	r1, r3
 80052f2:	6938      	ldr	r0, [r7, #16]
 80052f4:	f7ff feec 	bl	80050d0 <move_window>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d16e      	bne.n	80053dc <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	899b      	ldrh	r3, [r3, #12]
 8005302:	461a      	mov	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	fbb3 f1f2 	udiv	r1, r3, r2
 800530a:	fb01 f202 	mul.w	r2, r1, r2
 800530e:	1a9b      	subs	r3, r3, r2
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	4413      	add	r3, r2
 8005314:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005318:	021b      	lsls	r3, r3, #8
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	4313      	orrs	r3, r2
 800531e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <get_fat+0xe6>
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	091b      	lsrs	r3, r3, #4
 800532e:	e002      	b.n	8005336 <get_fat+0xec>
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005336:	617b      	str	r3, [r7, #20]
			break;
 8005338:	e055      	b.n	80053e6 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	899b      	ldrh	r3, [r3, #12]
 8005342:	085b      	lsrs	r3, r3, #1
 8005344:	b29b      	uxth	r3, r3
 8005346:	4619      	mov	r1, r3
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	fbb3 f3f1 	udiv	r3, r3, r1
 800534e:	4413      	add	r3, r2
 8005350:	4619      	mov	r1, r3
 8005352:	6938      	ldr	r0, [r7, #16]
 8005354:	f7ff febc 	bl	80050d0 <move_window>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d140      	bne.n	80053e0 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	8992      	ldrh	r2, [r2, #12]
 800536c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005370:	fb00 f202 	mul.w	r2, r0, r2
 8005374:	1a9b      	subs	r3, r3, r2
 8005376:	440b      	add	r3, r1
 8005378:	4618      	mov	r0, r3
 800537a:	f7ff fbf9 	bl	8004b70 <ld_word>
 800537e:	4603      	mov	r3, r0
 8005380:	617b      	str	r3, [r7, #20]
			break;
 8005382:	e030      	b.n	80053e6 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	899b      	ldrh	r3, [r3, #12]
 800538c:	089b      	lsrs	r3, r3, #2
 800538e:	b29b      	uxth	r3, r3
 8005390:	4619      	mov	r1, r3
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	fbb3 f3f1 	udiv	r3, r3, r1
 8005398:	4413      	add	r3, r2
 800539a:	4619      	mov	r1, r3
 800539c:	6938      	ldr	r0, [r7, #16]
 800539e:	f7ff fe97 	bl	80050d0 <move_window>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d11d      	bne.n	80053e4 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	8992      	ldrh	r2, [r2, #12]
 80053b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80053ba:	fb00 f202 	mul.w	r2, r0, r2
 80053be:	1a9b      	subs	r3, r3, r2
 80053c0:	440b      	add	r3, r1
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7ff fbec 	bl	8004ba0 <ld_dword>
 80053c8:	4603      	mov	r3, r0
 80053ca:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80053ce:	617b      	str	r3, [r7, #20]
			break;
 80053d0:	e009      	b.n	80053e6 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80053d2:	2301      	movs	r3, #1
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	e006      	b.n	80053e6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80053d8:	bf00      	nop
 80053da:	e004      	b.n	80053e6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80053dc:	bf00      	nop
 80053de:	e002      	b.n	80053e6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80053e0:	bf00      	nop
 80053e2:	e000      	b.n	80053e6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80053e4:	bf00      	nop
		}
	}

	return val;
 80053e6:	697b      	ldr	r3, [r7, #20]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3718      	adds	r7, #24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80053f0:	b590      	push	{r4, r7, lr}
 80053f2:	b089      	sub	sp, #36	@ 0x24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80053fc:	2302      	movs	r3, #2
 80053fe:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	2b01      	cmp	r3, #1
 8005404:	f240 8109 	bls.w	800561a <put_fat+0x22a>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	429a      	cmp	r2, r3
 8005410:	f080 8103 	bcs.w	800561a <put_fat+0x22a>
		switch (fs->fs_type) {
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	2b03      	cmp	r3, #3
 800541a:	f000 80b6 	beq.w	800558a <put_fat+0x19a>
 800541e:	2b03      	cmp	r3, #3
 8005420:	f300 80fb 	bgt.w	800561a <put_fat+0x22a>
 8005424:	2b01      	cmp	r3, #1
 8005426:	d003      	beq.n	8005430 <put_fat+0x40>
 8005428:	2b02      	cmp	r3, #2
 800542a:	f000 8083 	beq.w	8005534 <put_fat+0x144>
 800542e:	e0f4      	b.n	800561a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	61bb      	str	r3, [r7, #24]
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	085b      	lsrs	r3, r3, #1
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	4413      	add	r3, r2
 800543c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	899b      	ldrh	r3, [r3, #12]
 8005446:	4619      	mov	r1, r3
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	fbb3 f3f1 	udiv	r3, r3, r1
 800544e:	4413      	add	r3, r2
 8005450:	4619      	mov	r1, r3
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f7ff fe3c 	bl	80050d0 <move_window>
 8005458:	4603      	mov	r3, r0
 800545a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800545c:	7ffb      	ldrb	r3, [r7, #31]
 800545e:	2b00      	cmp	r3, #0
 8005460:	f040 80d4 	bne.w	800560c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	1c5a      	adds	r2, r3, #1
 800546e:	61ba      	str	r2, [r7, #24]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	8992      	ldrh	r2, [r2, #12]
 8005474:	fbb3 f0f2 	udiv	r0, r3, r2
 8005478:	fb00 f202 	mul.w	r2, r0, r2
 800547c:	1a9b      	subs	r3, r3, r2
 800547e:	440b      	add	r3, r1
 8005480:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00d      	beq.n	80054a8 <put_fat+0xb8>
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	b25b      	sxtb	r3, r3
 8005492:	f003 030f 	and.w	r3, r3, #15
 8005496:	b25a      	sxtb	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	b2db      	uxtb	r3, r3
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	b25b      	sxtb	r3, r3
 80054a0:	4313      	orrs	r3, r2
 80054a2:	b25b      	sxtb	r3, r3
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	e001      	b.n	80054ac <put_fat+0xbc>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2201      	movs	r2, #1
 80054b4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	899b      	ldrh	r3, [r3, #12]
 80054be:	4619      	mov	r1, r3
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80054c6:	4413      	add	r3, r2
 80054c8:	4619      	mov	r1, r3
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f7ff fe00 	bl	80050d0 <move_window>
 80054d0:	4603      	mov	r3, r0
 80054d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80054d4:	7ffb      	ldrb	r3, [r7, #31]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f040 809a 	bne.w	8005610 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	899b      	ldrh	r3, [r3, #12]
 80054e6:	461a      	mov	r2, r3
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80054ee:	fb00 f202 	mul.w	r2, r0, r2
 80054f2:	1a9b      	subs	r3, r3, r2
 80054f4:	440b      	add	r3, r1
 80054f6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <put_fat+0x11a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	091b      	lsrs	r3, r3, #4
 8005506:	b2db      	uxtb	r3, r3
 8005508:	e00e      	b.n	8005528 <put_fat+0x138>
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	b25b      	sxtb	r3, r3
 8005510:	f023 030f 	bic.w	r3, r3, #15
 8005514:	b25a      	sxtb	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	0a1b      	lsrs	r3, r3, #8
 800551a:	b25b      	sxtb	r3, r3
 800551c:	f003 030f 	and.w	r3, r3, #15
 8005520:	b25b      	sxtb	r3, r3
 8005522:	4313      	orrs	r3, r2
 8005524:	b25b      	sxtb	r3, r3
 8005526:	b2db      	uxtb	r3, r3
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2201      	movs	r2, #1
 8005530:	70da      	strb	r2, [r3, #3]
			break;
 8005532:	e072      	b.n	800561a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	899b      	ldrh	r3, [r3, #12]
 800553c:	085b      	lsrs	r3, r3, #1
 800553e:	b29b      	uxth	r3, r3
 8005540:	4619      	mov	r1, r3
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	fbb3 f3f1 	udiv	r3, r3, r1
 8005548:	4413      	add	r3, r2
 800554a:	4619      	mov	r1, r3
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f7ff fdbf 	bl	80050d0 <move_window>
 8005552:	4603      	mov	r3, r0
 8005554:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005556:	7ffb      	ldrb	r3, [r7, #31]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d15b      	bne.n	8005614 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	005b      	lsls	r3, r3, #1
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	8992      	ldrh	r2, [r2, #12]
 800556a:	fbb3 f0f2 	udiv	r0, r3, r2
 800556e:	fb00 f202 	mul.w	r2, r0, r2
 8005572:	1a9b      	subs	r3, r3, r2
 8005574:	440b      	add	r3, r1
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	b292      	uxth	r2, r2
 800557a:	4611      	mov	r1, r2
 800557c:	4618      	mov	r0, r3
 800557e:	f7ff fb32 	bl	8004be6 <st_word>
			fs->wflag = 1;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2201      	movs	r2, #1
 8005586:	70da      	strb	r2, [r3, #3]
			break;
 8005588:	e047      	b.n	800561a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	899b      	ldrh	r3, [r3, #12]
 8005592:	089b      	lsrs	r3, r3, #2
 8005594:	b29b      	uxth	r3, r3
 8005596:	4619      	mov	r1, r3
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	fbb3 f3f1 	udiv	r3, r3, r1
 800559e:	4413      	add	r3, r2
 80055a0:	4619      	mov	r1, r3
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f7ff fd94 	bl	80050d0 <move_window>
 80055a8:	4603      	mov	r3, r0
 80055aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80055ac:	7ffb      	ldrb	r3, [r7, #31]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d132      	bne.n	8005618 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	8992      	ldrh	r2, [r2, #12]
 80055c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80055ca:	fb00 f202 	mul.w	r2, r0, r2
 80055ce:	1a9b      	subs	r3, r3, r2
 80055d0:	440b      	add	r3, r1
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7ff fae4 	bl	8004ba0 <ld_dword>
 80055d8:	4603      	mov	r3, r0
 80055da:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80055de:	4323      	orrs	r3, r4
 80055e0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	8992      	ldrh	r2, [r2, #12]
 80055f0:	fbb3 f0f2 	udiv	r0, r3, r2
 80055f4:	fb00 f202 	mul.w	r2, r0, r2
 80055f8:	1a9b      	subs	r3, r3, r2
 80055fa:	440b      	add	r3, r1
 80055fc:	6879      	ldr	r1, [r7, #4]
 80055fe:	4618      	mov	r0, r3
 8005600:	f7ff fb0c 	bl	8004c1c <st_dword>
			fs->wflag = 1;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2201      	movs	r2, #1
 8005608:	70da      	strb	r2, [r3, #3]
			break;
 800560a:	e006      	b.n	800561a <put_fat+0x22a>
			if (res != FR_OK) break;
 800560c:	bf00      	nop
 800560e:	e004      	b.n	800561a <put_fat+0x22a>
			if (res != FR_OK) break;
 8005610:	bf00      	nop
 8005612:	e002      	b.n	800561a <put_fat+0x22a>
			if (res != FR_OK) break;
 8005614:	bf00      	nop
 8005616:	e000      	b.n	800561a <put_fat+0x22a>
			if (res != FR_OK) break;
 8005618:	bf00      	nop
		}
	}
	return res;
 800561a:	7ffb      	ldrb	r3, [r7, #31]
}
 800561c:	4618      	mov	r0, r3
 800561e:	3724      	adds	r7, #36	@ 0x24
 8005620:	46bd      	mov	sp, r7
 8005622:	bd90      	pop	{r4, r7, pc}

08005624 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b088      	sub	sp, #32
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005630:	2300      	movs	r3, #0
 8005632:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d904      	bls.n	800564a <remove_chain+0x26>
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	429a      	cmp	r2, r3
 8005648:	d301      	bcc.n	800564e <remove_chain+0x2a>
 800564a:	2302      	movs	r3, #2
 800564c:	e04b      	b.n	80056e6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00c      	beq.n	800566e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005654:	f04f 32ff 	mov.w	r2, #4294967295
 8005658:	6879      	ldr	r1, [r7, #4]
 800565a:	69b8      	ldr	r0, [r7, #24]
 800565c:	f7ff fec8 	bl	80053f0 <put_fat>
 8005660:	4603      	mov	r3, r0
 8005662:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005664:	7ffb      	ldrb	r3, [r7, #31]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <remove_chain+0x4a>
 800566a:	7ffb      	ldrb	r3, [r7, #31]
 800566c:	e03b      	b.n	80056e6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800566e:	68b9      	ldr	r1, [r7, #8]
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f7ff fdea 	bl	800524a <get_fat>
 8005676:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d031      	beq.n	80056e2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <remove_chain+0x64>
 8005684:	2302      	movs	r3, #2
 8005686:	e02e      	b.n	80056e6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568e:	d101      	bne.n	8005694 <remove_chain+0x70>
 8005690:	2301      	movs	r3, #1
 8005692:	e028      	b.n	80056e6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005694:	2200      	movs	r2, #0
 8005696:	68b9      	ldr	r1, [r7, #8]
 8005698:	69b8      	ldr	r0, [r7, #24]
 800569a:	f7ff fea9 	bl	80053f0 <put_fat>
 800569e:	4603      	mov	r3, r0
 80056a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80056a2:	7ffb      	ldrb	r3, [r7, #31]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <remove_chain+0x88>
 80056a8:	7ffb      	ldrb	r3, [r7, #31]
 80056aa:	e01c      	b.n	80056e6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	699a      	ldr	r2, [r3, #24]
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	3b02      	subs	r3, #2
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d20b      	bcs.n	80056d2 <remove_chain+0xae>
			fs->free_clst++;
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	791b      	ldrb	r3, [r3, #4]
 80056c8:	f043 0301 	orr.w	r3, r3, #1
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d3c6      	bcc.n	800566e <remove_chain+0x4a>
 80056e0:	e000      	b.n	80056e4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80056e2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3720      	adds	r7, #32
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b088      	sub	sp, #32
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
 80056f6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10d      	bne.n	8005720 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d004      	beq.n	800571a <create_chain+0x2c>
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	69db      	ldr	r3, [r3, #28]
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	429a      	cmp	r2, r3
 8005718:	d31b      	bcc.n	8005752 <create_chain+0x64>
 800571a:	2301      	movs	r3, #1
 800571c:	61bb      	str	r3, [r7, #24]
 800571e:	e018      	b.n	8005752 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005720:	6839      	ldr	r1, [r7, #0]
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7ff fd91 	bl	800524a <get_fat>
 8005728:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d801      	bhi.n	8005734 <create_chain+0x46>
 8005730:	2301      	movs	r3, #1
 8005732:	e070      	b.n	8005816 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573a:	d101      	bne.n	8005740 <create_chain+0x52>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	e06a      	b.n	8005816 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	69db      	ldr	r3, [r3, #28]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	429a      	cmp	r2, r3
 8005748:	d201      	bcs.n	800574e <create_chain+0x60>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	e063      	b.n	8005816 <create_chain+0x128>
		scl = clst;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	3301      	adds	r3, #1
 800575a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	69fa      	ldr	r2, [r7, #28]
 8005762:	429a      	cmp	r2, r3
 8005764:	d307      	bcc.n	8005776 <create_chain+0x88>
				ncl = 2;
 8005766:	2302      	movs	r3, #2
 8005768:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800576a:	69fa      	ldr	r2, [r7, #28]
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	429a      	cmp	r2, r3
 8005770:	d901      	bls.n	8005776 <create_chain+0x88>
 8005772:	2300      	movs	r3, #0
 8005774:	e04f      	b.n	8005816 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005776:	69f9      	ldr	r1, [r7, #28]
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f7ff fd66 	bl	800524a <get_fat>
 800577e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00e      	beq.n	80057a4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d003      	beq.n	8005794 <create_chain+0xa6>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005792:	d101      	bne.n	8005798 <create_chain+0xaa>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	e03e      	b.n	8005816 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005798:	69fa      	ldr	r2, [r7, #28]
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	429a      	cmp	r2, r3
 800579e:	d1da      	bne.n	8005756 <create_chain+0x68>
 80057a0:	2300      	movs	r3, #0
 80057a2:	e038      	b.n	8005816 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80057a4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80057a6:	f04f 32ff 	mov.w	r2, #4294967295
 80057aa:	69f9      	ldr	r1, [r7, #28]
 80057ac:	6938      	ldr	r0, [r7, #16]
 80057ae:	f7ff fe1f 	bl	80053f0 <put_fat>
 80057b2:	4603      	mov	r3, r0
 80057b4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80057b6:	7dfb      	ldrb	r3, [r7, #23]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d109      	bne.n	80057d0 <create_chain+0xe2>
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d006      	beq.n	80057d0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80057c2:	69fa      	ldr	r2, [r7, #28]
 80057c4:	6839      	ldr	r1, [r7, #0]
 80057c6:	6938      	ldr	r0, [r7, #16]
 80057c8:	f7ff fe12 	bl	80053f0 <put_fat>
 80057cc:	4603      	mov	r3, r0
 80057ce:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80057d0:	7dfb      	ldrb	r3, [r7, #23]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d116      	bne.n	8005804 <create_chain+0x116>
		fs->last_clst = ncl;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	69fa      	ldr	r2, [r7, #28]
 80057da:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	699a      	ldr	r2, [r3, #24]
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	3b02      	subs	r3, #2
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d804      	bhi.n	80057f4 <create_chain+0x106>
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	1e5a      	subs	r2, r3, #1
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	791b      	ldrb	r3, [r3, #4]
 80057f8:	f043 0301 	orr.w	r3, r3, #1
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	711a      	strb	r2, [r3, #4]
 8005802:	e007      	b.n	8005814 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005804:	7dfb      	ldrb	r3, [r7, #23]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d102      	bne.n	8005810 <create_chain+0x122>
 800580a:	f04f 33ff 	mov.w	r3, #4294967295
 800580e:	e000      	b.n	8005812 <create_chain+0x124>
 8005810:	2301      	movs	r3, #1
 8005812:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005814:	69fb      	ldr	r3, [r7, #28]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3720      	adds	r7, #32
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800581e:	b480      	push	{r7}
 8005820:	b087      	sub	sp, #28
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
 8005826:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005832:	3304      	adds	r3, #4
 8005834:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	899b      	ldrh	r3, [r3, #12]
 800583a:	461a      	mov	r2, r3
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	8952      	ldrh	r2, [r2, #10]
 8005846:	fbb3 f3f2 	udiv	r3, r3, r2
 800584a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	1d1a      	adds	r2, r3, #4
 8005850:	613a      	str	r2, [r7, #16]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <clmt_clust+0x42>
 800585c:	2300      	movs	r3, #0
 800585e:	e010      	b.n	8005882 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	429a      	cmp	r2, r3
 8005866:	d307      	bcc.n	8005878 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	3304      	adds	r3, #4
 8005874:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005876:	e7e9      	b.n	800584c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005878:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	4413      	add	r3, r2
}
 8005882:	4618      	mov	r0, r3
 8005884:	371c      	adds	r7, #28
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b086      	sub	sp, #24
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
 8005896:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058a4:	d204      	bcs.n	80058b0 <dir_sdi+0x22>
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	f003 031f 	and.w	r3, r3, #31
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80058b0:	2302      	movs	r3, #2
 80058b2:	e071      	b.n	8005998 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d106      	bne.n	80058d4 <dir_sdi+0x46>
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d902      	bls.n	80058d4 <dir_sdi+0x46>
		clst = fs->dirbase;
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10c      	bne.n	80058f4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	095b      	lsrs	r3, r3, #5
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	8912      	ldrh	r2, [r2, #8]
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d301      	bcc.n	80058ea <dir_sdi+0x5c>
 80058e6:	2302      	movs	r3, #2
 80058e8:	e056      	b.n	8005998 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	61da      	str	r2, [r3, #28]
 80058f2:	e02d      	b.n	8005950 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	895b      	ldrh	r3, [r3, #10]
 80058f8:	461a      	mov	r2, r3
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	899b      	ldrh	r3, [r3, #12]
 80058fe:	fb02 f303 	mul.w	r3, r2, r3
 8005902:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005904:	e019      	b.n	800593a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6979      	ldr	r1, [r7, #20]
 800590a:	4618      	mov	r0, r3
 800590c:	f7ff fc9d 	bl	800524a <get_fat>
 8005910:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005918:	d101      	bne.n	800591e <dir_sdi+0x90>
 800591a:	2301      	movs	r3, #1
 800591c:	e03c      	b.n	8005998 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d904      	bls.n	800592e <dir_sdi+0xa0>
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	429a      	cmp	r2, r3
 800592c:	d301      	bcc.n	8005932 <dir_sdi+0xa4>
 800592e:	2302      	movs	r3, #2
 8005930:	e032      	b.n	8005998 <dir_sdi+0x10a>
			ofs -= csz;
 8005932:	683a      	ldr	r2, [r7, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	429a      	cmp	r2, r3
 8005940:	d2e1      	bcs.n	8005906 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005942:	6979      	ldr	r1, [r7, #20]
 8005944:	6938      	ldr	r0, [r7, #16]
 8005946:	f7ff fc61 	bl	800520c <clust2sect>
 800594a:	4602      	mov	r2, r0
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <dir_sdi+0xd4>
 800595e:	2302      	movs	r3, #2
 8005960:	e01a      	b.n	8005998 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	69da      	ldr	r2, [r3, #28]
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	899b      	ldrh	r3, [r3, #12]
 800596a:	4619      	mov	r1, r3
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005972:	441a      	add	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	899b      	ldrh	r3, [r3, #12]
 8005982:	461a      	mov	r2, r3
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	fbb3 f0f2 	udiv	r0, r3, r2
 800598a:	fb00 f202 	mul.w	r2, r0, r2
 800598e:	1a9b      	subs	r3, r3, r2
 8005990:	18ca      	adds	r2, r1, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3718      	adds	r7, #24
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	3320      	adds	r3, #32
 80059b6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <dir_next+0x28>
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059c6:	d301      	bcc.n	80059cc <dir_next+0x2c>
 80059c8:	2304      	movs	r3, #4
 80059ca:	e0bb      	b.n	8005b44 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	899b      	ldrh	r3, [r3, #12]
 80059d0:	461a      	mov	r2, r3
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80059d8:	fb01 f202 	mul.w	r2, r1, r2
 80059dc:	1a9b      	subs	r3, r3, r2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f040 809d 	bne.w	8005b1e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	69db      	ldr	r3, [r3, #28]
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10b      	bne.n	8005a0e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	095b      	lsrs	r3, r3, #5
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	8912      	ldrh	r2, [r2, #8]
 80059fe:	4293      	cmp	r3, r2
 8005a00:	f0c0 808d 	bcc.w	8005b1e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	61da      	str	r2, [r3, #28]
 8005a0a:	2304      	movs	r3, #4
 8005a0c:	e09a      	b.n	8005b44 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	899b      	ldrh	r3, [r3, #12]
 8005a12:	461a      	mov	r2, r3
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	8952      	ldrh	r2, [r2, #10]
 8005a1e:	3a01      	subs	r2, #1
 8005a20:	4013      	ands	r3, r2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d17b      	bne.n	8005b1e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	4610      	mov	r0, r2
 8005a30:	f7ff fc0b 	bl	800524a <get_fat>
 8005a34:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d801      	bhi.n	8005a40 <dir_next+0xa0>
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	e081      	b.n	8005b44 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a46:	d101      	bne.n	8005a4c <dir_next+0xac>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e07b      	b.n	8005b44 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d359      	bcc.n	8005b0a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d104      	bne.n	8005a66 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	61da      	str	r2, [r3, #28]
 8005a62:	2304      	movs	r3, #4
 8005a64:	e06e      	b.n	8005b44 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4610      	mov	r0, r2
 8005a70:	f7ff fe3d 	bl	80056ee <create_chain>
 8005a74:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <dir_next+0xe0>
 8005a7c:	2307      	movs	r3, #7
 8005a7e:	e061      	b.n	8005b44 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d101      	bne.n	8005a8a <dir_next+0xea>
 8005a86:	2302      	movs	r3, #2
 8005a88:	e05c      	b.n	8005b44 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a90:	d101      	bne.n	8005a96 <dir_next+0xf6>
 8005a92:	2301      	movs	r3, #1
 8005a94:	e056      	b.n	8005b44 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f7ff fad6 	bl	8005048 <sync_window>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <dir_next+0x106>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e04e      	b.n	8005b44 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	899b      	ldrh	r3, [r3, #12]
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	f7ff f8ff 	bl	8004cb6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005ab8:	2300      	movs	r3, #0
 8005aba:	613b      	str	r3, [r7, #16]
 8005abc:	6979      	ldr	r1, [r7, #20]
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f7ff fba4 	bl	800520c <clust2sect>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	635a      	str	r2, [r3, #52]	@ 0x34
 8005aca:	e012      	b.n	8005af2 <dir_next+0x152>
						fs->wflag = 1;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f7ff fab8 	bl	8005048 <sync_window>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <dir_next+0x142>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e030      	b.n	8005b44 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	613b      	str	r3, [r7, #16]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aec:	1c5a      	adds	r2, r3, #1
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	635a      	str	r2, [r3, #52]	@ 0x34
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	895b      	ldrh	r3, [r3, #10]
 8005af6:	461a      	mov	r2, r3
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d3e6      	bcc.n	8005acc <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	1ad2      	subs	r2, r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005b10:	6979      	ldr	r1, [r7, #20]
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f7ff fb7a 	bl	800520c <clust2sect>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	899b      	ldrh	r3, [r3, #12]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b36:	fb00 f202 	mul.w	r2, r0, r2
 8005b3a:	1a9b      	subs	r3, r3, r2
 8005b3c:	18ca      	adds	r2, r1, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3718      	adds	r7, #24
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f7ff fe95 	bl	800588e <dir_sdi>
 8005b64:	4603      	mov	r3, r0
 8005b66:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005b68:	7dfb      	ldrb	r3, [r7, #23]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d12b      	bne.n	8005bc6 <dir_alloc+0x7a>
		n = 0;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	4619      	mov	r1, r3
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f7ff faa9 	bl	80050d0 <move_window>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005b82:	7dfb      	ldrb	r3, [r7, #23]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d11d      	bne.n	8005bc4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	2be5      	cmp	r3, #229	@ 0xe5
 8005b90:	d004      	beq.n	8005b9c <dir_alloc+0x50>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d107      	bne.n	8005bac <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	613b      	str	r3, [r7, #16]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d102      	bne.n	8005bb0 <dir_alloc+0x64>
 8005baa:	e00c      	b.n	8005bc6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005bac:	2300      	movs	r3, #0
 8005bae:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005bb0:	2101      	movs	r1, #1
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7ff fef4 	bl	80059a0 <dir_next>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005bbc:	7dfb      	ldrb	r3, [r7, #23]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0d7      	beq.n	8005b72 <dir_alloc+0x26>
 8005bc2:	e000      	b.n	8005bc6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005bc4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005bc6:	7dfb      	ldrb	r3, [r7, #23]
 8005bc8:	2b04      	cmp	r3, #4
 8005bca:	d101      	bne.n	8005bd0 <dir_alloc+0x84>
 8005bcc:	2307      	movs	r3, #7
 8005bce:	75fb      	strb	r3, [r7, #23]
	return res;
 8005bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3718      	adds	r7, #24
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b084      	sub	sp, #16
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	331a      	adds	r3, #26
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fe ffc1 	bl	8004b70 <ld_word>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2b03      	cmp	r3, #3
 8005bf8:	d109      	bne.n	8005c0e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	3314      	adds	r3, #20
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7fe ffb6 	bl	8004b70 <ld_word>
 8005c04:	4603      	mov	r3, r0
 8005c06:	041b      	lsls	r3, r3, #16
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	331a      	adds	r3, #26
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	b292      	uxth	r2, r2
 8005c2c:	4611      	mov	r1, r2
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fe ffd9 	bl	8004be6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	2b03      	cmp	r3, #3
 8005c3a:	d109      	bne.n	8005c50 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	f103 0214 	add.w	r2, r3, #20
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	0c1b      	lsrs	r3, r3, #16
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	4619      	mov	r1, r3
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	f7fe ffcb 	bl	8004be6 <st_word>
	}
}
 8005c50:	bf00      	nop
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005c58:	b590      	push	{r4, r7, lr}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	331a      	adds	r3, #26
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7fe ff82 	bl	8004b70 <ld_word>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <cmp_lfn+0x1e>
 8005c72:	2300      	movs	r3, #0
 8005c74:	e059      	b.n	8005d2a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c7e:	1e5a      	subs	r2, r3, #1
 8005c80:	4613      	mov	r3, r2
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	4413      	add	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4413      	add	r3, r2
 8005c8a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	81fb      	strh	r3, [r7, #14]
 8005c90:	2300      	movs	r3, #0
 8005c92:	613b      	str	r3, [r7, #16]
 8005c94:	e033      	b.n	8005cfe <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005c96:	4a27      	ldr	r2, [pc, #156]	@ (8005d34 <cmp_lfn+0xdc>)
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7fe ff63 	bl	8004b70 <ld_word>
 8005caa:	4603      	mov	r3, r0
 8005cac:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005cae:	89fb      	ldrh	r3, [r7, #14]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d01a      	beq.n	8005cea <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	2bfe      	cmp	r3, #254	@ 0xfe
 8005cb8:	d812      	bhi.n	8005ce0 <cmp_lfn+0x88>
 8005cba:	89bb      	ldrh	r3, [r7, #12]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f002 fb91 	bl	80083e4 <ff_wtoupper>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	461c      	mov	r4, r3
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	1c5a      	adds	r2, r3, #1
 8005cca:	617a      	str	r2, [r7, #20]
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f002 fb85 	bl	80083e4 <ff_wtoupper>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	429c      	cmp	r4, r3
 8005cde:	d001      	beq.n	8005ce4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	e022      	b.n	8005d2a <cmp_lfn+0xd2>
			}
			wc = uc;
 8005ce4:	89bb      	ldrh	r3, [r7, #12]
 8005ce6:	81fb      	strh	r3, [r7, #14]
 8005ce8:	e006      	b.n	8005cf8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005cea:	89bb      	ldrh	r3, [r7, #12]
 8005cec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d001      	beq.n	8005cf8 <cmp_lfn+0xa0>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	e018      	b.n	8005d2a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	613b      	str	r3, [r7, #16]
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	2b0c      	cmp	r3, #12
 8005d02:	d9c8      	bls.n	8005c96 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00b      	beq.n	8005d28 <cmp_lfn+0xd0>
 8005d10:	89fb      	ldrh	r3, [r7, #14]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d008      	beq.n	8005d28 <cmp_lfn+0xd0>
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	881b      	ldrh	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d001      	beq.n	8005d28 <cmp_lfn+0xd0>
 8005d24:	2300      	movs	r3, #0
 8005d26:	e000      	b.n	8005d2a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005d28:	2301      	movs	r3, #1
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	371c      	adds	r7, #28
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd90      	pop	{r4, r7, pc}
 8005d32:	bf00      	nop
 8005d34:	0800d7d4 	.word	0x0800d7d4

08005d38 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	331a      	adds	r3, #26
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fe ff12 	bl	8004b70 <ld_word>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <pick_lfn+0x1e>
 8005d52:	2300      	movs	r3, #0
 8005d54:	e04d      	b.n	8005df2 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d5e:	1e5a      	subs	r2, r3, #1
 8005d60:	4613      	mov	r3, r2
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	4413      	add	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	81fb      	strh	r3, [r7, #14]
 8005d70:	2300      	movs	r3, #0
 8005d72:	613b      	str	r3, [r7, #16]
 8005d74:	e028      	b.n	8005dc8 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005d76:	4a21      	ldr	r2, [pc, #132]	@ (8005dfc <pick_lfn+0xc4>)
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	4413      	add	r3, r2
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7fe fef3 	bl	8004b70 <ld_word>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005d8e:	89fb      	ldrh	r3, [r7, #14]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00f      	beq.n	8005db4 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	2bfe      	cmp	r3, #254	@ 0xfe
 8005d98:	d901      	bls.n	8005d9e <pick_lfn+0x66>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	e029      	b.n	8005df2 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8005d9e:	89bb      	ldrh	r3, [r7, #12]
 8005da0:	81fb      	strh	r3, [r7, #14]
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	1c5a      	adds	r2, r3, #1
 8005da6:	617a      	str	r2, [r7, #20]
 8005da8:	005b      	lsls	r3, r3, #1
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	4413      	add	r3, r2
 8005dae:	89fa      	ldrh	r2, [r7, #14]
 8005db0:	801a      	strh	r2, [r3, #0]
 8005db2:	e006      	b.n	8005dc2 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005db4:	89bb      	ldrh	r3, [r7, #12]
 8005db6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d001      	beq.n	8005dc2 <pick_lfn+0x8a>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	e017      	b.n	8005df2 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	613b      	str	r3, [r7, #16]
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	2b0c      	cmp	r3, #12
 8005dcc:	d9d3      	bls.n	8005d76 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00a      	beq.n	8005df0 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	2bfe      	cmp	r3, #254	@ 0xfe
 8005dde:	d901      	bls.n	8005de4 <pick_lfn+0xac>
 8005de0:	2300      	movs	r3, #0
 8005de2:	e006      	b.n	8005df2 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	005b      	lsls	r3, r3, #1
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	4413      	add	r3, r2
 8005dec:	2200      	movs	r2, #0
 8005dee:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8005df0:	2301      	movs	r3, #1
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3718      	adds	r7, #24
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	0800d7d4 	.word	0x0800d7d4

08005e00 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b088      	sub	sp, #32
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	460b      	mov	r3, r1
 8005e10:	71fb      	strb	r3, [r7, #7]
 8005e12:	4613      	mov	r3, r2
 8005e14:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	330d      	adds	r3, #13
 8005e1a:	79ba      	ldrb	r2, [r7, #6]
 8005e1c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	330b      	adds	r3, #11
 8005e22:	220f      	movs	r2, #15
 8005e24:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	330c      	adds	r3, #12
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	331a      	adds	r3, #26
 8005e32:	2100      	movs	r1, #0
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7fe fed6 	bl	8004be6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005e3a:	79fb      	ldrb	r3, [r7, #7]
 8005e3c:	1e5a      	subs	r2, r3, #1
 8005e3e:	4613      	mov	r3, r2
 8005e40:	005b      	lsls	r3, r3, #1
 8005e42:	4413      	add	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	82fb      	strh	r3, [r7, #22]
 8005e4e:	2300      	movs	r3, #0
 8005e50:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005e52:	8afb      	ldrh	r3, [r7, #22]
 8005e54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d007      	beq.n	8005e6c <put_lfn+0x6c>
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	1c5a      	adds	r2, r3, #1
 8005e60:	61fa      	str	r2, [r7, #28]
 8005e62:	005b      	lsls	r3, r3, #1
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	4413      	add	r3, r2
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005e6c:	4a17      	ldr	r2, [pc, #92]	@ (8005ecc <put_lfn+0xcc>)
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	4413      	add	r3, r2
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	461a      	mov	r2, r3
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	4413      	add	r3, r2
 8005e7a:	8afa      	ldrh	r2, [r7, #22]
 8005e7c:	4611      	mov	r1, r2
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fe feb1 	bl	8004be6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005e84:	8afb      	ldrh	r3, [r7, #22]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d102      	bne.n	8005e90 <put_lfn+0x90>
 8005e8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005e8e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	3301      	adds	r3, #1
 8005e94:	61bb      	str	r3, [r7, #24]
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	2b0c      	cmp	r3, #12
 8005e9a:	d9da      	bls.n	8005e52 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005e9c:	8afb      	ldrh	r3, [r7, #22]
 8005e9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d006      	beq.n	8005eb4 <put_lfn+0xb4>
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	005b      	lsls	r3, r3, #1
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	4413      	add	r3, r2
 8005eae:	881b      	ldrh	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d103      	bne.n	8005ebc <put_lfn+0xbc>
 8005eb4:	79fb      	ldrb	r3, [r7, #7]
 8005eb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005eba:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	79fa      	ldrb	r2, [r7, #7]
 8005ec0:	701a      	strb	r2, [r3, #0]
}
 8005ec2:	bf00      	nop
 8005ec4:	3720      	adds	r7, #32
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	0800d7d4 	.word	0x0800d7d4

08005ed0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b08c      	sub	sp, #48	@ 0x30
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
 8005edc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005ede:	220b      	movs	r2, #11
 8005ee0:	68b9      	ldr	r1, [r7, #8]
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f7fe fec6 	bl	8004c74 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2b05      	cmp	r3, #5
 8005eec:	d92b      	bls.n	8005f46 <gen_numname+0x76>
		sr = seq;
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005ef2:	e022      	b.n	8005f3a <gen_numname+0x6a>
			wc = *lfn++;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	1c9a      	adds	r2, r3, #2
 8005ef8:	607a      	str	r2, [r7, #4]
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8005efe:	2300      	movs	r3, #0
 8005f00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f02:	e017      	b.n	8005f34 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	005a      	lsls	r2, r3, #1
 8005f08:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	4413      	add	r3, r2
 8005f10:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005f12:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f14:	085b      	lsrs	r3, r3, #1
 8005f16:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d005      	beq.n	8005f2e <gen_numname+0x5e>
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8005f28:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8005f2c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f30:	3301      	adds	r3, #1
 8005f32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f36:	2b0f      	cmp	r3, #15
 8005f38:	d9e4      	bls.n	8005f04 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	881b      	ldrh	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1d8      	bne.n	8005ef4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005f46:	2307      	movs	r3, #7
 8005f48:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	f003 030f 	and.w	r3, r3, #15
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	3330      	adds	r3, #48	@ 0x30
 8005f56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8005f5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f5e:	2b39      	cmp	r3, #57	@ 0x39
 8005f60:	d904      	bls.n	8005f6c <gen_numname+0x9c>
 8005f62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f66:	3307      	adds	r3, #7
 8005f68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8005f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f6e:	1e5a      	subs	r2, r3, #1
 8005f70:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005f72:	3330      	adds	r3, #48	@ 0x30
 8005f74:	443b      	add	r3, r7
 8005f76:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005f7a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	091b      	lsrs	r3, r3, #4
 8005f82:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1df      	bne.n	8005f4a <gen_numname+0x7a>
	ns[i] = '~';
 8005f8a:	f107 0214 	add.w	r2, r7, #20
 8005f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f90:	4413      	add	r3, r2
 8005f92:	227e      	movs	r2, #126	@ 0x7e
 8005f94:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005f96:	2300      	movs	r3, #0
 8005f98:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f9a:	e002      	b.n	8005fa2 <gen_numname+0xd2>
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d205      	bcs.n	8005fb6 <gen_numname+0xe6>
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fae:	4413      	add	r3, r2
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	2b20      	cmp	r3, #32
 8005fb4:	d1f2      	bne.n	8005f9c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb8:	2b07      	cmp	r3, #7
 8005fba:	d807      	bhi.n	8005fcc <gen_numname+0xfc>
 8005fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fbe:	1c5a      	adds	r2, r3, #1
 8005fc0:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005fc2:	3330      	adds	r3, #48	@ 0x30
 8005fc4:	443b      	add	r3, r7
 8005fc6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005fca:	e000      	b.n	8005fce <gen_numname+0xfe>
 8005fcc:	2120      	movs	r1, #32
 8005fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd0:	1c5a      	adds	r2, r3, #1
 8005fd2:	627a      	str	r2, [r7, #36]	@ 0x24
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	460a      	mov	r2, r1
 8005fda:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fde:	2b07      	cmp	r3, #7
 8005fe0:	d9e9      	bls.n	8005fb6 <gen_numname+0xe6>
}
 8005fe2:	bf00      	nop
 8005fe4:	bf00      	nop
 8005fe6:	3730      	adds	r7, #48	@ 0x30
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005ff8:	230b      	movs	r3, #11
 8005ffa:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	0852      	lsrs	r2, r2, #1
 8006002:	01db      	lsls	r3, r3, #7
 8006004:	4313      	orrs	r3, r2
 8006006:	b2da      	uxtb	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	1c59      	adds	r1, r3, #1
 800600c:	6079      	str	r1, [r7, #4]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	4413      	add	r3, r2
 8006012:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	3b01      	subs	r3, #1
 8006018:	60bb      	str	r3, [r7, #8]
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1ed      	bne.n	8005ffc <sum_sfn+0x10>
	return sum;
 8006020:	7bfb      	ldrb	r3, [r7, #15]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b086      	sub	sp, #24
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8006038:	2304      	movs	r3, #4
 800603a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8006042:	23ff      	movs	r3, #255	@ 0xff
 8006044:	757b      	strb	r3, [r7, #21]
 8006046:	23ff      	movs	r3, #255	@ 0xff
 8006048:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800604a:	e081      	b.n	8006150 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	4619      	mov	r1, r3
 8006052:	6938      	ldr	r0, [r7, #16]
 8006054:	f7ff f83c 	bl	80050d0 <move_window>
 8006058:	4603      	mov	r3, r0
 800605a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800605c:	7dfb      	ldrb	r3, [r7, #23]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d17c      	bne.n	800615c <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800606a:	7dbb      	ldrb	r3, [r7, #22]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d102      	bne.n	8006076 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006070:	2304      	movs	r3, #4
 8006072:	75fb      	strb	r3, [r7, #23]
 8006074:	e077      	b.n	8006166 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	330b      	adds	r3, #11
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006082:	73fb      	strb	r3, [r7, #15]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	7bfa      	ldrb	r2, [r7, #15]
 8006088:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800608a:	7dbb      	ldrb	r3, [r7, #22]
 800608c:	2be5      	cmp	r3, #229	@ 0xe5
 800608e:	d00e      	beq.n	80060ae <dir_read+0x80>
 8006090:	7dbb      	ldrb	r3, [r7, #22]
 8006092:	2b2e      	cmp	r3, #46	@ 0x2e
 8006094:	d00b      	beq.n	80060ae <dir_read+0x80>
 8006096:	7bfb      	ldrb	r3, [r7, #15]
 8006098:	f023 0320 	bic.w	r3, r3, #32
 800609c:	2b08      	cmp	r3, #8
 800609e:	bf0c      	ite	eq
 80060a0:	2301      	moveq	r3, #1
 80060a2:	2300      	movne	r3, #0
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	461a      	mov	r2, r3
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d002      	beq.n	80060b4 <dir_read+0x86>
				ord = 0xFF;
 80060ae:	23ff      	movs	r3, #255	@ 0xff
 80060b0:	757b      	strb	r3, [r7, #21]
 80060b2:	e044      	b.n	800613e <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80060b4:	7bfb      	ldrb	r3, [r7, #15]
 80060b6:	2b0f      	cmp	r3, #15
 80060b8:	d12f      	bne.n	800611a <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80060ba:	7dbb      	ldrb	r3, [r7, #22]
 80060bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00d      	beq.n	80060e0 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a1b      	ldr	r3, [r3, #32]
 80060c8:	7b5b      	ldrb	r3, [r3, #13]
 80060ca:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80060cc:	7dbb      	ldrb	r3, [r7, #22]
 80060ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060d2:	75bb      	strb	r3, [r7, #22]
 80060d4:	7dbb      	ldrb	r3, [r7, #22]
 80060d6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	695a      	ldr	r2, [r3, #20]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80060e0:	7dba      	ldrb	r2, [r7, #22]
 80060e2:	7d7b      	ldrb	r3, [r7, #21]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d115      	bne.n	8006114 <dir_read+0xe6>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	330d      	adds	r3, #13
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	7d3a      	ldrb	r2, [r7, #20]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d10e      	bne.n	8006114 <dir_read+0xe6>
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	691a      	ldr	r2, [r3, #16]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	4619      	mov	r1, r3
 8006100:	4610      	mov	r0, r2
 8006102:	f7ff fe19 	bl	8005d38 <pick_lfn>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <dir_read+0xe6>
 800610c:	7d7b      	ldrb	r3, [r7, #21]
 800610e:	3b01      	subs	r3, #1
 8006110:	b2db      	uxtb	r3, r3
 8006112:	e000      	b.n	8006116 <dir_read+0xe8>
 8006114:	23ff      	movs	r3, #255	@ 0xff
 8006116:	757b      	strb	r3, [r7, #21]
 8006118:	e011      	b.n	800613e <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800611a:	7d7b      	ldrb	r3, [r7, #21]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d109      	bne.n	8006134 <dir_read+0x106>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	4618      	mov	r0, r3
 8006126:	f7ff ff61 	bl	8005fec <sum_sfn>
 800612a:	4603      	mov	r3, r0
 800612c:	461a      	mov	r2, r3
 800612e:	7d3b      	ldrb	r3, [r7, #20]
 8006130:	4293      	cmp	r3, r2
 8006132:	d015      	beq.n	8006160 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f04f 32ff 	mov.w	r2, #4294967295
 800613a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 800613c:	e010      	b.n	8006160 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800613e:	2100      	movs	r1, #0
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f7ff fc2d 	bl	80059a0 <dir_next>
 8006146:	4603      	mov	r3, r0
 8006148:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800614a:	7dfb      	ldrb	r3, [r7, #23]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d109      	bne.n	8006164 <dir_read+0x136>
	while (dp->sect) {
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	69db      	ldr	r3, [r3, #28]
 8006154:	2b00      	cmp	r3, #0
 8006156:	f47f af79 	bne.w	800604c <dir_read+0x1e>
 800615a:	e004      	b.n	8006166 <dir_read+0x138>
		if (res != FR_OK) break;
 800615c:	bf00      	nop
 800615e:	e002      	b.n	8006166 <dir_read+0x138>
					break;
 8006160:	bf00      	nop
 8006162:	e000      	b.n	8006166 <dir_read+0x138>
		if (res != FR_OK) break;
 8006164:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006166:	7dfb      	ldrb	r3, [r7, #23]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <dir_read+0x144>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	61da      	str	r2, [r3, #28]
	return res;
 8006172:	7dfb      	ldrb	r3, [r7, #23]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3718      	adds	r7, #24
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800618a:	2100      	movs	r1, #0
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7ff fb7e 	bl	800588e <dir_sdi>
 8006192:	4603      	mov	r3, r0
 8006194:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006196:	7dfb      	ldrb	r3, [r7, #23]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d001      	beq.n	80061a0 <dir_find+0x24>
 800619c:	7dfb      	ldrb	r3, [r7, #23]
 800619e:	e0a9      	b.n	80062f4 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80061a0:	23ff      	movs	r3, #255	@ 0xff
 80061a2:	753b      	strb	r3, [r7, #20]
 80061a4:	7d3b      	ldrb	r3, [r7, #20]
 80061a6:	757b      	strb	r3, [r7, #21]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f04f 32ff 	mov.w	r2, #4294967295
 80061ae:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	69db      	ldr	r3, [r3, #28]
 80061b4:	4619      	mov	r1, r3
 80061b6:	6938      	ldr	r0, [r7, #16]
 80061b8:	f7fe ff8a 	bl	80050d0 <move_window>
 80061bc:	4603      	mov	r3, r0
 80061be:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80061c0:	7dfb      	ldrb	r3, [r7, #23]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f040 8090 	bne.w	80062e8 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80061d0:	7dbb      	ldrb	r3, [r7, #22]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d102      	bne.n	80061dc <dir_find+0x60>
 80061d6:	2304      	movs	r3, #4
 80061d8:	75fb      	strb	r3, [r7, #23]
 80061da:	e08a      	b.n	80062f2 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	330b      	adds	r3, #11
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80061e8:	73fb      	strb	r3, [r7, #15]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	7bfa      	ldrb	r2, [r7, #15]
 80061ee:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80061f0:	7dbb      	ldrb	r3, [r7, #22]
 80061f2:	2be5      	cmp	r3, #229	@ 0xe5
 80061f4:	d007      	beq.n	8006206 <dir_find+0x8a>
 80061f6:	7bfb      	ldrb	r3, [r7, #15]
 80061f8:	f003 0308 	and.w	r3, r3, #8
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d009      	beq.n	8006214 <dir_find+0x98>
 8006200:	7bfb      	ldrb	r3, [r7, #15]
 8006202:	2b0f      	cmp	r3, #15
 8006204:	d006      	beq.n	8006214 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006206:	23ff      	movs	r3, #255	@ 0xff
 8006208:	757b      	strb	r3, [r7, #21]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f04f 32ff 	mov.w	r2, #4294967295
 8006210:	631a      	str	r2, [r3, #48]	@ 0x30
 8006212:	e05e      	b.n	80062d2 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006214:	7bfb      	ldrb	r3, [r7, #15]
 8006216:	2b0f      	cmp	r3, #15
 8006218:	d136      	bne.n	8006288 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006224:	2b00      	cmp	r3, #0
 8006226:	d154      	bne.n	80062d2 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006228:	7dbb      	ldrb	r3, [r7, #22]
 800622a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00d      	beq.n	800624e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	7b5b      	ldrb	r3, [r3, #13]
 8006238:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800623a:	7dbb      	ldrb	r3, [r7, #22]
 800623c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006240:	75bb      	strb	r3, [r7, #22]
 8006242:	7dbb      	ldrb	r3, [r7, #22]
 8006244:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	695a      	ldr	r2, [r3, #20]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800624e:	7dba      	ldrb	r2, [r7, #22]
 8006250:	7d7b      	ldrb	r3, [r7, #21]
 8006252:	429a      	cmp	r2, r3
 8006254:	d115      	bne.n	8006282 <dir_find+0x106>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	330d      	adds	r3, #13
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	7d3a      	ldrb	r2, [r7, #20]
 8006260:	429a      	cmp	r2, r3
 8006262:	d10e      	bne.n	8006282 <dir_find+0x106>
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	691a      	ldr	r2, [r3, #16]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a1b      	ldr	r3, [r3, #32]
 800626c:	4619      	mov	r1, r3
 800626e:	4610      	mov	r0, r2
 8006270:	f7ff fcf2 	bl	8005c58 <cmp_lfn>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <dir_find+0x106>
 800627a:	7d7b      	ldrb	r3, [r7, #21]
 800627c:	3b01      	subs	r3, #1
 800627e:	b2db      	uxtb	r3, r3
 8006280:	e000      	b.n	8006284 <dir_find+0x108>
 8006282:	23ff      	movs	r3, #255	@ 0xff
 8006284:	757b      	strb	r3, [r7, #21]
 8006286:	e024      	b.n	80062d2 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006288:	7d7b      	ldrb	r3, [r7, #21]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d109      	bne.n	80062a2 <dir_find+0x126>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	4618      	mov	r0, r3
 8006294:	f7ff feaa 	bl	8005fec <sum_sfn>
 8006298:	4603      	mov	r3, r0
 800629a:	461a      	mov	r2, r3
 800629c:	7d3b      	ldrb	r3, [r7, #20]
 800629e:	4293      	cmp	r3, r2
 80062a0:	d024      	beq.n	80062ec <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10a      	bne.n	80062c6 <dir_find+0x14a>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a18      	ldr	r0, [r3, #32]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	3324      	adds	r3, #36	@ 0x24
 80062b8:	220b      	movs	r2, #11
 80062ba:	4619      	mov	r1, r3
 80062bc:	f7fe fd16 	bl	8004cec <mem_cmp>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d014      	beq.n	80062f0 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80062c6:	23ff      	movs	r3, #255	@ 0xff
 80062c8:	757b      	strb	r3, [r7, #21]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f04f 32ff 	mov.w	r2, #4294967295
 80062d0:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80062d2:	2100      	movs	r1, #0
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f7ff fb63 	bl	80059a0 <dir_next>
 80062da:	4603      	mov	r3, r0
 80062dc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80062de:	7dfb      	ldrb	r3, [r7, #23]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f43f af65 	beq.w	80061b0 <dir_find+0x34>
 80062e6:	e004      	b.n	80062f2 <dir_find+0x176>
		if (res != FR_OK) break;
 80062e8:	bf00      	nop
 80062ea:	e002      	b.n	80062f2 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80062ec:	bf00      	nop
 80062ee:	e000      	b.n	80062f2 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80062f0:	bf00      	nop

	return res;
 80062f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3718      	adds	r7, #24
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b08c      	sub	sp, #48	@ 0x30
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006310:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <dir_register+0x20>
 8006318:	2306      	movs	r3, #6
 800631a:	e0e0      	b.n	80064de <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800631c:	2300      	movs	r3, #0
 800631e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006320:	e002      	b.n	8006328 <dir_register+0x2c>
 8006322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006324:	3301      	adds	r3, #1
 8006326:	627b      	str	r3, [r7, #36]	@ 0x24
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	691a      	ldr	r2, [r3, #16]
 800632c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632e:	005b      	lsls	r3, r3, #1
 8006330:	4413      	add	r3, r2
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1f4      	bne.n	8006322 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800633e:	f107 030c 	add.w	r3, r7, #12
 8006342:	220c      	movs	r2, #12
 8006344:	4618      	mov	r0, r3
 8006346:	f7fe fc95 	bl	8004c74 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800634a:	7dfb      	ldrb	r3, [r7, #23]
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	2b00      	cmp	r3, #0
 8006352:	d032      	beq.n	80063ba <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2240      	movs	r2, #64	@ 0x40
 8006358:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800635c:	2301      	movs	r3, #1
 800635e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006360:	e016      	b.n	8006390 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	691a      	ldr	r2, [r3, #16]
 800636c:	f107 010c 	add.w	r1, r7, #12
 8006370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006372:	f7ff fdad 	bl	8005ed0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7ff ff00 	bl	800617c <dir_find>
 800637c:	4603      	mov	r3, r0
 800637e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8006382:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006386:	2b00      	cmp	r3, #0
 8006388:	d106      	bne.n	8006398 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800638a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800638c:	3301      	adds	r3, #1
 800638e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006392:	2b63      	cmp	r3, #99	@ 0x63
 8006394:	d9e5      	bls.n	8006362 <dir_register+0x66>
 8006396:	e000      	b.n	800639a <dir_register+0x9e>
			if (res != FR_OK) break;
 8006398:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800639a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800639c:	2b64      	cmp	r3, #100	@ 0x64
 800639e:	d101      	bne.n	80063a4 <dir_register+0xa8>
 80063a0:	2307      	movs	r3, #7
 80063a2:	e09c      	b.n	80064de <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80063a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80063a8:	2b04      	cmp	r3, #4
 80063aa:	d002      	beq.n	80063b2 <dir_register+0xb6>
 80063ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80063b0:	e095      	b.n	80064de <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80063b2:	7dfa      	ldrb	r2, [r7, #23]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80063ba:	7dfb      	ldrb	r3, [r7, #23]
 80063bc:	f003 0302 	and.w	r3, r3, #2
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d007      	beq.n	80063d4 <dir_register+0xd8>
 80063c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c6:	330c      	adds	r3, #12
 80063c8:	4a47      	ldr	r2, [pc, #284]	@ (80064e8 <dir_register+0x1ec>)
 80063ca:	fba2 2303 	umull	r2, r3, r2, r3
 80063ce:	089b      	lsrs	r3, r3, #2
 80063d0:	3301      	adds	r3, #1
 80063d2:	e000      	b.n	80063d6 <dir_register+0xda>
 80063d4:	2301      	movs	r3, #1
 80063d6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80063d8:	6a39      	ldr	r1, [r7, #32]
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f7ff fbb6 	bl	8005b4c <dir_alloc>
 80063e0:	4603      	mov	r3, r0
 80063e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80063e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d148      	bne.n	8006480 <dir_register+0x184>
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	3b01      	subs	r3, #1
 80063f2:	623b      	str	r3, [r7, #32]
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d042      	beq.n	8006480 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	695a      	ldr	r2, [r3, #20]
 80063fe:	6a3b      	ldr	r3, [r7, #32]
 8006400:	015b      	lsls	r3, r3, #5
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	4619      	mov	r1, r3
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7ff fa41 	bl	800588e <dir_sdi>
 800640c:	4603      	mov	r3, r0
 800640e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8006412:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006416:	2b00      	cmp	r3, #0
 8006418:	d132      	bne.n	8006480 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	3324      	adds	r3, #36	@ 0x24
 800641e:	4618      	mov	r0, r3
 8006420:	f7ff fde4 	bl	8005fec <sum_sfn>
 8006424:	4603      	mov	r3, r0
 8006426:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	69db      	ldr	r3, [r3, #28]
 800642c:	4619      	mov	r1, r3
 800642e:	69f8      	ldr	r0, [r7, #28]
 8006430:	f7fe fe4e 	bl	80050d0 <move_window>
 8006434:	4603      	mov	r3, r0
 8006436:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800643a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800643e:	2b00      	cmp	r3, #0
 8006440:	d11d      	bne.n	800647e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	6918      	ldr	r0, [r3, #16]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a19      	ldr	r1, [r3, #32]
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	b2da      	uxtb	r2, r3
 800644e:	7efb      	ldrb	r3, [r7, #27]
 8006450:	f7ff fcd6 	bl	8005e00 <put_lfn>
				fs->wflag = 1;
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	2201      	movs	r2, #1
 8006458:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800645a:	2100      	movs	r1, #0
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7ff fa9f 	bl	80059a0 <dir_next>
 8006462:	4603      	mov	r3, r0
 8006464:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8006468:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800646c:	2b00      	cmp	r3, #0
 800646e:	d107      	bne.n	8006480 <dir_register+0x184>
 8006470:	6a3b      	ldr	r3, [r7, #32]
 8006472:	3b01      	subs	r3, #1
 8006474:	623b      	str	r3, [r7, #32]
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d1d5      	bne.n	8006428 <dir_register+0x12c>
 800647c:	e000      	b.n	8006480 <dir_register+0x184>
				if (res != FR_OK) break;
 800647e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006480:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006484:	2b00      	cmp	r3, #0
 8006486:	d128      	bne.n	80064da <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	69db      	ldr	r3, [r3, #28]
 800648c:	4619      	mov	r1, r3
 800648e:	69f8      	ldr	r0, [r7, #28]
 8006490:	f7fe fe1e 	bl	80050d0 <move_window>
 8006494:	4603      	mov	r3, r0
 8006496:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800649a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d11b      	bne.n	80064da <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	2220      	movs	r2, #32
 80064a8:	2100      	movs	r1, #0
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7fe fc03 	bl	8004cb6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a18      	ldr	r0, [r3, #32]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	3324      	adds	r3, #36	@ 0x24
 80064b8:	220b      	movs	r2, #11
 80064ba:	4619      	mov	r1, r3
 80064bc:	f7fe fbda 	bl	8004c74 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	330c      	adds	r3, #12
 80064cc:	f002 0218 	and.w	r2, r2, #24
 80064d0:	b2d2      	uxtb	r2, r2
 80064d2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	2201      	movs	r2, #1
 80064d8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80064da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3730      	adds	r7, #48	@ 0x30
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	4ec4ec4f 	.word	0x4ec4ec4f

080064ec <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b086      	sub	sp, #24
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006508:	d007      	beq.n	800651a <dir_remove+0x2e>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800650e:	4619      	mov	r1, r3
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f7ff f9bc 	bl	800588e <dir_sdi>
 8006516:	4603      	mov	r3, r0
 8006518:	e000      	b.n	800651c <dir_remove+0x30>
 800651a:	2300      	movs	r3, #0
 800651c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800651e:	7dfb      	ldrb	r3, [r7, #23]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d128      	bne.n	8006576 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	4619      	mov	r1, r3
 800652a:	6938      	ldr	r0, [r7, #16]
 800652c:	f7fe fdd0 	bl	80050d0 <move_window>
 8006530:	4603      	mov	r3, r0
 8006532:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006534:	7dfb      	ldrb	r3, [r7, #23]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d115      	bne.n	8006566 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	22e5      	movs	r2, #229	@ 0xe5
 8006540:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	2201      	movs	r2, #1
 8006546:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	429a      	cmp	r2, r3
 8006550:	d90b      	bls.n	800656a <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 8006552:	2100      	movs	r1, #0
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7ff fa23 	bl	80059a0 <dir_next>
 800655a:	4603      	mov	r3, r0
 800655c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800655e:	7dfb      	ldrb	r3, [r7, #23]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d0df      	beq.n	8006524 <dir_remove+0x38>
 8006564:	e002      	b.n	800656c <dir_remove+0x80>
			if (res != FR_OK) break;
 8006566:	bf00      	nop
 8006568:	e000      	b.n	800656c <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800656a:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800656c:	7dfb      	ldrb	r3, [r7, #23]
 800656e:	2b04      	cmp	r3, #4
 8006570:	d101      	bne.n	8006576 <dir_remove+0x8a>
 8006572:	2302      	movs	r3, #2
 8006574:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8006576:	7dfb      	ldrb	r3, [r7, #23]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3718      	adds	r7, #24
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b088      	sub	sp, #32
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	2200      	movs	r2, #0
 8006594:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	2b00      	cmp	r3, #0
 800659c:	f000 80ca 	beq.w	8006734 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a8:	d032      	beq.n	8006610 <get_fileinfo+0x90>
			i = j = 0;
 80065aa:	2300      	movs	r3, #0
 80065ac:	61bb      	str	r3, [r7, #24]
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80065b2:	e01b      	b.n	80065ec <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80065b4:	89fb      	ldrh	r3, [r7, #14]
 80065b6:	2100      	movs	r1, #0
 80065b8:	4618      	mov	r0, r3
 80065ba:	f001 fed7 	bl	800836c <ff_convert>
 80065be:	4603      	mov	r3, r0
 80065c0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 80065c2:	89fb      	ldrh	r3, [r7, #14]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d102      	bne.n	80065ce <get_fileinfo+0x4e>
 80065c8:	2300      	movs	r3, #0
 80065ca:	61fb      	str	r3, [r7, #28]
 80065cc:	e01a      	b.n	8006604 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	2bfe      	cmp	r3, #254	@ 0xfe
 80065d2:	d902      	bls.n	80065da <get_fileinfo+0x5a>
 80065d4:	2300      	movs	r3, #0
 80065d6:	61fb      	str	r3, [r7, #28]
 80065d8:	e014      	b.n	8006604 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	1c5a      	adds	r2, r3, #1
 80065de:	61fa      	str	r2, [r7, #28]
 80065e0:	89fa      	ldrh	r2, [r7, #14]
 80065e2:	b2d1      	uxtb	r1, r2
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	4413      	add	r3, r2
 80065e8:	460a      	mov	r2, r1
 80065ea:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	691a      	ldr	r2, [r3, #16]
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	1c59      	adds	r1, r3, #1
 80065f4:	61b9      	str	r1, [r7, #24]
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	4413      	add	r3, r2
 80065fa:	881b      	ldrh	r3, [r3, #0]
 80065fc:	81fb      	strh	r3, [r7, #14]
 80065fe:	89fb      	ldrh	r3, [r7, #14]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1d7      	bne.n	80065b4 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8006604:	683a      	ldr	r2, [r7, #0]
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	4413      	add	r3, r2
 800660a:	3316      	adds	r3, #22
 800660c:	2200      	movs	r2, #0
 800660e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8006610:	2300      	movs	r3, #0
 8006612:	61bb      	str	r3, [r7, #24]
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8006618:	683a      	ldr	r2, [r7, #0]
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	4413      	add	r3, r2
 800661e:	3316      	adds	r3, #22
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8006624:	e04d      	b.n	80066c2 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a1a      	ldr	r2, [r3, #32]
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	1c59      	adds	r1, r3, #1
 800662e:	61f9      	str	r1, [r7, #28]
 8006630:	4413      	add	r3, r2
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8006636:	7dfb      	ldrb	r3, [r7, #23]
 8006638:	2b20      	cmp	r3, #32
 800663a:	d041      	beq.n	80066c0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800663c:	7dfb      	ldrb	r3, [r7, #23]
 800663e:	2b05      	cmp	r3, #5
 8006640:	d101      	bne.n	8006646 <get_fileinfo+0xc6>
 8006642:	23e5      	movs	r3, #229	@ 0xe5
 8006644:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	2b09      	cmp	r3, #9
 800664a:	d10f      	bne.n	800666c <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 800664c:	89bb      	ldrh	r3, [r7, #12]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d105      	bne.n	800665e <get_fileinfo+0xde>
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	4413      	add	r3, r2
 8006658:	3316      	adds	r3, #22
 800665a:	222e      	movs	r2, #46	@ 0x2e
 800665c:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	61ba      	str	r2, [r7, #24]
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	4413      	add	r3, r2
 8006668:	222e      	movs	r2, #46	@ 0x2e
 800666a:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	4413      	add	r3, r2
 8006672:	3309      	adds	r3, #9
 8006674:	7dfa      	ldrb	r2, [r7, #23]
 8006676:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8006678:	89bb      	ldrh	r3, [r7, #12]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d11c      	bne.n	80066b8 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800667e:	7dfb      	ldrb	r3, [r7, #23]
 8006680:	2b40      	cmp	r3, #64	@ 0x40
 8006682:	d913      	bls.n	80066ac <get_fileinfo+0x12c>
 8006684:	7dfb      	ldrb	r3, [r7, #23]
 8006686:	2b5a      	cmp	r3, #90	@ 0x5a
 8006688:	d810      	bhi.n	80066ac <get_fileinfo+0x12c>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	330c      	adds	r3, #12
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	461a      	mov	r2, r3
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	2b08      	cmp	r3, #8
 8006698:	d901      	bls.n	800669e <get_fileinfo+0x11e>
 800669a:	2310      	movs	r3, #16
 800669c:	e000      	b.n	80066a0 <get_fileinfo+0x120>
 800669e:	2308      	movs	r3, #8
 80066a0:	4013      	ands	r3, r2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d002      	beq.n	80066ac <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 80066a6:	7dfb      	ldrb	r3, [r7, #23]
 80066a8:	3320      	adds	r3, #32
 80066aa:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	4413      	add	r3, r2
 80066b2:	3316      	adds	r3, #22
 80066b4:	7dfa      	ldrb	r2, [r7, #23]
 80066b6:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	3301      	adds	r3, #1
 80066bc:	61bb      	str	r3, [r7, #24]
 80066be:	e000      	b.n	80066c2 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 80066c0:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	2b0a      	cmp	r3, #10
 80066c6:	d9ae      	bls.n	8006626 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 80066c8:	89bb      	ldrh	r3, [r7, #12]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10d      	bne.n	80066ea <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	4413      	add	r3, r2
 80066d4:	3316      	adds	r3, #22
 80066d6:	2200      	movs	r2, #0
 80066d8:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	330c      	adds	r3, #12
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <get_fileinfo+0x16a>
 80066e6:	2300      	movs	r3, #0
 80066e8:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	4413      	add	r3, r2
 80066f0:	3309      	adds	r3, #9
 80066f2:	2200      	movs	r2, #0
 80066f4:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	7ada      	ldrb	r2, [r3, #11]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	331c      	adds	r3, #28
 8006706:	4618      	mov	r0, r3
 8006708:	f7fe fa4a 	bl	8004ba0 <ld_dword>
 800670c:	4602      	mov	r2, r0
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	3316      	adds	r3, #22
 8006718:	4618      	mov	r0, r3
 800671a:	f7fe fa41 	bl	8004ba0 <ld_dword>
 800671e:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	b29a      	uxth	r2, r3
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	80da      	strh	r2, [r3, #6]
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	0c1b      	lsrs	r3, r3, #16
 800672c:	b29a      	uxth	r2, r3
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	809a      	strh	r2, [r3, #4]
 8006732:	e000      	b.n	8006736 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006734:	bf00      	nop
}
 8006736:	3720      	adds	r7, #32
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b08a      	sub	sp, #40	@ 0x28
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	613b      	str	r3, [r7, #16]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	60fb      	str	r3, [r7, #12]
 8006754:	2300      	movs	r3, #0
 8006756:	617b      	str	r3, [r7, #20]
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	1c5a      	adds	r2, r3, #1
 8006760:	61ba      	str	r2, [r7, #24]
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	4413      	add	r3, r2
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800676a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800676c:	2b1f      	cmp	r3, #31
 800676e:	d940      	bls.n	80067f2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006770:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006772:	2b2f      	cmp	r3, #47	@ 0x2f
 8006774:	d006      	beq.n	8006784 <create_name+0x48>
 8006776:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006778:	2b5c      	cmp	r3, #92	@ 0x5c
 800677a:	d110      	bne.n	800679e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800677c:	e002      	b.n	8006784 <create_name+0x48>
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	3301      	adds	r3, #1
 8006782:	61bb      	str	r3, [r7, #24]
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	4413      	add	r3, r2
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	2b2f      	cmp	r3, #47	@ 0x2f
 800678e:	d0f6      	beq.n	800677e <create_name+0x42>
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	4413      	add	r3, r2
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	2b5c      	cmp	r3, #92	@ 0x5c
 800679a:	d0f0      	beq.n	800677e <create_name+0x42>
			break;
 800679c:	e02a      	b.n	80067f4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	2bfe      	cmp	r3, #254	@ 0xfe
 80067a2:	d901      	bls.n	80067a8 <create_name+0x6c>
 80067a4:	2306      	movs	r3, #6
 80067a6:	e17d      	b.n	8006aa4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80067a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80067ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80067b0:	2101      	movs	r1, #1
 80067b2:	4618      	mov	r0, r3
 80067b4:	f001 fdda 	bl	800836c <ff_convert>
 80067b8:	4603      	mov	r3, r0
 80067ba:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80067bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <create_name+0x8a>
 80067c2:	2306      	movs	r3, #6
 80067c4:	e16e      	b.n	8006aa4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80067c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80067c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80067ca:	d809      	bhi.n	80067e0 <create_name+0xa4>
 80067cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80067ce:	4619      	mov	r1, r3
 80067d0:	488d      	ldr	r0, [pc, #564]	@ (8006a08 <create_name+0x2cc>)
 80067d2:	f7fe fab2 	bl	8004d3a <chk_chr>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d001      	beq.n	80067e0 <create_name+0xa4>
 80067dc:	2306      	movs	r3, #6
 80067de:	e161      	b.n	8006aa4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	1c5a      	adds	r2, r3, #1
 80067e4:	617a      	str	r2, [r7, #20]
 80067e6:	005b      	lsls	r3, r3, #1
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	4413      	add	r3, r2
 80067ec:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80067ee:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80067f0:	e7b4      	b.n	800675c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80067f2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	441a      	add	r2, r3
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80067fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006800:	2b1f      	cmp	r3, #31
 8006802:	d801      	bhi.n	8006808 <create_name+0xcc>
 8006804:	2304      	movs	r3, #4
 8006806:	e000      	b.n	800680a <create_name+0xce>
 8006808:	2300      	movs	r3, #0
 800680a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800680e:	e011      	b.n	8006834 <create_name+0xf8>
		w = lfn[di - 1];
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006816:	3b01      	subs	r3, #1
 8006818:	005b      	lsls	r3, r3, #1
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	4413      	add	r3, r2
 800681e:	881b      	ldrh	r3, [r3, #0]
 8006820:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8006822:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006824:	2b20      	cmp	r3, #32
 8006826:	d002      	beq.n	800682e <create_name+0xf2>
 8006828:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800682a:	2b2e      	cmp	r3, #46	@ 0x2e
 800682c:	d106      	bne.n	800683c <create_name+0x100>
		di--;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	3b01      	subs	r3, #1
 8006832:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1ea      	bne.n	8006810 <create_name+0xd4>
 800683a:	e000      	b.n	800683e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800683c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	005b      	lsls	r3, r3, #1
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	4413      	add	r3, r2
 8006846:	2200      	movs	r2, #0
 8006848:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <create_name+0x118>
 8006850:	2306      	movs	r3, #6
 8006852:	e127      	b.n	8006aa4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	3324      	adds	r3, #36	@ 0x24
 8006858:	220b      	movs	r2, #11
 800685a:	2120      	movs	r1, #32
 800685c:	4618      	mov	r0, r3
 800685e:	f7fe fa2a 	bl	8004cb6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006862:	2300      	movs	r3, #0
 8006864:	61bb      	str	r3, [r7, #24]
 8006866:	e002      	b.n	800686e <create_name+0x132>
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	3301      	adds	r3, #1
 800686c:	61bb      	str	r3, [r7, #24]
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	005b      	lsls	r3, r3, #1
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	4413      	add	r3, r2
 8006876:	881b      	ldrh	r3, [r3, #0]
 8006878:	2b20      	cmp	r3, #32
 800687a:	d0f5      	beq.n	8006868 <create_name+0x12c>
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	4413      	add	r3, r2
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	2b2e      	cmp	r3, #46	@ 0x2e
 8006888:	d0ee      	beq.n	8006868 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d009      	beq.n	80068a4 <create_name+0x168>
 8006890:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006894:	f043 0303 	orr.w	r3, r3, #3
 8006898:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800689c:	e002      	b.n	80068a4 <create_name+0x168>
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	3b01      	subs	r3, #1
 80068a2:	617b      	str	r3, [r7, #20]
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d009      	beq.n	80068be <create_name+0x182>
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80068b0:	3b01      	subs	r3, #1
 80068b2:	005b      	lsls	r3, r3, #1
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	4413      	add	r3, r2
 80068b8:	881b      	ldrh	r3, [r3, #0]
 80068ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80068bc:	d1ef      	bne.n	800689e <create_name+0x162>

	i = b = 0; ni = 8;
 80068be:	2300      	movs	r3, #0
 80068c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80068c4:	2300      	movs	r3, #0
 80068c6:	623b      	str	r3, [r7, #32]
 80068c8:	2308      	movs	r3, #8
 80068ca:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	1c5a      	adds	r2, r3, #1
 80068d0:	61ba      	str	r2, [r7, #24]
 80068d2:	005b      	lsls	r3, r3, #1
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	4413      	add	r3, r2
 80068d8:	881b      	ldrh	r3, [r3, #0]
 80068da:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80068dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f000 8090 	beq.w	8006a04 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80068e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80068e6:	2b20      	cmp	r3, #32
 80068e8:	d006      	beq.n	80068f8 <create_name+0x1bc>
 80068ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80068ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80068ee:	d10a      	bne.n	8006906 <create_name+0x1ca>
 80068f0:	69ba      	ldr	r2, [r7, #24]
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d006      	beq.n	8006906 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80068f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80068fc:	f043 0303 	orr.w	r3, r3, #3
 8006900:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006904:	e07d      	b.n	8006a02 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006906:	6a3a      	ldr	r2, [r7, #32]
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	429a      	cmp	r2, r3
 800690c:	d203      	bcs.n	8006916 <create_name+0x1da>
 800690e:	69ba      	ldr	r2, [r7, #24]
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	429a      	cmp	r2, r3
 8006914:	d123      	bne.n	800695e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	2b0b      	cmp	r3, #11
 800691a:	d106      	bne.n	800692a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800691c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006920:	f043 0303 	orr.w	r3, r3, #3
 8006924:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006928:	e075      	b.n	8006a16 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800692a:	69ba      	ldr	r2, [r7, #24]
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	429a      	cmp	r2, r3
 8006930:	d005      	beq.n	800693e <create_name+0x202>
 8006932:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006936:	f043 0303 	orr.w	r3, r3, #3
 800693a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	429a      	cmp	r2, r3
 8006944:	d866      	bhi.n	8006a14 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	61bb      	str	r3, [r7, #24]
 800694a:	2308      	movs	r3, #8
 800694c:	623b      	str	r3, [r7, #32]
 800694e:	230b      	movs	r3, #11
 8006950:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006952:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800695c:	e051      	b.n	8006a02 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800695e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006960:	2b7f      	cmp	r3, #127	@ 0x7f
 8006962:	d914      	bls.n	800698e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006964:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006966:	2100      	movs	r1, #0
 8006968:	4618      	mov	r0, r3
 800696a:	f001 fcff 	bl	800836c <ff_convert>
 800696e:	4603      	mov	r3, r0
 8006970:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006972:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006974:	2b00      	cmp	r3, #0
 8006976:	d004      	beq.n	8006982 <create_name+0x246>
 8006978:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800697a:	3b80      	subs	r3, #128	@ 0x80
 800697c:	4a23      	ldr	r2, [pc, #140]	@ (8006a0c <create_name+0x2d0>)
 800697e:	5cd3      	ldrb	r3, [r2, r3]
 8006980:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006982:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006986:	f043 0302 	orr.w	r3, r3, #2
 800698a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800698e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006990:	2b00      	cmp	r3, #0
 8006992:	d007      	beq.n	80069a4 <create_name+0x268>
 8006994:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006996:	4619      	mov	r1, r3
 8006998:	481d      	ldr	r0, [pc, #116]	@ (8006a10 <create_name+0x2d4>)
 800699a:	f7fe f9ce 	bl	8004d3a <chk_chr>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d008      	beq.n	80069b6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80069a4:	235f      	movs	r3, #95	@ 0x5f
 80069a6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80069a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80069ac:	f043 0303 	orr.w	r3, r3, #3
 80069b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80069b4:	e01b      	b.n	80069ee <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80069b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80069b8:	2b40      	cmp	r3, #64	@ 0x40
 80069ba:	d909      	bls.n	80069d0 <create_name+0x294>
 80069bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80069be:	2b5a      	cmp	r3, #90	@ 0x5a
 80069c0:	d806      	bhi.n	80069d0 <create_name+0x294>
					b |= 2;
 80069c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80069c6:	f043 0302 	orr.w	r3, r3, #2
 80069ca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80069ce:	e00e      	b.n	80069ee <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80069d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80069d2:	2b60      	cmp	r3, #96	@ 0x60
 80069d4:	d90b      	bls.n	80069ee <create_name+0x2b2>
 80069d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80069d8:	2b7a      	cmp	r3, #122	@ 0x7a
 80069da:	d808      	bhi.n	80069ee <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80069dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80069e0:	f043 0301 	orr.w	r3, r3, #1
 80069e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80069e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80069ea:	3b20      	subs	r3, #32
 80069ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80069ee:	6a3b      	ldr	r3, [r7, #32]
 80069f0:	1c5a      	adds	r2, r3, #1
 80069f2:	623a      	str	r2, [r7, #32]
 80069f4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80069f6:	b2d1      	uxtb	r1, r2
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	4413      	add	r3, r2
 80069fc:	460a      	mov	r2, r1
 80069fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006a02:	e763      	b.n	80068cc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006a04:	bf00      	nop
 8006a06:	e006      	b.n	8006a16 <create_name+0x2da>
 8006a08:	0800cc0c 	.word	0x0800cc0c
 8006a0c:	0800d754 	.word	0x0800d754
 8006a10:	0800cc18 	.word	0x0800cc18
			if (si > di) break;			/* No extension */
 8006a14:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006a1c:	2be5      	cmp	r3, #229	@ 0xe5
 8006a1e:	d103      	bne.n	8006a28 <create_name+0x2ec>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2205      	movs	r2, #5
 8006a24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	2b08      	cmp	r3, #8
 8006a2c:	d104      	bne.n	8006a38 <create_name+0x2fc>
 8006a2e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006a38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006a3c:	f003 030c 	and.w	r3, r3, #12
 8006a40:	2b0c      	cmp	r3, #12
 8006a42:	d005      	beq.n	8006a50 <create_name+0x314>
 8006a44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006a48:	f003 0303 	and.w	r3, r3, #3
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d105      	bne.n	8006a5c <create_name+0x320>
 8006a50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a54:	f043 0302 	orr.w	r3, r3, #2
 8006a58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a60:	f003 0302 	and.w	r3, r3, #2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d117      	bne.n	8006a98 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006a68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006a6c:	f003 0303 	and.w	r3, r3, #3
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d105      	bne.n	8006a80 <create_name+0x344>
 8006a74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a78:	f043 0310 	orr.w	r3, r3, #16
 8006a7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006a80:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006a84:	f003 030c 	and.w	r3, r3, #12
 8006a88:	2b04      	cmp	r3, #4
 8006a8a:	d105      	bne.n	8006a98 <create_name+0x35c>
 8006a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a90:	f043 0308 	orr.w	r3, r3, #8
 8006a94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006a9e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8006aa2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3728      	adds	r7, #40	@ 0x28
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006ac0:	e002      	b.n	8006ac8 <follow_path+0x1c>
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	603b      	str	r3, [r7, #0]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	2b2f      	cmp	r3, #47	@ 0x2f
 8006ace:	d0f8      	beq.n	8006ac2 <follow_path+0x16>
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	2b5c      	cmp	r3, #92	@ 0x5c
 8006ad6:	d0f4      	beq.n	8006ac2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	2200      	movs	r2, #0
 8006adc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	2b1f      	cmp	r3, #31
 8006ae4:	d80a      	bhi.n	8006afc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2280      	movs	r2, #128	@ 0x80
 8006aea:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8006aee:	2100      	movs	r1, #0
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f7fe fecc 	bl	800588e <dir_sdi>
 8006af6:	4603      	mov	r3, r0
 8006af8:	75fb      	strb	r3, [r7, #23]
 8006afa:	e048      	b.n	8006b8e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006afc:	463b      	mov	r3, r7
 8006afe:	4619      	mov	r1, r3
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f7ff fe1b 	bl	800673c <create_name>
 8006b06:	4603      	mov	r3, r0
 8006b08:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006b0a:	7dfb      	ldrb	r3, [r7, #23]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d139      	bne.n	8006b84 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f7ff fb33 	bl	800617c <dir_find>
 8006b16:	4603      	mov	r3, r0
 8006b18:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006b20:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006b22:	7dfb      	ldrb	r3, [r7, #23]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00a      	beq.n	8006b3e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006b28:	7dfb      	ldrb	r3, [r7, #23]
 8006b2a:	2b04      	cmp	r3, #4
 8006b2c:	d12c      	bne.n	8006b88 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006b2e:	7afb      	ldrb	r3, [r7, #11]
 8006b30:	f003 0304 	and.w	r3, r3, #4
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d127      	bne.n	8006b88 <follow_path+0xdc>
 8006b38:	2305      	movs	r3, #5
 8006b3a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006b3c:	e024      	b.n	8006b88 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006b3e:	7afb      	ldrb	r3, [r7, #11]
 8006b40:	f003 0304 	and.w	r3, r3, #4
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d121      	bne.n	8006b8c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	799b      	ldrb	r3, [r3, #6]
 8006b4c:	f003 0310 	and.w	r3, r3, #16
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d102      	bne.n	8006b5a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006b54:	2305      	movs	r3, #5
 8006b56:	75fb      	strb	r3, [r7, #23]
 8006b58:	e019      	b.n	8006b8e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	695b      	ldr	r3, [r3, #20]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	8992      	ldrh	r2, [r2, #12]
 8006b68:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b6c:	fb00 f202 	mul.w	r2, r0, r2
 8006b70:	1a9b      	subs	r3, r3, r2
 8006b72:	440b      	add	r3, r1
 8006b74:	4619      	mov	r1, r3
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f7ff f82f 	bl	8005bda <ld_clust>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006b82:	e7bb      	b.n	8006afc <follow_path+0x50>
			if (res != FR_OK) break;
 8006b84:	bf00      	nop
 8006b86:	e002      	b.n	8006b8e <follow_path+0xe2>
				break;
 8006b88:	bf00      	nop
 8006b8a:	e000      	b.n	8006b8e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006b8c:	bf00      	nop
			}
		}
	}

	return res;
 8006b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3718      	adds	r7, #24
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b087      	sub	sp, #28
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ba4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d031      	beq.n	8006c12 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	617b      	str	r3, [r7, #20]
 8006bb4:	e002      	b.n	8006bbc <get_ldnumber+0x24>
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	617b      	str	r3, [r7, #20]
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	2b1f      	cmp	r3, #31
 8006bc2:	d903      	bls.n	8006bcc <get_ldnumber+0x34>
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	2b3a      	cmp	r3, #58	@ 0x3a
 8006bca:	d1f4      	bne.n	8006bb6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	2b3a      	cmp	r3, #58	@ 0x3a
 8006bd2:	d11c      	bne.n	8006c0e <get_ldnumber+0x76>
			tp = *path;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	1c5a      	adds	r2, r3, #1
 8006bde:	60fa      	str	r2, [r7, #12]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	3b30      	subs	r3, #48	@ 0x30
 8006be4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	2b09      	cmp	r3, #9
 8006bea:	d80e      	bhi.n	8006c0a <get_ldnumber+0x72>
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d10a      	bne.n	8006c0a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d107      	bne.n	8006c0a <get_ldnumber+0x72>
					vol = (int)i;
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	3301      	adds	r3, #1
 8006c02:	617b      	str	r3, [r7, #20]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	e002      	b.n	8006c14 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006c0e:	2300      	movs	r3, #0
 8006c10:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006c12:	693b      	ldr	r3, [r7, #16]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	371c      	adds	r7, #28
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	70da      	strb	r2, [r3, #3]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f04f 32ff 	mov.w	r2, #4294967295
 8006c36:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006c38:	6839      	ldr	r1, [r7, #0]
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7fe fa48 	bl	80050d0 <move_window>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d001      	beq.n	8006c4a <check_fs+0x2a>
 8006c46:	2304      	movs	r3, #4
 8006c48:	e038      	b.n	8006cbc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	3338      	adds	r3, #56	@ 0x38
 8006c4e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fd ff8c 	bl	8004b70 <ld_word>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d001      	beq.n	8006c68 <check_fs+0x48>
 8006c64:	2303      	movs	r3, #3
 8006c66:	e029      	b.n	8006cbc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006c6e:	2be9      	cmp	r3, #233	@ 0xe9
 8006c70:	d009      	beq.n	8006c86 <check_fs+0x66>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006c78:	2beb      	cmp	r3, #235	@ 0xeb
 8006c7a:	d11e      	bne.n	8006cba <check_fs+0x9a>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006c82:	2b90      	cmp	r3, #144	@ 0x90
 8006c84:	d119      	bne.n	8006cba <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	3338      	adds	r3, #56	@ 0x38
 8006c8a:	3336      	adds	r3, #54	@ 0x36
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7fd ff87 	bl	8004ba0 <ld_dword>
 8006c92:	4603      	mov	r3, r0
 8006c94:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006c98:	4a0a      	ldr	r2, [pc, #40]	@ (8006cc4 <check_fs+0xa4>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d101      	bne.n	8006ca2 <check_fs+0x82>
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	e00c      	b.n	8006cbc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	3338      	adds	r3, #56	@ 0x38
 8006ca6:	3352      	adds	r3, #82	@ 0x52
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7fd ff79 	bl	8004ba0 <ld_dword>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	4a05      	ldr	r2, [pc, #20]	@ (8006cc8 <check_fs+0xa8>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d101      	bne.n	8006cba <check_fs+0x9a>
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	e000      	b.n	8006cbc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006cba:	2302      	movs	r3, #2
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	00544146 	.word	0x00544146
 8006cc8:	33544146 	.word	0x33544146

08006ccc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b096      	sub	sp, #88	@ 0x58
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f7ff ff59 	bl	8006b98 <get_ldnumber>
 8006ce6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006ce8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	da01      	bge.n	8006cf2 <find_volume+0x26>
 8006cee:	230b      	movs	r3, #11
 8006cf0:	e265      	b.n	80071be <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006cf2:	4a9f      	ldr	r2, [pc, #636]	@ (8006f70 <find_volume+0x2a4>)
 8006cf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <find_volume+0x3a>
 8006d02:	230c      	movs	r3, #12
 8006d04:	e25b      	b.n	80071be <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d0a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006d0c:	79fb      	ldrb	r3, [r7, #7]
 8006d0e:	f023 0301 	bic.w	r3, r3, #1
 8006d12:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d01a      	beq.n	8006d52 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1e:	785b      	ldrb	r3, [r3, #1]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7fd fe87 	bl	8004a34 <disk_status>
 8006d26:	4603      	mov	r3, r0
 8006d28:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006d2c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10c      	bne.n	8006d52 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006d38:	79fb      	ldrb	r3, [r7, #7]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d007      	beq.n	8006d4e <find_volume+0x82>
 8006d3e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006d42:	f003 0304 	and.w	r3, r3, #4
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d001      	beq.n	8006d4e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006d4a:	230a      	movs	r3, #10
 8006d4c:	e237      	b.n	80071be <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8006d4e:	2300      	movs	r3, #0
 8006d50:	e235      	b.n	80071be <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d54:	2200      	movs	r2, #0
 8006d56:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006d58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d5a:	b2da      	uxtb	r2, r3
 8006d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d62:	785b      	ldrb	r3, [r3, #1]
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7fd fe7f 	bl	8004a68 <disk_initialize>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006d70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006d74:	f003 0301 	and.w	r3, r3, #1
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d001      	beq.n	8006d80 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e21e      	b.n	80071be <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006d80:	79fb      	ldrb	r3, [r7, #7]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d007      	beq.n	8006d96 <find_volume+0xca>
 8006d86:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006d8a:	f003 0304 	and.w	r3, r3, #4
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006d92:	230a      	movs	r3, #10
 8006d94:	e213      	b.n	80071be <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d98:	7858      	ldrb	r0, [r3, #1]
 8006d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d9c:	330c      	adds	r3, #12
 8006d9e:	461a      	mov	r2, r3
 8006da0:	2102      	movs	r1, #2
 8006da2:	f7fd fec7 	bl	8004b34 <disk_ioctl>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d001      	beq.n	8006db0 <find_volume+0xe4>
 8006dac:	2301      	movs	r3, #1
 8006dae:	e206      	b.n	80071be <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db2:	899b      	ldrh	r3, [r3, #12]
 8006db4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006db8:	d80d      	bhi.n	8006dd6 <find_volume+0x10a>
 8006dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dbc:	899b      	ldrh	r3, [r3, #12]
 8006dbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dc2:	d308      	bcc.n	8006dd6 <find_volume+0x10a>
 8006dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc6:	899b      	ldrh	r3, [r3, #12]
 8006dc8:	461a      	mov	r2, r3
 8006dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dcc:	899b      	ldrh	r3, [r3, #12]
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d001      	beq.n	8006dda <find_volume+0x10e>
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e1f1      	b.n	80071be <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006dde:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006de0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006de2:	f7ff ff1d 	bl	8006c20 <check_fs>
 8006de6:	4603      	mov	r3, r0
 8006de8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006dec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d149      	bne.n	8006e88 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006df4:	2300      	movs	r3, #0
 8006df6:	643b      	str	r3, [r7, #64]	@ 0x40
 8006df8:	e01e      	b.n	8006e38 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dfc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006e00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e02:	011b      	lsls	r3, r3, #4
 8006e04:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006e08:	4413      	add	r3, r2
 8006e0a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e0e:	3304      	adds	r3, #4
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d006      	beq.n	8006e24 <find_volume+0x158>
 8006e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e18:	3308      	adds	r3, #8
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7fd fec0 	bl	8004ba0 <ld_dword>
 8006e20:	4602      	mov	r2, r0
 8006e22:	e000      	b.n	8006e26 <find_volume+0x15a>
 8006e24:	2200      	movs	r2, #0
 8006e26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	3358      	adds	r3, #88	@ 0x58
 8006e2c:	443b      	add	r3, r7
 8006e2e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006e32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e34:	3301      	adds	r3, #1
 8006e36:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e3a:	2b03      	cmp	r3, #3
 8006e3c:	d9dd      	bls.n	8006dfa <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006e3e:	2300      	movs	r3, #0
 8006e40:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d002      	beq.n	8006e4e <find_volume+0x182>
 8006e48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006e4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	3358      	adds	r3, #88	@ 0x58
 8006e54:	443b      	add	r3, r7
 8006e56:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006e5a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006e5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d005      	beq.n	8006e6e <find_volume+0x1a2>
 8006e62:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006e64:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006e66:	f7ff fedb 	bl	8006c20 <check_fs>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	e000      	b.n	8006e70 <find_volume+0x1a4>
 8006e6e:	2303      	movs	r3, #3
 8006e70:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006e74:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d905      	bls.n	8006e88 <find_volume+0x1bc>
 8006e7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e7e:	3301      	adds	r3, #1
 8006e80:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e84:	2b03      	cmp	r3, #3
 8006e86:	d9e2      	bls.n	8006e4e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006e88:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006e8c:	2b04      	cmp	r3, #4
 8006e8e:	d101      	bne.n	8006e94 <find_volume+0x1c8>
 8006e90:	2301      	movs	r3, #1
 8006e92:	e194      	b.n	80071be <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006e94:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d901      	bls.n	8006ea0 <find_volume+0x1d4>
 8006e9c:	230d      	movs	r3, #13
 8006e9e:	e18e      	b.n	80071be <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea2:	3338      	adds	r3, #56	@ 0x38
 8006ea4:	330b      	adds	r3, #11
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7fd fe62 	bl	8004b70 <ld_word>
 8006eac:	4603      	mov	r3, r0
 8006eae:	461a      	mov	r2, r3
 8006eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb2:	899b      	ldrh	r3, [r3, #12]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d001      	beq.n	8006ebc <find_volume+0x1f0>
 8006eb8:	230d      	movs	r3, #13
 8006eba:	e180      	b.n	80071be <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ebe:	3338      	adds	r3, #56	@ 0x38
 8006ec0:	3316      	adds	r3, #22
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fd fe54 	bl	8004b70 <ld_word>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006ecc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d106      	bne.n	8006ee0 <find_volume+0x214>
 8006ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ed4:	3338      	adds	r3, #56	@ 0x38
 8006ed6:	3324      	adds	r3, #36	@ 0x24
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7fd fe61 	bl	8004ba0 <ld_dword>
 8006ede:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8006ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ee4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8006eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef2:	789b      	ldrb	r3, [r3, #2]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d005      	beq.n	8006f04 <find_volume+0x238>
 8006ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006efa:	789b      	ldrb	r3, [r3, #2]
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d001      	beq.n	8006f04 <find_volume+0x238>
 8006f00:	230d      	movs	r3, #13
 8006f02:	e15c      	b.n	80071be <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f06:	789b      	ldrb	r3, [r3, #2]
 8006f08:	461a      	mov	r2, r3
 8006f0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f0c:	fb02 f303 	mul.w	r3, r2, r3
 8006f10:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f18:	461a      	mov	r2, r3
 8006f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f20:	895b      	ldrh	r3, [r3, #10]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d008      	beq.n	8006f38 <find_volume+0x26c>
 8006f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f28:	895b      	ldrh	r3, [r3, #10]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f2e:	895b      	ldrh	r3, [r3, #10]
 8006f30:	3b01      	subs	r3, #1
 8006f32:	4013      	ands	r3, r2
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d001      	beq.n	8006f3c <find_volume+0x270>
 8006f38:	230d      	movs	r3, #13
 8006f3a:	e140      	b.n	80071be <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f3e:	3338      	adds	r3, #56	@ 0x38
 8006f40:	3311      	adds	r3, #17
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7fd fe14 	bl	8004b70 <ld_word>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f4e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f52:	891b      	ldrh	r3, [r3, #8]
 8006f54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f56:	8992      	ldrh	r2, [r2, #12]
 8006f58:	0952      	lsrs	r2, r2, #5
 8006f5a:	b292      	uxth	r2, r2
 8006f5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f60:	fb01 f202 	mul.w	r2, r1, r2
 8006f64:	1a9b      	subs	r3, r3, r2
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d003      	beq.n	8006f74 <find_volume+0x2a8>
 8006f6c:	230d      	movs	r3, #13
 8006f6e:	e126      	b.n	80071be <find_volume+0x4f2>
 8006f70:	20001388 	.word	0x20001388

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f76:	3338      	adds	r3, #56	@ 0x38
 8006f78:	3313      	adds	r3, #19
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fd fdf8 	bl	8004b70 <ld_word>
 8006f80:	4603      	mov	r3, r0
 8006f82:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006f84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d106      	bne.n	8006f98 <find_volume+0x2cc>
 8006f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f8c:	3338      	adds	r3, #56	@ 0x38
 8006f8e:	3320      	adds	r3, #32
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7fd fe05 	bl	8004ba0 <ld_dword>
 8006f96:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f9a:	3338      	adds	r3, #56	@ 0x38
 8006f9c:	330e      	adds	r3, #14
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7fd fde6 	bl	8004b70 <ld_word>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006fa8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <find_volume+0x2e6>
 8006fae:	230d      	movs	r3, #13
 8006fb0:	e105      	b.n	80071be <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006fb2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006fb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fb6:	4413      	add	r3, r2
 8006fb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006fba:	8911      	ldrh	r1, [r2, #8]
 8006fbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006fbe:	8992      	ldrh	r2, [r2, #12]
 8006fc0:	0952      	lsrs	r2, r2, #5
 8006fc2:	b292      	uxth	r2, r2
 8006fc4:	fbb1 f2f2 	udiv	r2, r1, r2
 8006fc8:	b292      	uxth	r2, r2
 8006fca:	4413      	add	r3, r2
 8006fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006fce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d201      	bcs.n	8006fda <find_volume+0x30e>
 8006fd6:	230d      	movs	r3, #13
 8006fd8:	e0f1      	b.n	80071be <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006fda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006fe2:	8952      	ldrh	r2, [r2, #10]
 8006fe4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fe8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d101      	bne.n	8006ff4 <find_volume+0x328>
 8006ff0:	230d      	movs	r3, #13
 8006ff2:	e0e4      	b.n	80071be <find_volume+0x4f2>
		fmt = FS_FAT32;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007000:	4293      	cmp	r3, r2
 8007002:	d802      	bhi.n	800700a <find_volume+0x33e>
 8007004:	2302      	movs	r3, #2
 8007006:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800700a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007010:	4293      	cmp	r3, r2
 8007012:	d802      	bhi.n	800701a <find_volume+0x34e>
 8007014:	2301      	movs	r3, #1
 8007016:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800701a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701c:	1c9a      	adds	r2, r3, #2
 800701e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007020:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007024:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007026:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007028:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800702a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800702c:	441a      	add	r2, r3
 800702e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007030:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007032:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007036:	441a      	add	r2, r3
 8007038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800703a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800703c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007040:	2b03      	cmp	r3, #3
 8007042:	d11e      	bne.n	8007082 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007046:	3338      	adds	r3, #56	@ 0x38
 8007048:	332a      	adds	r3, #42	@ 0x2a
 800704a:	4618      	mov	r0, r3
 800704c:	f7fd fd90 	bl	8004b70 <ld_word>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <find_volume+0x38e>
 8007056:	230d      	movs	r3, #13
 8007058:	e0b1      	b.n	80071be <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800705a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800705c:	891b      	ldrh	r3, [r3, #8]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d001      	beq.n	8007066 <find_volume+0x39a>
 8007062:	230d      	movs	r3, #13
 8007064:	e0ab      	b.n	80071be <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007068:	3338      	adds	r3, #56	@ 0x38
 800706a:	332c      	adds	r3, #44	@ 0x2c
 800706c:	4618      	mov	r0, r3
 800706e:	f7fd fd97 	bl	8004ba0 <ld_dword>
 8007072:	4602      	mov	r2, r0
 8007074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007076:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800707a:	69db      	ldr	r3, [r3, #28]
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007080:	e01f      	b.n	80070c2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007084:	891b      	ldrh	r3, [r3, #8]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d101      	bne.n	800708e <find_volume+0x3c2>
 800708a:	230d      	movs	r3, #13
 800708c:	e097      	b.n	80071be <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800708e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007090:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007092:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007094:	441a      	add	r2, r3
 8007096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007098:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800709a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d103      	bne.n	80070aa <find_volume+0x3de>
 80070a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a4:	69db      	ldr	r3, [r3, #28]
 80070a6:	005b      	lsls	r3, r3, #1
 80070a8:	e00a      	b.n	80070c0 <find_volume+0x3f4>
 80070aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ac:	69da      	ldr	r2, [r3, #28]
 80070ae:	4613      	mov	r3, r2
 80070b0:	005b      	lsls	r3, r3, #1
 80070b2:	4413      	add	r3, r2
 80070b4:	085a      	lsrs	r2, r3, #1
 80070b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070b8:	69db      	ldr	r3, [r3, #28]
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80070c0:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80070c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c4:	6a1a      	ldr	r2, [r3, #32]
 80070c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c8:	899b      	ldrh	r3, [r3, #12]
 80070ca:	4619      	mov	r1, r3
 80070cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070ce:	440b      	add	r3, r1
 80070d0:	3b01      	subs	r3, #1
 80070d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80070d4:	8989      	ldrh	r1, [r1, #12]
 80070d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80070da:	429a      	cmp	r2, r3
 80070dc:	d201      	bcs.n	80070e2 <find_volume+0x416>
 80070de:	230d      	movs	r3, #13
 80070e0:	e06d      	b.n	80071be <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80070e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e4:	f04f 32ff 	mov.w	r2, #4294967295
 80070e8:	619a      	str	r2, [r3, #24]
 80070ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ec:	699a      	ldr	r2, [r3, #24]
 80070ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80070f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f4:	2280      	movs	r2, #128	@ 0x80
 80070f6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80070f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80070fc:	2b03      	cmp	r3, #3
 80070fe:	d149      	bne.n	8007194 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007102:	3338      	adds	r3, #56	@ 0x38
 8007104:	3330      	adds	r3, #48	@ 0x30
 8007106:	4618      	mov	r0, r3
 8007108:	f7fd fd32 	bl	8004b70 <ld_word>
 800710c:	4603      	mov	r3, r0
 800710e:	2b01      	cmp	r3, #1
 8007110:	d140      	bne.n	8007194 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007112:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007114:	3301      	adds	r3, #1
 8007116:	4619      	mov	r1, r3
 8007118:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800711a:	f7fd ffd9 	bl	80050d0 <move_window>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d137      	bne.n	8007194 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007126:	2200      	movs	r2, #0
 8007128:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800712a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800712c:	3338      	adds	r3, #56	@ 0x38
 800712e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007132:	4618      	mov	r0, r3
 8007134:	f7fd fd1c 	bl	8004b70 <ld_word>
 8007138:	4603      	mov	r3, r0
 800713a:	461a      	mov	r2, r3
 800713c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007140:	429a      	cmp	r2, r3
 8007142:	d127      	bne.n	8007194 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007146:	3338      	adds	r3, #56	@ 0x38
 8007148:	4618      	mov	r0, r3
 800714a:	f7fd fd29 	bl	8004ba0 <ld_dword>
 800714e:	4603      	mov	r3, r0
 8007150:	4a1d      	ldr	r2, [pc, #116]	@ (80071c8 <find_volume+0x4fc>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d11e      	bne.n	8007194 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007158:	3338      	adds	r3, #56	@ 0x38
 800715a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800715e:	4618      	mov	r0, r3
 8007160:	f7fd fd1e 	bl	8004ba0 <ld_dword>
 8007164:	4603      	mov	r3, r0
 8007166:	4a19      	ldr	r2, [pc, #100]	@ (80071cc <find_volume+0x500>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d113      	bne.n	8007194 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800716c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716e:	3338      	adds	r3, #56	@ 0x38
 8007170:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8007174:	4618      	mov	r0, r3
 8007176:	f7fd fd13 	bl	8004ba0 <ld_dword>
 800717a:	4602      	mov	r2, r0
 800717c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800717e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007182:	3338      	adds	r3, #56	@ 0x38
 8007184:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8007188:	4618      	mov	r0, r3
 800718a:	f7fd fd09 	bl	8004ba0 <ld_dword>
 800718e:	4602      	mov	r2, r0
 8007190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007192:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007196:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800719a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800719c:	4b0c      	ldr	r3, [pc, #48]	@ (80071d0 <find_volume+0x504>)
 800719e:	881b      	ldrh	r3, [r3, #0]
 80071a0:	3301      	adds	r3, #1
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	4b0a      	ldr	r3, [pc, #40]	@ (80071d0 <find_volume+0x504>)
 80071a6:	801a      	strh	r2, [r3, #0]
 80071a8:	4b09      	ldr	r3, [pc, #36]	@ (80071d0 <find_volume+0x504>)
 80071aa:	881a      	ldrh	r2, [r3, #0]
 80071ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ae:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80071b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b2:	4a08      	ldr	r2, [pc, #32]	@ (80071d4 <find_volume+0x508>)
 80071b4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80071b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80071b8:	f7fd ff22 	bl	8005000 <clear_lock>
#endif
	return FR_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3758      	adds	r7, #88	@ 0x58
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	41615252 	.word	0x41615252
 80071cc:	61417272 	.word	0x61417272
 80071d0:	2000138c 	.word	0x2000138c
 80071d4:	200013b0 	.word	0x200013b0

080071d8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80071e2:	2309      	movs	r3, #9
 80071e4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d01c      	beq.n	8007226 <validate+0x4e>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d018      	beq.n	8007226 <validate+0x4e>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d013      	beq.n	8007226 <validate+0x4e>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	889a      	ldrh	r2, [r3, #4]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	88db      	ldrh	r3, [r3, #6]
 8007208:	429a      	cmp	r2, r3
 800720a:	d10c      	bne.n	8007226 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	785b      	ldrb	r3, [r3, #1]
 8007212:	4618      	mov	r0, r3
 8007214:	f7fd fc0e 	bl	8004a34 <disk_status>
 8007218:	4603      	mov	r3, r0
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <validate+0x4e>
			res = FR_OK;
 8007222:	2300      	movs	r3, #0
 8007224:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007226:	7bfb      	ldrb	r3, [r7, #15]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d102      	bne.n	8007232 <validate+0x5a>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	e000      	b.n	8007234 <validate+0x5c>
 8007232:	2300      	movs	r3, #0
 8007234:	683a      	ldr	r2, [r7, #0]
 8007236:	6013      	str	r3, [r2, #0]
	return res;
 8007238:	7bfb      	ldrb	r3, [r7, #15]
}
 800723a:	4618      	mov	r0, r3
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
	...

08007244 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b088      	sub	sp, #32
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	4613      	mov	r3, r2
 8007250:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007256:	f107 0310 	add.w	r3, r7, #16
 800725a:	4618      	mov	r0, r3
 800725c:	f7ff fc9c 	bl	8006b98 <get_ldnumber>
 8007260:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	2b00      	cmp	r3, #0
 8007266:	da01      	bge.n	800726c <f_mount+0x28>
 8007268:	230b      	movs	r3, #11
 800726a:	e02b      	b.n	80072c4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800726c:	4a17      	ldr	r2, [pc, #92]	@ (80072cc <f_mount+0x88>)
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007274:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d005      	beq.n	8007288 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800727c:	69b8      	ldr	r0, [r7, #24]
 800727e:	f7fd febf 	bl	8005000 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	2200      	movs	r2, #0
 8007286:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d002      	beq.n	8007294 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	490d      	ldr	r1, [pc, #52]	@ (80072cc <f_mount+0x88>)
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d002      	beq.n	80072aa <f_mount+0x66>
 80072a4:	79fb      	ldrb	r3, [r7, #7]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d001      	beq.n	80072ae <f_mount+0x6a>
 80072aa:	2300      	movs	r3, #0
 80072ac:	e00a      	b.n	80072c4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80072ae:	f107 010c 	add.w	r1, r7, #12
 80072b2:	f107 0308 	add.w	r3, r7, #8
 80072b6:	2200      	movs	r2, #0
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7ff fd07 	bl	8006ccc <find_volume>
 80072be:	4603      	mov	r3, r0
 80072c0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80072c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3720      	adds	r7, #32
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	20001388 	.word	0x20001388

080072d0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b09a      	sub	sp, #104	@ 0x68
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	4613      	mov	r3, r2
 80072dc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d101      	bne.n	80072e8 <f_open+0x18>
 80072e4:	2309      	movs	r3, #9
 80072e6:	e1b7      	b.n	8007658 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80072e8:	79fb      	ldrb	r3, [r7, #7]
 80072ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072ee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80072f0:	79fa      	ldrb	r2, [r7, #7]
 80072f2:	f107 0114 	add.w	r1, r7, #20
 80072f6:	f107 0308 	add.w	r3, r7, #8
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7ff fce6 	bl	8006ccc <find_volume>
 8007300:	4603      	mov	r3, r0
 8007302:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8007306:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800730a:	2b00      	cmp	r3, #0
 800730c:	f040 819b 	bne.w	8007646 <f_open+0x376>
		dj.obj.fs = fs;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	f107 0318 	add.w	r3, r7, #24
 800731a:	4611      	mov	r1, r2
 800731c:	4618      	mov	r0, r3
 800731e:	f7ff fbc5 	bl	8006aac <follow_path>
 8007322:	4603      	mov	r3, r0
 8007324:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007328:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800732c:	2b00      	cmp	r3, #0
 800732e:	d118      	bne.n	8007362 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007330:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007334:	b25b      	sxtb	r3, r3
 8007336:	2b00      	cmp	r3, #0
 8007338:	da03      	bge.n	8007342 <f_open+0x72>
				res = FR_INVALID_NAME;
 800733a:	2306      	movs	r3, #6
 800733c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007340:	e00f      	b.n	8007362 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007342:	79fb      	ldrb	r3, [r7, #7]
 8007344:	2b01      	cmp	r3, #1
 8007346:	bf8c      	ite	hi
 8007348:	2301      	movhi	r3, #1
 800734a:	2300      	movls	r3, #0
 800734c:	b2db      	uxtb	r3, r3
 800734e:	461a      	mov	r2, r3
 8007350:	f107 0318 	add.w	r3, r7, #24
 8007354:	4611      	mov	r1, r2
 8007356:	4618      	mov	r0, r3
 8007358:	f7fd fd0a 	bl	8004d70 <chk_lock>
 800735c:	4603      	mov	r3, r0
 800735e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007362:	79fb      	ldrb	r3, [r7, #7]
 8007364:	f003 031c 	and.w	r3, r3, #28
 8007368:	2b00      	cmp	r3, #0
 800736a:	d07f      	beq.n	800746c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800736c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007370:	2b00      	cmp	r3, #0
 8007372:	d017      	beq.n	80073a4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007374:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007378:	2b04      	cmp	r3, #4
 800737a:	d10e      	bne.n	800739a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800737c:	f7fd fd54 	bl	8004e28 <enq_lock>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d006      	beq.n	8007394 <f_open+0xc4>
 8007386:	f107 0318 	add.w	r3, r7, #24
 800738a:	4618      	mov	r0, r3
 800738c:	f7fe ffb6 	bl	80062fc <dir_register>
 8007390:	4603      	mov	r3, r0
 8007392:	e000      	b.n	8007396 <f_open+0xc6>
 8007394:	2312      	movs	r3, #18
 8007396:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800739a:	79fb      	ldrb	r3, [r7, #7]
 800739c:	f043 0308 	orr.w	r3, r3, #8
 80073a0:	71fb      	strb	r3, [r7, #7]
 80073a2:	e010      	b.n	80073c6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80073a4:	7fbb      	ldrb	r3, [r7, #30]
 80073a6:	f003 0311 	and.w	r3, r3, #17
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d003      	beq.n	80073b6 <f_open+0xe6>
					res = FR_DENIED;
 80073ae:	2307      	movs	r3, #7
 80073b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80073b4:	e007      	b.n	80073c6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80073b6:	79fb      	ldrb	r3, [r7, #7]
 80073b8:	f003 0304 	and.w	r3, r3, #4
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d002      	beq.n	80073c6 <f_open+0xf6>
 80073c0:	2308      	movs	r3, #8
 80073c2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80073c6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d168      	bne.n	80074a0 <f_open+0x1d0>
 80073ce:	79fb      	ldrb	r3, [r7, #7]
 80073d0:	f003 0308 	and.w	r3, r3, #8
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d063      	beq.n	80074a0 <f_open+0x1d0>
				dw = GET_FATTIME();
 80073d8:	f7fc fdf8 	bl	8003fcc <get_fattime>
 80073dc:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80073de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073e0:	330e      	adds	r3, #14
 80073e2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7fd fc19 	bl	8004c1c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80073ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ec:	3316      	adds	r3, #22
 80073ee:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7fd fc13 	bl	8004c1c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80073f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f8:	330b      	adds	r3, #11
 80073fa:	2220      	movs	r2, #32
 80073fc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007402:	4611      	mov	r1, r2
 8007404:	4618      	mov	r0, r3
 8007406:	f7fe fbe8 	bl	8005bda <ld_clust>
 800740a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007410:	2200      	movs	r2, #0
 8007412:	4618      	mov	r0, r3
 8007414:	f7fe fc00 	bl	8005c18 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800741a:	331c      	adds	r3, #28
 800741c:	2100      	movs	r1, #0
 800741e:	4618      	mov	r0, r3
 8007420:	f7fd fbfc 	bl	8004c1c <st_dword>
					fs->wflag = 1;
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	2201      	movs	r2, #1
 8007428:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800742a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800742c:	2b00      	cmp	r3, #0
 800742e:	d037      	beq.n	80074a0 <f_open+0x1d0>
						dw = fs->winsect;
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007434:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8007436:	f107 0318 	add.w	r3, r7, #24
 800743a:	2200      	movs	r2, #0
 800743c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800743e:	4618      	mov	r0, r3
 8007440:	f7fe f8f0 	bl	8005624 <remove_chain>
 8007444:	4603      	mov	r3, r0
 8007446:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800744a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800744e:	2b00      	cmp	r3, #0
 8007450:	d126      	bne.n	80074a0 <f_open+0x1d0>
							res = move_window(fs, dw);
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007456:	4618      	mov	r0, r3
 8007458:	f7fd fe3a 	bl	80050d0 <move_window>
 800745c:	4603      	mov	r3, r0
 800745e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007466:	3a01      	subs	r2, #1
 8007468:	615a      	str	r2, [r3, #20]
 800746a:	e019      	b.n	80074a0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800746c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007470:	2b00      	cmp	r3, #0
 8007472:	d115      	bne.n	80074a0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007474:	7fbb      	ldrb	r3, [r7, #30]
 8007476:	f003 0310 	and.w	r3, r3, #16
 800747a:	2b00      	cmp	r3, #0
 800747c:	d003      	beq.n	8007486 <f_open+0x1b6>
					res = FR_NO_FILE;
 800747e:	2304      	movs	r3, #4
 8007480:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007484:	e00c      	b.n	80074a0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007486:	79fb      	ldrb	r3, [r7, #7]
 8007488:	f003 0302 	and.w	r3, r3, #2
 800748c:	2b00      	cmp	r3, #0
 800748e:	d007      	beq.n	80074a0 <f_open+0x1d0>
 8007490:	7fbb      	ldrb	r3, [r7, #30]
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	2b00      	cmp	r3, #0
 8007498:	d002      	beq.n	80074a0 <f_open+0x1d0>
						res = FR_DENIED;
 800749a:	2307      	movs	r3, #7
 800749c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80074a0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d126      	bne.n	80074f6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80074a8:	79fb      	ldrb	r3, [r7, #7]
 80074aa:	f003 0308 	and.w	r3, r3, #8
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d003      	beq.n	80074ba <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80074b2:	79fb      	ldrb	r3, [r7, #7]
 80074b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074b8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80074c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80074c8:	79fb      	ldrb	r3, [r7, #7]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	bf8c      	ite	hi
 80074ce:	2301      	movhi	r3, #1
 80074d0:	2300      	movls	r3, #0
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	461a      	mov	r2, r3
 80074d6:	f107 0318 	add.w	r3, r7, #24
 80074da:	4611      	mov	r1, r2
 80074dc:	4618      	mov	r0, r3
 80074de:	f7fd fcc5 	bl	8004e6c <inc_lock>
 80074e2:	4602      	mov	r2, r0
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d102      	bne.n	80074f6 <f_open+0x226>
 80074f0:	2302      	movs	r3, #2
 80074f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80074f6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f040 80a3 	bne.w	8007646 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007504:	4611      	mov	r1, r2
 8007506:	4618      	mov	r0, r3
 8007508:	f7fe fb67 	bl	8005bda <ld_clust>
 800750c:	4602      	mov	r2, r0
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007514:	331c      	adds	r3, #28
 8007516:	4618      	mov	r0, r3
 8007518:	f7fd fb42 	bl	8004ba0 <ld_dword>
 800751c:	4602      	mov	r2, r0
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	88da      	ldrh	r2, [r3, #6]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	79fa      	ldrb	r2, [r7, #7]
 800753a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2200      	movs	r2, #0
 8007540:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	3330      	adds	r3, #48	@ 0x30
 8007552:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007556:	2100      	movs	r1, #0
 8007558:	4618      	mov	r0, r3
 800755a:	f7fd fbac 	bl	8004cb6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800755e:	79fb      	ldrb	r3, [r7, #7]
 8007560:	f003 0320 	and.w	r3, r3, #32
 8007564:	2b00      	cmp	r3, #0
 8007566:	d06e      	beq.n	8007646 <f_open+0x376>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d06a      	beq.n	8007646 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	68da      	ldr	r2, [r3, #12]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	895b      	ldrh	r3, [r3, #10]
 800757c:	461a      	mov	r2, r3
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	899b      	ldrh	r3, [r3, #12]
 8007582:	fb02 f303 	mul.w	r3, r2, r3
 8007586:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007594:	e016      	b.n	80075c4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800759a:	4618      	mov	r0, r3
 800759c:	f7fd fe55 	bl	800524a <get_fat>
 80075a0:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80075a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d802      	bhi.n	80075ae <f_open+0x2de>
 80075a8:	2302      	movs	r3, #2
 80075aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80075ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80075b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b4:	d102      	bne.n	80075bc <f_open+0x2ec>
 80075b6:	2301      	movs	r3, #1
 80075b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80075bc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80075be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80075c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d103      	bne.n	80075d4 <f_open+0x304>
 80075cc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80075ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d8e0      	bhi.n	8007596 <f_open+0x2c6>
				}
				fp->clust = clst;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80075d8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80075da:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d131      	bne.n	8007646 <f_open+0x376>
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	899b      	ldrh	r3, [r3, #12]
 80075e6:	461a      	mov	r2, r3
 80075e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80075ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80075ee:	fb01 f202 	mul.w	r2, r1, r2
 80075f2:	1a9b      	subs	r3, r3, r2
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d026      	beq.n	8007646 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7fd fe05 	bl	800520c <clust2sect>
 8007602:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8007604:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007606:	2b00      	cmp	r3, #0
 8007608:	d103      	bne.n	8007612 <f_open+0x342>
						res = FR_INT_ERR;
 800760a:	2302      	movs	r3, #2
 800760c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007610:	e019      	b.n	8007646 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	899b      	ldrh	r3, [r3, #12]
 8007616:	461a      	mov	r2, r3
 8007618:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800761a:	fbb3 f2f2 	udiv	r2, r3, r2
 800761e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007620:	441a      	add	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	7858      	ldrb	r0, [r3, #1]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6a1a      	ldr	r2, [r3, #32]
 8007634:	2301      	movs	r3, #1
 8007636:	f7fd fa3d 	bl	8004ab4 <disk_read>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d002      	beq.n	8007646 <f_open+0x376>
 8007640:	2301      	movs	r3, #1
 8007642:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007646:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800764a:	2b00      	cmp	r3, #0
 800764c:	d002      	beq.n	8007654 <f_open+0x384>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007654:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8007658:	4618      	mov	r0, r3
 800765a:	3768      	adds	r7, #104	@ 0x68
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b08e      	sub	sp, #56	@ 0x38
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
 800766c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2200      	movs	r2, #0
 8007676:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f107 0214 	add.w	r2, r7, #20
 800767e:	4611      	mov	r1, r2
 8007680:	4618      	mov	r0, r3
 8007682:	f7ff fda9 	bl	80071d8 <validate>
 8007686:	4603      	mov	r3, r0
 8007688:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800768c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007690:	2b00      	cmp	r3, #0
 8007692:	d107      	bne.n	80076a4 <f_read+0x44>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	7d5b      	ldrb	r3, [r3, #21]
 8007698:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800769c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d002      	beq.n	80076aa <f_read+0x4a>
 80076a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80076a8:	e135      	b.n	8007916 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	7d1b      	ldrb	r3, [r3, #20]
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d101      	bne.n	80076ba <f_read+0x5a>
 80076b6:	2307      	movs	r3, #7
 80076b8:	e12d      	b.n	8007916 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	68da      	ldr	r2, [r3, #12]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	6a3b      	ldr	r3, [r7, #32]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	f240 811e 	bls.w	800790c <f_read+0x2ac>
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80076d4:	e11a      	b.n	800790c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	8992      	ldrh	r2, [r2, #12]
 80076de:	fbb3 f1f2 	udiv	r1, r3, r2
 80076e2:	fb01 f202 	mul.w	r2, r1, r2
 80076e6:	1a9b      	subs	r3, r3, r2
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f040 80d5 	bne.w	8007898 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	8992      	ldrh	r2, [r2, #12]
 80076f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	8952      	ldrh	r2, [r2, #10]
 80076fe:	3a01      	subs	r2, #1
 8007700:	4013      	ands	r3, r2
 8007702:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d12f      	bne.n	800776a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d103      	bne.n	800771a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	633b      	str	r3, [r7, #48]	@ 0x30
 8007718:	e013      	b.n	8007742 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800771e:	2b00      	cmp	r3, #0
 8007720:	d007      	beq.n	8007732 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	4619      	mov	r1, r3
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f7fe f878 	bl	800581e <clmt_clust>
 800772e:	6338      	str	r0, [r7, #48]	@ 0x30
 8007730:	e007      	b.n	8007742 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	69db      	ldr	r3, [r3, #28]
 8007738:	4619      	mov	r1, r3
 800773a:	4610      	mov	r0, r2
 800773c:	f7fd fd85 	bl	800524a <get_fat>
 8007740:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007744:	2b01      	cmp	r3, #1
 8007746:	d804      	bhi.n	8007752 <f_read+0xf2>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2202      	movs	r2, #2
 800774c:	755a      	strb	r2, [r3, #21]
 800774e:	2302      	movs	r3, #2
 8007750:	e0e1      	b.n	8007916 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007758:	d104      	bne.n	8007764 <f_read+0x104>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2201      	movs	r2, #1
 800775e:	755a      	strb	r2, [r3, #21]
 8007760:	2301      	movs	r3, #1
 8007762:	e0d8      	b.n	8007916 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007768:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	69db      	ldr	r3, [r3, #28]
 8007770:	4619      	mov	r1, r3
 8007772:	4610      	mov	r0, r2
 8007774:	f7fd fd4a 	bl	800520c <clust2sect>
 8007778:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d104      	bne.n	800778a <f_read+0x12a>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2202      	movs	r2, #2
 8007784:	755a      	strb	r2, [r3, #21]
 8007786:	2302      	movs	r3, #2
 8007788:	e0c5      	b.n	8007916 <f_read+0x2b6>
			sect += csect;
 800778a:	69ba      	ldr	r2, [r7, #24]
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	4413      	add	r3, r2
 8007790:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	899b      	ldrh	r3, [r3, #12]
 8007796:	461a      	mov	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	fbb3 f3f2 	udiv	r3, r3, r2
 800779e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80077a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d041      	beq.n	800782a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80077a6:	69fa      	ldr	r2, [r7, #28]
 80077a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077aa:	4413      	add	r3, r2
 80077ac:	697a      	ldr	r2, [r7, #20]
 80077ae:	8952      	ldrh	r2, [r2, #10]
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d905      	bls.n	80077c0 <f_read+0x160>
					cc = fs->csize - csect;
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	895b      	ldrh	r3, [r3, #10]
 80077b8:	461a      	mov	r2, r3
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	7858      	ldrb	r0, [r3, #1]
 80077c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c6:	69ba      	ldr	r2, [r7, #24]
 80077c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80077ca:	f7fd f973 	bl	8004ab4 <disk_read>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d004      	beq.n	80077de <f_read+0x17e>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2201      	movs	r2, #1
 80077d8:	755a      	strb	r2, [r3, #21]
 80077da:	2301      	movs	r3, #1
 80077dc:	e09b      	b.n	8007916 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	7d1b      	ldrb	r3, [r3, #20]
 80077e2:	b25b      	sxtb	r3, r3
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	da18      	bge.n	800781a <f_read+0x1ba>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6a1a      	ldr	r2, [r3, #32]
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d911      	bls.n	800781a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6a1a      	ldr	r2, [r3, #32]
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	8992      	ldrh	r2, [r2, #12]
 8007802:	fb02 f303 	mul.w	r3, r2, r3
 8007806:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007808:	18d0      	adds	r0, r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	899b      	ldrh	r3, [r3, #12]
 8007814:	461a      	mov	r2, r3
 8007816:	f7fd fa2d 	bl	8004c74 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	899b      	ldrh	r3, [r3, #12]
 800781e:	461a      	mov	r2, r3
 8007820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007822:	fb02 f303 	mul.w	r3, r2, r3
 8007826:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8007828:	e05c      	b.n	80078e4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	69ba      	ldr	r2, [r7, #24]
 8007830:	429a      	cmp	r2, r3
 8007832:	d02e      	beq.n	8007892 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	7d1b      	ldrb	r3, [r3, #20]
 8007838:	b25b      	sxtb	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	da18      	bge.n	8007870 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	7858      	ldrb	r0, [r3, #1]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6a1a      	ldr	r2, [r3, #32]
 800784c:	2301      	movs	r3, #1
 800784e:	f7fd f951 	bl	8004af4 <disk_write>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d004      	beq.n	8007862 <f_read+0x202>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2201      	movs	r2, #1
 800785c:	755a      	strb	r2, [r3, #21]
 800785e:	2301      	movs	r3, #1
 8007860:	e059      	b.n	8007916 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	7d1b      	ldrb	r3, [r3, #20]
 8007866:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800786a:	b2da      	uxtb	r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	7858      	ldrb	r0, [r3, #1]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800787a:	2301      	movs	r3, #1
 800787c:	69ba      	ldr	r2, [r7, #24]
 800787e:	f7fd f919 	bl	8004ab4 <disk_read>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d004      	beq.n	8007892 <f_read+0x232>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2201      	movs	r2, #1
 800788c:	755a      	strb	r2, [r3, #21]
 800788e:	2301      	movs	r3, #1
 8007890:	e041      	b.n	8007916 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	69ba      	ldr	r2, [r7, #24]
 8007896:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	899b      	ldrh	r3, [r3, #12]
 800789c:	4618      	mov	r0, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	699b      	ldr	r3, [r3, #24]
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	8992      	ldrh	r2, [r2, #12]
 80078a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80078aa:	fb01 f202 	mul.w	r2, r1, r2
 80078ae:	1a9b      	subs	r3, r3, r2
 80078b0:	1ac3      	subs	r3, r0, r3
 80078b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80078b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d901      	bls.n	80078c0 <f_read+0x260>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	697a      	ldr	r2, [r7, #20]
 80078cc:	8992      	ldrh	r2, [r2, #12]
 80078ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80078d2:	fb00 f202 	mul.w	r2, r0, r2
 80078d6:	1a9b      	subs	r3, r3, r2
 80078d8:	440b      	add	r3, r1
 80078da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078dc:	4619      	mov	r1, r3
 80078de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80078e0:	f7fd f9c8 	bl	8004c74 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80078e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078e8:	4413      	add	r3, r2
 80078ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	699a      	ldr	r2, [r3, #24]
 80078f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f2:	441a      	add	r2, r3
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	619a      	str	r2, [r3, #24]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078fe:	441a      	add	r2, r3
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	601a      	str	r2, [r3, #0]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	f47f aee1 	bne.w	80076d6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3738      	adds	r7, #56	@ 0x38
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b08c      	sub	sp, #48	@ 0x30
 8007922:	af00      	add	r7, sp, #0
 8007924:	60f8      	str	r0, [r7, #12]
 8007926:	60b9      	str	r1, [r7, #8]
 8007928:	607a      	str	r2, [r7, #4]
 800792a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	2200      	movs	r2, #0
 8007934:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f107 0210 	add.w	r2, r7, #16
 800793c:	4611      	mov	r1, r2
 800793e:	4618      	mov	r0, r3
 8007940:	f7ff fc4a 	bl	80071d8 <validate>
 8007944:	4603      	mov	r3, r0
 8007946:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800794a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800794e:	2b00      	cmp	r3, #0
 8007950:	d107      	bne.n	8007962 <f_write+0x44>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	7d5b      	ldrb	r3, [r3, #21]
 8007956:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800795a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800795e:	2b00      	cmp	r3, #0
 8007960:	d002      	beq.n	8007968 <f_write+0x4a>
 8007962:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007966:	e16a      	b.n	8007c3e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	7d1b      	ldrb	r3, [r3, #20]
 800796c:	f003 0302 	and.w	r3, r3, #2
 8007970:	2b00      	cmp	r3, #0
 8007972:	d101      	bne.n	8007978 <f_write+0x5a>
 8007974:	2307      	movs	r3, #7
 8007976:	e162      	b.n	8007c3e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	699a      	ldr	r2, [r3, #24]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	441a      	add	r2, r3
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	429a      	cmp	r2, r3
 8007986:	f080 814c 	bcs.w	8007c22 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	43db      	mvns	r3, r3
 8007990:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007992:	e146      	b.n	8007c22 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	693a      	ldr	r2, [r7, #16]
 800799a:	8992      	ldrh	r2, [r2, #12]
 800799c:	fbb3 f1f2 	udiv	r1, r3, r2
 80079a0:	fb01 f202 	mul.w	r2, r1, r2
 80079a4:	1a9b      	subs	r3, r3, r2
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f040 80f1 	bne.w	8007b8e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	8992      	ldrh	r2, [r2, #12]
 80079b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80079b8:	693a      	ldr	r2, [r7, #16]
 80079ba:	8952      	ldrh	r2, [r2, #10]
 80079bc:	3a01      	subs	r2, #1
 80079be:	4013      	ands	r3, r2
 80079c0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d143      	bne.n	8007a50 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d10c      	bne.n	80079ea <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80079d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d11a      	bne.n	8007a12 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2100      	movs	r1, #0
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fd fe84 	bl	80056ee <create_chain>
 80079e6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80079e8:	e013      	b.n	8007a12 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d007      	beq.n	8007a02 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	4619      	mov	r1, r3
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f7fd ff10 	bl	800581e <clmt_clust>
 80079fe:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007a00:	e007      	b.n	8007a12 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	69db      	ldr	r3, [r3, #28]
 8007a08:	4619      	mov	r1, r3
 8007a0a:	4610      	mov	r0, r2
 8007a0c:	f7fd fe6f 	bl	80056ee <create_chain>
 8007a10:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f000 8109 	beq.w	8007c2c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d104      	bne.n	8007a2a <f_write+0x10c>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2202      	movs	r2, #2
 8007a24:	755a      	strb	r2, [r3, #21]
 8007a26:	2302      	movs	r3, #2
 8007a28:	e109      	b.n	8007c3e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a30:	d104      	bne.n	8007a3c <f_write+0x11e>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2201      	movs	r2, #1
 8007a36:	755a      	strb	r2, [r3, #21]
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e100      	b.n	8007c3e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a40:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d102      	bne.n	8007a50 <f_write+0x132>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a4e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	7d1b      	ldrb	r3, [r3, #20]
 8007a54:	b25b      	sxtb	r3, r3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	da18      	bge.n	8007a8c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	7858      	ldrb	r0, [r3, #1]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6a1a      	ldr	r2, [r3, #32]
 8007a68:	2301      	movs	r3, #1
 8007a6a:	f7fd f843 	bl	8004af4 <disk_write>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d004      	beq.n	8007a7e <f_write+0x160>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2201      	movs	r2, #1
 8007a78:	755a      	strb	r2, [r3, #21]
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e0df      	b.n	8007c3e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	7d1b      	ldrb	r3, [r3, #20]
 8007a82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a86:	b2da      	uxtb	r2, r3
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	69db      	ldr	r3, [r3, #28]
 8007a92:	4619      	mov	r1, r3
 8007a94:	4610      	mov	r0, r2
 8007a96:	f7fd fbb9 	bl	800520c <clust2sect>
 8007a9a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d104      	bne.n	8007aac <f_write+0x18e>
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2202      	movs	r2, #2
 8007aa6:	755a      	strb	r2, [r3, #21]
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	e0c8      	b.n	8007c3e <f_write+0x320>
			sect += csect;
 8007aac:	697a      	ldr	r2, [r7, #20]
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	899b      	ldrh	r3, [r3, #12]
 8007ab8:	461a      	mov	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ac0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007ac2:	6a3b      	ldr	r3, [r7, #32]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d043      	beq.n	8007b50 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007ac8:	69ba      	ldr	r2, [r7, #24]
 8007aca:	6a3b      	ldr	r3, [r7, #32]
 8007acc:	4413      	add	r3, r2
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	8952      	ldrh	r2, [r2, #10]
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d905      	bls.n	8007ae2 <f_write+0x1c4>
					cc = fs->csize - csect;
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	895b      	ldrh	r3, [r3, #10]
 8007ada:	461a      	mov	r2, r3
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	7858      	ldrb	r0, [r3, #1]
 8007ae6:	6a3b      	ldr	r3, [r7, #32]
 8007ae8:	697a      	ldr	r2, [r7, #20]
 8007aea:	69f9      	ldr	r1, [r7, #28]
 8007aec:	f7fd f802 	bl	8004af4 <disk_write>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d004      	beq.n	8007b00 <f_write+0x1e2>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2201      	movs	r2, #1
 8007afa:	755a      	strb	r2, [r3, #21]
 8007afc:	2301      	movs	r3, #1
 8007afe:	e09e      	b.n	8007c3e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6a1a      	ldr	r2, [r3, #32]
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	6a3a      	ldr	r2, [r7, #32]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d918      	bls.n	8007b40 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6a1a      	ldr	r2, [r3, #32]
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	8992      	ldrh	r2, [r2, #12]
 8007b20:	fb02 f303 	mul.w	r3, r2, r3
 8007b24:	69fa      	ldr	r2, [r7, #28]
 8007b26:	18d1      	adds	r1, r2, r3
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	899b      	ldrh	r3, [r3, #12]
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	f7fd f8a1 	bl	8004c74 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	7d1b      	ldrb	r3, [r3, #20]
 8007b36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b3a:	b2da      	uxtb	r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	899b      	ldrh	r3, [r3, #12]
 8007b44:	461a      	mov	r2, r3
 8007b46:	6a3b      	ldr	r3, [r7, #32]
 8007b48:	fb02 f303 	mul.w	r3, r2, r3
 8007b4c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8007b4e:	e04b      	b.n	8007be8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6a1b      	ldr	r3, [r3, #32]
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d016      	beq.n	8007b88 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	699a      	ldr	r2, [r3, #24]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d210      	bcs.n	8007b88 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	7858      	ldrb	r0, [r3, #1]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007b70:	2301      	movs	r3, #1
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	f7fc ff9e 	bl	8004ab4 <disk_read>
 8007b78:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d004      	beq.n	8007b88 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2201      	movs	r2, #1
 8007b82:	755a      	strb	r2, [r3, #21]
 8007b84:	2301      	movs	r3, #1
 8007b86:	e05a      	b.n	8007c3e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	697a      	ldr	r2, [r7, #20]
 8007b8c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	899b      	ldrh	r3, [r3, #12]
 8007b92:	4618      	mov	r0, r3
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	693a      	ldr	r2, [r7, #16]
 8007b9a:	8992      	ldrh	r2, [r2, #12]
 8007b9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ba0:	fb01 f202 	mul.w	r2, r1, r2
 8007ba4:	1a9b      	subs	r3, r3, r2
 8007ba6:	1ac3      	subs	r3, r0, r3
 8007ba8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d901      	bls.n	8007bb6 <f_write+0x298>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	8992      	ldrh	r2, [r2, #12]
 8007bc4:	fbb3 f0f2 	udiv	r0, r3, r2
 8007bc8:	fb00 f202 	mul.w	r2, r0, r2
 8007bcc:	1a9b      	subs	r3, r3, r2
 8007bce:	440b      	add	r3, r1
 8007bd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bd2:	69f9      	ldr	r1, [r7, #28]
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7fd f84d 	bl	8004c74 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	7d1b      	ldrb	r3, [r3, #20]
 8007bde:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007be2:	b2da      	uxtb	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007be8:	69fa      	ldr	r2, [r7, #28]
 8007bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bec:	4413      	add	r3, r2
 8007bee:	61fb      	str	r3, [r7, #28]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	699a      	ldr	r2, [r3, #24]
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf6:	441a      	add	r2, r3
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	619a      	str	r2, [r3, #24]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	68da      	ldr	r2, [r3, #12]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	699b      	ldr	r3, [r3, #24]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	bf38      	it	cc
 8007c08:	461a      	movcc	r2, r3
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	60da      	str	r2, [r3, #12]
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c14:	441a      	add	r2, r3
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	601a      	str	r2, [r3, #0]
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f47f aeb5 	bne.w	8007994 <f_write+0x76>
 8007c2a:	e000      	b.n	8007c2e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007c2c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	7d1b      	ldrb	r3, [r3, #20]
 8007c32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c36:	b2da      	uxtb	r2, r3
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3730      	adds	r7, #48	@ 0x30
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b086      	sub	sp, #24
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f107 0208 	add.w	r2, r7, #8
 8007c54:	4611      	mov	r1, r2
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7ff fabe 	bl	80071d8 <validate>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007c60:	7dfb      	ldrb	r3, [r7, #23]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d168      	bne.n	8007d38 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	7d1b      	ldrb	r3, [r3, #20]
 8007c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d062      	beq.n	8007d38 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	7d1b      	ldrb	r3, [r3, #20]
 8007c76:	b25b      	sxtb	r3, r3
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	da15      	bge.n	8007ca8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	7858      	ldrb	r0, [r3, #1]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a1a      	ldr	r2, [r3, #32]
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	f7fc ff32 	bl	8004af4 <disk_write>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d001      	beq.n	8007c9a <f_sync+0x54>
 8007c96:	2301      	movs	r3, #1
 8007c98:	e04f      	b.n	8007d3a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	7d1b      	ldrb	r3, [r3, #20]
 8007c9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ca2:	b2da      	uxtb	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007ca8:	f7fc f990 	bl	8003fcc <get_fattime>
 8007cac:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007cae:	68ba      	ldr	r2, [r7, #8]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	4610      	mov	r0, r2
 8007cb8:	f7fd fa0a 	bl	80050d0 <move_window>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007cc0:	7dfb      	ldrb	r3, [r7, #23]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d138      	bne.n	8007d38 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cca:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	330b      	adds	r3, #11
 8007cd0:	781a      	ldrb	r2, [r3, #0]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	330b      	adds	r3, #11
 8007cd6:	f042 0220 	orr.w	r2, r2, #32
 8007cda:	b2d2      	uxtb	r2, r2
 8007cdc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6818      	ldr	r0, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	68f9      	ldr	r1, [r7, #12]
 8007cea:	f7fd ff95 	bl	8005c18 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f103 021c 	add.w	r2, r3, #28
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	f7fc ff8e 	bl	8004c1c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	3316      	adds	r3, #22
 8007d04:	6939      	ldr	r1, [r7, #16]
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fc ff88 	bl	8004c1c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	3312      	adds	r3, #18
 8007d10:	2100      	movs	r1, #0
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fc ff67 	bl	8004be6 <st_word>
					fs->wflag = 1;
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7fd fa03 	bl	800512c <sync_fs>
 8007d26:	4603      	mov	r3, r0
 8007d28:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	7d1b      	ldrb	r3, [r3, #20]
 8007d2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d32:	b2da      	uxtb	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3718      	adds	r7, #24
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b084      	sub	sp, #16
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7ff ff7b 	bl	8007c46 <f_sync>
 8007d50:	4603      	mov	r3, r0
 8007d52:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d118      	bne.n	8007d8c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f107 0208 	add.w	r2, r7, #8
 8007d60:	4611      	mov	r1, r2
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7ff fa38 	bl	80071d8 <validate>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007d6c:	7bfb      	ldrb	r3, [r7, #15]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10c      	bne.n	8007d8c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7fd f906 	bl	8004f88 <dec_lock>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007d80:	7bfb      	ldrb	r3, [r7, #15]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d102      	bne.n	8007d8c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b086      	sub	sp, #24
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
 8007d9e:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d101      	bne.n	8007daa <f_opendir+0x14>
 8007da6:	2309      	movs	r3, #9
 8007da8:	e064      	b.n	8007e74 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8007dae:	f107 010c 	add.w	r1, r7, #12
 8007db2:	463b      	mov	r3, r7
 8007db4:	2200      	movs	r2, #0
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fe ff88 	bl	8006ccc <find_volume>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007dc0:	7dfb      	ldrb	r3, [r7, #23]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d14f      	bne.n	8007e66 <f_opendir+0xd0>
		obj->fs = fs;
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	4619      	mov	r1, r3
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7fe fe6b 	bl	8006aac <follow_path>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8007dda:	7dfb      	ldrb	r3, [r7, #23]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d13d      	bne.n	8007e5c <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007de6:	b25b      	sxtb	r3, r3
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	db12      	blt.n	8007e12 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	799b      	ldrb	r3, [r3, #6]
 8007df0:	f003 0310 	and.w	r3, r3, #16
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00a      	beq.n	8007e0e <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	4619      	mov	r1, r3
 8007e00:	4610      	mov	r0, r2
 8007e02:	f7fd feea 	bl	8005bda <ld_clust>
 8007e06:	4602      	mov	r2, r0
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	609a      	str	r2, [r3, #8]
 8007e0c:	e001      	b.n	8007e12 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8007e0e:	2305      	movs	r3, #5
 8007e10:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8007e12:	7dfb      	ldrb	r3, [r7, #23]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d121      	bne.n	8007e5c <f_opendir+0xc6>
				obj->id = fs->id;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	88da      	ldrh	r2, [r3, #6]
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8007e20:	2100      	movs	r1, #0
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7fd fd33 	bl	800588e <dir_sdi>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8007e2c:	7dfb      	ldrb	r3, [r7, #23]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d114      	bne.n	8007e5c <f_opendir+0xc6>
					if (obj->sclust) {
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00d      	beq.n	8007e56 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f7fd f815 	bl	8004e6c <inc_lock>
 8007e42:	4602      	mov	r2, r0
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d105      	bne.n	8007e5c <f_opendir+0xc6>
 8007e50:	2312      	movs	r3, #18
 8007e52:	75fb      	strb	r3, [r7, #23]
 8007e54:	e002      	b.n	8007e5c <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8007e5c:	7dfb      	ldrb	r3, [r7, #23]
 8007e5e:	2b04      	cmp	r3, #4
 8007e60:	d101      	bne.n	8007e66 <f_opendir+0xd0>
 8007e62:	2305      	movs	r3, #5
 8007e64:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8007e66:	7dfb      	ldrb	r3, [r7, #23]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d002      	beq.n	8007e72 <f_opendir+0xdc>
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3718      	adds	r7, #24
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f107 0208 	add.w	r2, r7, #8
 8007e8a:	4611      	mov	r1, r2
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7ff f9a3 	bl	80071d8 <validate>
 8007e92:	4603      	mov	r3, r0
 8007e94:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007e96:	7bfb      	ldrb	r3, [r7, #15]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d110      	bne.n	8007ebe <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d006      	beq.n	8007eb2 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7fd f86d 	bl	8004f88 <dec_lock>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d102      	bne.n	8007ebe <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8007ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f107 0208 	add.w	r2, r7, #8
 8007ed8:	4611      	mov	r1, r2
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7ff f97c 	bl	80071d8 <validate>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d126      	bne.n	8007f38 <f_readdir+0x70>
		if (!fno) {
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d106      	bne.n	8007efe <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f7fd fccb 	bl	800588e <dir_sdi>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	73fb      	strb	r3, [r7, #15]
 8007efc:	e01c      	b.n	8007f38 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8007efe:	2100      	movs	r1, #0
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f7fe f894 	bl	800602e <dir_read>
 8007f06:	4603      	mov	r3, r0
 8007f08:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
 8007f0c:	2b04      	cmp	r3, #4
 8007f0e:	d101      	bne.n	8007f14 <f_readdir+0x4c>
 8007f10:	2300      	movs	r3, #0
 8007f12:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8007f14:	7bfb      	ldrb	r3, [r7, #15]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d10e      	bne.n	8007f38 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f7fe fb2f 	bl	8006580 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8007f22:	2100      	movs	r1, #0
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f7fd fd3b 	bl	80059a0 <dir_next>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8007f2e:	7bfb      	ldrb	r3, [r7, #15]
 8007f30:	2b04      	cmp	r3, #4
 8007f32:	d101      	bne.n	8007f38 <f_readdir+0x70>
 8007f34:	2300      	movs	r3, #0
 8007f36:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8007f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b0a0      	sub	sp, #128	@ 0x80
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8007f4e:	f107 010c 	add.w	r1, r7, #12
 8007f52:	1d3b      	adds	r3, r7, #4
 8007f54:	2202      	movs	r2, #2
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7fe feb8 	bl	8006ccc <find_volume>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 8007f66:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f040 808e 	bne.w	800808c <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8007f76:	4611      	mov	r1, r2
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7fe fd97 	bl	8006aac <follow_path>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8007f84:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d108      	bne.n	8007f9e <f_unlink+0x5c>
 8007f8c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8007f90:	2102      	movs	r1, #2
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fc feec 	bl	8004d70 <chk_lock>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8007f9e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d172      	bne.n	800808c <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8007fa6:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8007faa:	b25b      	sxtb	r3, r3
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	da03      	bge.n	8007fb8 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8007fb0:	2306      	movs	r3, #6
 8007fb2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8007fb6:	e008      	b.n	8007fca <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8007fb8:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8007fbc:	f003 0301 	and.w	r3, r3, #1
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d002      	beq.n	8007fca <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8007fc4:	2307      	movs	r3, #7
 8007fc6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 8007fca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d134      	bne.n	800803c <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007fd6:	4611      	mov	r1, r2
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7fd fdfe 	bl	8005bda <ld_clust>
 8007fde:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8007fe0:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8007fe4:	f003 0310 	and.w	r3, r3, #16
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d027      	beq.n	800803c <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8007ff0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ff2:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8007ff4:	f107 0310 	add.w	r3, r7, #16
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fd fc47 	bl	800588e <dir_sdi>
 8008000:	4603      	mov	r3, r0
 8008002:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 8008006:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800800a:	2b00      	cmp	r3, #0
 800800c:	d116      	bne.n	800803c <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800800e:	f107 0310 	add.w	r3, r7, #16
 8008012:	2100      	movs	r1, #0
 8008014:	4618      	mov	r0, r3
 8008016:	f7fe f80a 	bl	800602e <dir_read>
 800801a:	4603      	mov	r3, r0
 800801c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8008020:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8008024:	2b00      	cmp	r3, #0
 8008026:	d102      	bne.n	800802e <f_unlink+0xec>
 8008028:	2307      	movs	r3, #7
 800802a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800802e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8008032:	2b04      	cmp	r3, #4
 8008034:	d102      	bne.n	800803c <f_unlink+0xfa>
 8008036:	2300      	movs	r3, #0
 8008038:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 800803c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8008040:	2b00      	cmp	r3, #0
 8008042:	d123      	bne.n	800808c <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8008044:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8008048:	4618      	mov	r0, r3
 800804a:	f7fe fa4f 	bl	80064ec <dir_remove>
 800804e:	4603      	mov	r3, r0
 8008050:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8008054:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10c      	bne.n	8008076 <f_unlink+0x134>
 800805c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800805e:	2b00      	cmp	r3, #0
 8008060:	d009      	beq.n	8008076 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8008062:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8008066:	2200      	movs	r2, #0
 8008068:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800806a:	4618      	mov	r0, r3
 800806c:	f7fd fada 	bl	8005624 <remove_chain>
 8008070:	4603      	mov	r3, r0
 8008072:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8008076:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800807a:	2b00      	cmp	r3, #0
 800807c:	d106      	bne.n	800808c <f_unlink+0x14a>
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	4618      	mov	r0, r3
 8008082:	f7fd f853 	bl	800512c <sync_fs>
 8008086:	4603      	mov	r3, r0
 8008088:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800808c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8008090:	4618      	mov	r0, r3
 8008092:	3780      	adds	r7, #128	@ 0x80
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b098      	sub	sp, #96	@ 0x60
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80080a0:	f107 010c 	add.w	r1, r7, #12
 80080a4:	1d3b      	adds	r3, r7, #4
 80080a6:	2202      	movs	r2, #2
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7fe fe0f 	bl	8006ccc <find_volume>
 80080ae:	4603      	mov	r3, r0
 80080b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	dj.obj.fs = fs;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 80080b8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f040 80f2 	bne.w	80082a6 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	f107 0310 	add.w	r3, r7, #16
 80080c8:	4611      	mov	r1, r2
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7fe fcee 	bl	8006aac <follow_path>
 80080d0:	4603      	mov	r3, r0
 80080d2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80080d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d102      	bne.n	80080e4 <f_mkdir+0x4c>
 80080de:	2308      	movs	r3, #8
 80080e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80080e4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80080e8:	2b04      	cmp	r3, #4
 80080ea:	f040 80dc 	bne.w	80082a6 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80080ee:	f107 0310 	add.w	r3, r7, #16
 80080f2:	2100      	movs	r1, #0
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7fd fafa 	bl	80056ee <create_chain>
 80080fa:	64f8      	str	r0, [r7, #76]	@ 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	895b      	ldrh	r3, [r3, #10]
 8008100:	461a      	mov	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	899b      	ldrh	r3, [r3, #12]
 8008106:	fb02 f303 	mul.w	r3, r2, r3
 800810a:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 800810c:	2300      	movs	r3, #0
 800810e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8008112:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008114:	2b00      	cmp	r3, #0
 8008116:	d102      	bne.n	800811e <f_mkdir+0x86>
 8008118:	2307      	movs	r3, #7
 800811a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 800811e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008120:	2b01      	cmp	r3, #1
 8008122:	d102      	bne.n	800812a <f_mkdir+0x92>
 8008124:	2302      	movs	r3, #2
 8008126:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800812a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800812c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008130:	d102      	bne.n	8008138 <f_mkdir+0xa0>
 8008132:	2301      	movs	r3, #1
 8008134:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8008138:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800813c:	2b00      	cmp	r3, #0
 800813e:	d106      	bne.n	800814e <f_mkdir+0xb6>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	4618      	mov	r0, r3
 8008144:	f7fc ff80 	bl	8005048 <sync_window>
 8008148:	4603      	mov	r3, r0
 800814a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			tm = GET_FATTIME();
 800814e:	f7fb ff3d 	bl	8003fcc <get_fattime>
 8008152:	64b8      	str	r0, [r7, #72]	@ 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 8008154:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008158:	2b00      	cmp	r3, #0
 800815a:	d16c      	bne.n	8008236 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008160:	4618      	mov	r0, r3
 8008162:	f7fd f853 	bl	800520c <clust2sect>
 8008166:	6578      	str	r0, [r7, #84]	@ 0x54
				dir = fs->win;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	3338      	adds	r3, #56	@ 0x38
 800816c:	647b      	str	r3, [r7, #68]	@ 0x44
				mem_set(dir, 0, SS(fs));
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	899b      	ldrh	r3, [r3, #12]
 8008172:	461a      	mov	r2, r3
 8008174:	2100      	movs	r1, #0
 8008176:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8008178:	f7fc fd9d 	bl	8004cb6 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800817c:	220b      	movs	r2, #11
 800817e:	2120      	movs	r1, #32
 8008180:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8008182:	f7fc fd98 	bl	8004cb6 <mem_set>
					dir[DIR_Name] = '.';
 8008186:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008188:	222e      	movs	r2, #46	@ 0x2e
 800818a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800818c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800818e:	330b      	adds	r3, #11
 8008190:	2210      	movs	r2, #16
 8008192:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8008194:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008196:	3316      	adds	r3, #22
 8008198:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800819a:	4618      	mov	r0, r3
 800819c:	f7fc fd3e 	bl	8004c1c <st_dword>
					st_clust(fs, dir, dcl);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80081a4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7fd fd36 	bl	8005c18 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80081ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081ae:	3320      	adds	r3, #32
 80081b0:	2220      	movs	r2, #32
 80081b2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7fc fd5d 	bl	8004c74 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80081ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081bc:	3321      	adds	r3, #33	@ 0x21
 80081be:	222e      	movs	r2, #46	@ 0x2e
 80081c0:	701a      	strb	r2, [r3, #0]
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	653b      	str	r3, [r7, #80]	@ 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	2b03      	cmp	r3, #3
 80081cc:	d106      	bne.n	80081dc <f_mkdir+0x144>
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d101      	bne.n	80081dc <f_mkdir+0x144>
 80081d8:	2300      	movs	r3, #0
 80081da:	653b      	str	r3, [r7, #80]	@ 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081e0:	3320      	adds	r3, #32
 80081e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80081e4:	4619      	mov	r1, r3
 80081e6:	f7fd fd17 	bl	8005c18 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	895b      	ldrh	r3, [r3, #10]
 80081ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80081f0:	e01c      	b.n	800822c <f_mkdir+0x194>
					fs->winsect = dsc++;
 80081f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081f4:	1c5a      	adds	r2, r3, #1
 80081f6:	657a      	str	r2, [r7, #84]	@ 0x54
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	6353      	str	r3, [r2, #52]	@ 0x34
					fs->wflag = 1;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2201      	movs	r2, #1
 8008200:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	4618      	mov	r0, r3
 8008206:	f7fc ff1f 	bl	8005048 <sync_window>
 800820a:	4603      	mov	r3, r0
 800820c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (res != FR_OK) break;
 8008210:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008214:	2b00      	cmp	r3, #0
 8008216:	d10d      	bne.n	8008234 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	899b      	ldrh	r3, [r3, #12]
 800821c:	461a      	mov	r2, r3
 800821e:	2100      	movs	r1, #0
 8008220:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8008222:	f7fc fd48 	bl	8004cb6 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8008226:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008228:	3b01      	subs	r3, #1
 800822a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800822c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800822e:	2b00      	cmp	r3, #0
 8008230:	d1df      	bne.n	80081f2 <f_mkdir+0x15a>
 8008232:	e000      	b.n	8008236 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 8008234:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8008236:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800823a:	2b00      	cmp	r3, #0
 800823c:	d107      	bne.n	800824e <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800823e:	f107 0310 	add.w	r3, r7, #16
 8008242:	4618      	mov	r0, r3
 8008244:	f7fe f85a 	bl	80062fc <dir_register>
 8008248:	4603      	mov	r3, r0
 800824a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
			if (res == FR_OK) {
 800824e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008252:	2b00      	cmp	r3, #0
 8008254:	d120      	bne.n	8008298 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8008256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008258:	647b      	str	r3, [r7, #68]	@ 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800825a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800825c:	3316      	adds	r3, #22
 800825e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008260:	4618      	mov	r0, r3
 8008262:	f7fc fcdb 	bl	8004c1c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800826a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800826c:	4618      	mov	r0, r3
 800826e:	f7fd fcd3 	bl	8005c18 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8008272:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008274:	330b      	adds	r3, #11
 8008276:	2210      	movs	r2, #16
 8008278:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2201      	movs	r2, #1
 800827e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8008280:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10e      	bne.n	80082a6 <f_mkdir+0x20e>
					res = sync_fs(fs);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	4618      	mov	r0, r3
 800828c:	f7fc ff4e 	bl	800512c <sync_fs>
 8008290:	4603      	mov	r3, r0
 8008292:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008296:	e006      	b.n	80082a6 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8008298:	f107 0310 	add.w	r3, r7, #16
 800829c:	2200      	movs	r2, #0
 800829e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7fd f9bf 	bl	8005624 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80082a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3760      	adds	r7, #96	@ 0x60
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
	...

080082b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b087      	sub	sp, #28
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	4613      	mov	r3, r2
 80082c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80082c2:	2301      	movs	r3, #1
 80082c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80082c6:	2300      	movs	r3, #0
 80082c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80082ca:	4b1f      	ldr	r3, [pc, #124]	@ (8008348 <FATFS_LinkDriverEx+0x94>)
 80082cc:	7a5b      	ldrb	r3, [r3, #9]
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d131      	bne.n	8008338 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80082d4:	4b1c      	ldr	r3, [pc, #112]	@ (8008348 <FATFS_LinkDriverEx+0x94>)
 80082d6:	7a5b      	ldrb	r3, [r3, #9]
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	461a      	mov	r2, r3
 80082dc:	4b1a      	ldr	r3, [pc, #104]	@ (8008348 <FATFS_LinkDriverEx+0x94>)
 80082de:	2100      	movs	r1, #0
 80082e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80082e2:	4b19      	ldr	r3, [pc, #100]	@ (8008348 <FATFS_LinkDriverEx+0x94>)
 80082e4:	7a5b      	ldrb	r3, [r3, #9]
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	4a17      	ldr	r2, [pc, #92]	@ (8008348 <FATFS_LinkDriverEx+0x94>)
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	4413      	add	r3, r2
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80082f2:	4b15      	ldr	r3, [pc, #84]	@ (8008348 <FATFS_LinkDriverEx+0x94>)
 80082f4:	7a5b      	ldrb	r3, [r3, #9]
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	461a      	mov	r2, r3
 80082fa:	4b13      	ldr	r3, [pc, #76]	@ (8008348 <FATFS_LinkDriverEx+0x94>)
 80082fc:	4413      	add	r3, r2
 80082fe:	79fa      	ldrb	r2, [r7, #7]
 8008300:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008302:	4b11      	ldr	r3, [pc, #68]	@ (8008348 <FATFS_LinkDriverEx+0x94>)
 8008304:	7a5b      	ldrb	r3, [r3, #9]
 8008306:	b2db      	uxtb	r3, r3
 8008308:	1c5a      	adds	r2, r3, #1
 800830a:	b2d1      	uxtb	r1, r2
 800830c:	4a0e      	ldr	r2, [pc, #56]	@ (8008348 <FATFS_LinkDriverEx+0x94>)
 800830e:	7251      	strb	r1, [r2, #9]
 8008310:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008312:	7dbb      	ldrb	r3, [r7, #22]
 8008314:	3330      	adds	r3, #48	@ 0x30
 8008316:	b2da      	uxtb	r2, r3
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	3301      	adds	r3, #1
 8008320:	223a      	movs	r2, #58	@ 0x3a
 8008322:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	3302      	adds	r3, #2
 8008328:	222f      	movs	r2, #47	@ 0x2f
 800832a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	3303      	adds	r3, #3
 8008330:	2200      	movs	r2, #0
 8008332:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008334:	2300      	movs	r3, #0
 8008336:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008338:	7dfb      	ldrb	r3, [r7, #23]
}
 800833a:	4618      	mov	r0, r3
 800833c:	371c      	adds	r7, #28
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop
 8008348:	200015b0 	.word	0x200015b0

0800834c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008356:	2200      	movs	r2, #0
 8008358:	6839      	ldr	r1, [r7, #0]
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7ff ffaa 	bl	80082b4 <FATFS_LinkDriverEx>
 8008360:	4603      	mov	r3, r0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3708      	adds	r7, #8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
	...

0800836c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800836c:	b480      	push	{r7}
 800836e:	b085      	sub	sp, #20
 8008370:	af00      	add	r7, sp, #0
 8008372:	4603      	mov	r3, r0
 8008374:	6039      	str	r1, [r7, #0]
 8008376:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008378:	88fb      	ldrh	r3, [r7, #6]
 800837a:	2b7f      	cmp	r3, #127	@ 0x7f
 800837c:	d802      	bhi.n	8008384 <ff_convert+0x18>
		c = chr;
 800837e:	88fb      	ldrh	r3, [r7, #6]
 8008380:	81fb      	strh	r3, [r7, #14]
 8008382:	e025      	b.n	80083d0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00b      	beq.n	80083a2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800838a:	88fb      	ldrh	r3, [r7, #6]
 800838c:	2bff      	cmp	r3, #255	@ 0xff
 800838e:	d805      	bhi.n	800839c <ff_convert+0x30>
 8008390:	88fb      	ldrh	r3, [r7, #6]
 8008392:	3b80      	subs	r3, #128	@ 0x80
 8008394:	4a12      	ldr	r2, [pc, #72]	@ (80083e0 <ff_convert+0x74>)
 8008396:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800839a:	e000      	b.n	800839e <ff_convert+0x32>
 800839c:	2300      	movs	r3, #0
 800839e:	81fb      	strh	r3, [r7, #14]
 80083a0:	e016      	b.n	80083d0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80083a2:	2300      	movs	r3, #0
 80083a4:	81fb      	strh	r3, [r7, #14]
 80083a6:	e009      	b.n	80083bc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80083a8:	89fb      	ldrh	r3, [r7, #14]
 80083aa:	4a0d      	ldr	r2, [pc, #52]	@ (80083e0 <ff_convert+0x74>)
 80083ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083b0:	88fa      	ldrh	r2, [r7, #6]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d006      	beq.n	80083c4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80083b6:	89fb      	ldrh	r3, [r7, #14]
 80083b8:	3301      	adds	r3, #1
 80083ba:	81fb      	strh	r3, [r7, #14]
 80083bc:	89fb      	ldrh	r3, [r7, #14]
 80083be:	2b7f      	cmp	r3, #127	@ 0x7f
 80083c0:	d9f2      	bls.n	80083a8 <ff_convert+0x3c>
 80083c2:	e000      	b.n	80083c6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80083c4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80083c6:	89fb      	ldrh	r3, [r7, #14]
 80083c8:	3380      	adds	r3, #128	@ 0x80
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80083d0:	89fb      	ldrh	r3, [r7, #14]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3714      	adds	r7, #20
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	0800d7e4 	.word	0x0800d7e4

080083e4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b087      	sub	sp, #28
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	4603      	mov	r3, r0
 80083ec:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80083ee:	88fb      	ldrh	r3, [r7, #6]
 80083f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083f4:	d201      	bcs.n	80083fa <ff_wtoupper+0x16>
 80083f6:	4b3e      	ldr	r3, [pc, #248]	@ (80084f0 <ff_wtoupper+0x10c>)
 80083f8:	e000      	b.n	80083fc <ff_wtoupper+0x18>
 80083fa:	4b3e      	ldr	r3, [pc, #248]	@ (80084f4 <ff_wtoupper+0x110>)
 80083fc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	1c9a      	adds	r2, r3, #2
 8008402:	617a      	str	r2, [r7, #20]
 8008404:	881b      	ldrh	r3, [r3, #0]
 8008406:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008408:	8a7b      	ldrh	r3, [r7, #18]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d068      	beq.n	80084e0 <ff_wtoupper+0xfc>
 800840e:	88fa      	ldrh	r2, [r7, #6]
 8008410:	8a7b      	ldrh	r3, [r7, #18]
 8008412:	429a      	cmp	r2, r3
 8008414:	d364      	bcc.n	80084e0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	1c9a      	adds	r2, r3, #2
 800841a:	617a      	str	r2, [r7, #20]
 800841c:	881b      	ldrh	r3, [r3, #0]
 800841e:	823b      	strh	r3, [r7, #16]
 8008420:	8a3b      	ldrh	r3, [r7, #16]
 8008422:	0a1b      	lsrs	r3, r3, #8
 8008424:	81fb      	strh	r3, [r7, #14]
 8008426:	8a3b      	ldrh	r3, [r7, #16]
 8008428:	b2db      	uxtb	r3, r3
 800842a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800842c:	88fa      	ldrh	r2, [r7, #6]
 800842e:	8a79      	ldrh	r1, [r7, #18]
 8008430:	8a3b      	ldrh	r3, [r7, #16]
 8008432:	440b      	add	r3, r1
 8008434:	429a      	cmp	r2, r3
 8008436:	da49      	bge.n	80084cc <ff_wtoupper+0xe8>
			switch (cmd) {
 8008438:	89fb      	ldrh	r3, [r7, #14]
 800843a:	2b08      	cmp	r3, #8
 800843c:	d84f      	bhi.n	80084de <ff_wtoupper+0xfa>
 800843e:	a201      	add	r2, pc, #4	@ (adr r2, 8008444 <ff_wtoupper+0x60>)
 8008440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008444:	08008469 	.word	0x08008469
 8008448:	0800847b 	.word	0x0800847b
 800844c:	08008491 	.word	0x08008491
 8008450:	08008499 	.word	0x08008499
 8008454:	080084a1 	.word	0x080084a1
 8008458:	080084a9 	.word	0x080084a9
 800845c:	080084b1 	.word	0x080084b1
 8008460:	080084b9 	.word	0x080084b9
 8008464:	080084c1 	.word	0x080084c1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008468:	88fa      	ldrh	r2, [r7, #6]
 800846a:	8a7b      	ldrh	r3, [r7, #18]
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	005b      	lsls	r3, r3, #1
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	4413      	add	r3, r2
 8008474:	881b      	ldrh	r3, [r3, #0]
 8008476:	80fb      	strh	r3, [r7, #6]
 8008478:	e027      	b.n	80084ca <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800847a:	88fa      	ldrh	r2, [r7, #6]
 800847c:	8a7b      	ldrh	r3, [r7, #18]
 800847e:	1ad3      	subs	r3, r2, r3
 8008480:	b29b      	uxth	r3, r3
 8008482:	f003 0301 	and.w	r3, r3, #1
 8008486:	b29b      	uxth	r3, r3
 8008488:	88fa      	ldrh	r2, [r7, #6]
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	80fb      	strh	r3, [r7, #6]
 800848e:	e01c      	b.n	80084ca <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008490:	88fb      	ldrh	r3, [r7, #6]
 8008492:	3b10      	subs	r3, #16
 8008494:	80fb      	strh	r3, [r7, #6]
 8008496:	e018      	b.n	80084ca <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008498:	88fb      	ldrh	r3, [r7, #6]
 800849a:	3b20      	subs	r3, #32
 800849c:	80fb      	strh	r3, [r7, #6]
 800849e:	e014      	b.n	80084ca <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80084a0:	88fb      	ldrh	r3, [r7, #6]
 80084a2:	3b30      	subs	r3, #48	@ 0x30
 80084a4:	80fb      	strh	r3, [r7, #6]
 80084a6:	e010      	b.n	80084ca <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80084a8:	88fb      	ldrh	r3, [r7, #6]
 80084aa:	3b1a      	subs	r3, #26
 80084ac:	80fb      	strh	r3, [r7, #6]
 80084ae:	e00c      	b.n	80084ca <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80084b0:	88fb      	ldrh	r3, [r7, #6]
 80084b2:	3308      	adds	r3, #8
 80084b4:	80fb      	strh	r3, [r7, #6]
 80084b6:	e008      	b.n	80084ca <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80084b8:	88fb      	ldrh	r3, [r7, #6]
 80084ba:	3b50      	subs	r3, #80	@ 0x50
 80084bc:	80fb      	strh	r3, [r7, #6]
 80084be:	e004      	b.n	80084ca <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80084c0:	88fb      	ldrh	r3, [r7, #6]
 80084c2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80084c6:	80fb      	strh	r3, [r7, #6]
 80084c8:	bf00      	nop
			}
			break;
 80084ca:	e008      	b.n	80084de <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80084cc:	89fb      	ldrh	r3, [r7, #14]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d195      	bne.n	80083fe <ff_wtoupper+0x1a>
 80084d2:	8a3b      	ldrh	r3, [r7, #16]
 80084d4:	005b      	lsls	r3, r3, #1
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	4413      	add	r3, r2
 80084da:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80084dc:	e78f      	b.n	80083fe <ff_wtoupper+0x1a>
			break;
 80084de:	bf00      	nop
	}

	return chr;
 80084e0:	88fb      	ldrh	r3, [r7, #6]
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	371c      	adds	r7, #28
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	0800d8e4 	.word	0x0800d8e4
 80084f4:	0800dad8 	.word	0x0800dad8

080084f8 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8008500:	4b22      	ldr	r3, [pc, #136]	@ (800858c <WIZCHIP_READ+0x94>)
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	4798      	blx	r3
   WIZCHIP.CS._select();
 8008506:	4b21      	ldr	r3, [pc, #132]	@ (800858c <WIZCHIP_READ+0x94>)
 8008508:	695b      	ldr	r3, [r3, #20]
 800850a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800850c:	4b1f      	ldr	r3, [pc, #124]	@ (800858c <WIZCHIP_READ+0x94>)
 800850e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008510:	2b00      	cmp	r3, #0
 8008512:	d003      	beq.n	800851c <WIZCHIP_READ+0x24>
 8008514:	4b1d      	ldr	r3, [pc, #116]	@ (800858c <WIZCHIP_READ+0x94>)
 8008516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008518:	2b00      	cmp	r3, #0
 800851a:	d114      	bne.n	8008546 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800851c:	4b1b      	ldr	r3, [pc, #108]	@ (800858c <WIZCHIP_READ+0x94>)
 800851e:	6a1b      	ldr	r3, [r3, #32]
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	0c12      	lsrs	r2, r2, #16
 8008524:	b2d2      	uxtb	r2, r2
 8008526:	4610      	mov	r0, r2
 8008528:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800852a:	4b18      	ldr	r3, [pc, #96]	@ (800858c <WIZCHIP_READ+0x94>)
 800852c:	6a1b      	ldr	r3, [r3, #32]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	0a12      	lsrs	r2, r2, #8
 8008532:	b2d2      	uxtb	r2, r2
 8008534:	4610      	mov	r0, r2
 8008536:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8008538:	4b14      	ldr	r3, [pc, #80]	@ (800858c <WIZCHIP_READ+0x94>)
 800853a:	6a1b      	ldr	r3, [r3, #32]
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	b2d2      	uxtb	r2, r2
 8008540:	4610      	mov	r0, r2
 8008542:	4798      	blx	r3
 8008544:	e011      	b.n	800856a <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	0c1b      	lsrs	r3, r3, #16
 800854a:	b2db      	uxtb	r3, r3
 800854c:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	0a1b      	lsrs	r3, r3, #8
 8008552:	b2db      	uxtb	r3, r3
 8008554:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	b2db      	uxtb	r3, r3
 800855a:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800855c:	4b0b      	ldr	r3, [pc, #44]	@ (800858c <WIZCHIP_READ+0x94>)
 800855e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008560:	f107 020c 	add.w	r2, r7, #12
 8008564:	2103      	movs	r1, #3
 8008566:	4610      	mov	r0, r2
 8008568:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800856a:	4b08      	ldr	r3, [pc, #32]	@ (800858c <WIZCHIP_READ+0x94>)
 800856c:	69db      	ldr	r3, [r3, #28]
 800856e:	4798      	blx	r3
 8008570:	4603      	mov	r3, r0
 8008572:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8008574:	4b05      	ldr	r3, [pc, #20]	@ (800858c <WIZCHIP_READ+0x94>)
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800857a:	4b04      	ldr	r3, [pc, #16]	@ (800858c <WIZCHIP_READ+0x94>)
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	4798      	blx	r3
   return ret;
 8008580:	7bfb      	ldrb	r3, [r7, #15]
}
 8008582:	4618      	mov	r0, r3
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	2000003c 	.word	0x2000003c

08008590 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	460b      	mov	r3, r1
 800859a:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 800859c:	4b22      	ldr	r3, [pc, #136]	@ (8008628 <WIZCHIP_WRITE+0x98>)
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	4798      	blx	r3
   WIZCHIP.CS._select();
 80085a2:	4b21      	ldr	r3, [pc, #132]	@ (8008628 <WIZCHIP_WRITE+0x98>)
 80085a4:	695b      	ldr	r3, [r3, #20]
 80085a6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f043 0304 	orr.w	r3, r3, #4
 80085ae:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80085b0:	4b1d      	ldr	r3, [pc, #116]	@ (8008628 <WIZCHIP_WRITE+0x98>)
 80085b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d119      	bne.n	80085ec <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80085b8:	4b1b      	ldr	r3, [pc, #108]	@ (8008628 <WIZCHIP_WRITE+0x98>)
 80085ba:	6a1b      	ldr	r3, [r3, #32]
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	0c12      	lsrs	r2, r2, #16
 80085c0:	b2d2      	uxtb	r2, r2
 80085c2:	4610      	mov	r0, r2
 80085c4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80085c6:	4b18      	ldr	r3, [pc, #96]	@ (8008628 <WIZCHIP_WRITE+0x98>)
 80085c8:	6a1b      	ldr	r3, [r3, #32]
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	0a12      	lsrs	r2, r2, #8
 80085ce:	b2d2      	uxtb	r2, r2
 80085d0:	4610      	mov	r0, r2
 80085d2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80085d4:	4b14      	ldr	r3, [pc, #80]	@ (8008628 <WIZCHIP_WRITE+0x98>)
 80085d6:	6a1b      	ldr	r3, [r3, #32]
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	b2d2      	uxtb	r2, r2
 80085dc:	4610      	mov	r0, r2
 80085de:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80085e0:	4b11      	ldr	r3, [pc, #68]	@ (8008628 <WIZCHIP_WRITE+0x98>)
 80085e2:	6a1b      	ldr	r3, [r3, #32]
 80085e4:	78fa      	ldrb	r2, [r7, #3]
 80085e6:	4610      	mov	r0, r2
 80085e8:	4798      	blx	r3
 80085ea:	e013      	b.n	8008614 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	0c1b      	lsrs	r3, r3, #16
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	0a1b      	lsrs	r3, r3, #8
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8008602:	78fb      	ldrb	r3, [r7, #3]
 8008604:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8008606:	4b08      	ldr	r3, [pc, #32]	@ (8008628 <WIZCHIP_WRITE+0x98>)
 8008608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800860a:	f107 020c 	add.w	r2, r7, #12
 800860e:	2104      	movs	r1, #4
 8008610:	4610      	mov	r0, r2
 8008612:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8008614:	4b04      	ldr	r3, [pc, #16]	@ (8008628 <WIZCHIP_WRITE+0x98>)
 8008616:	699b      	ldr	r3, [r3, #24]
 8008618:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800861a:	4b03      	ldr	r3, [pc, #12]	@ (8008628 <WIZCHIP_WRITE+0x98>)
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	4798      	blx	r3
}
 8008620:	bf00      	nop
 8008622:	3710      	adds	r7, #16
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	2000003c 	.word	0x2000003c

0800862c <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800862c:	b590      	push	{r4, r7, lr}
 800862e:	b087      	sub	sp, #28
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	4613      	mov	r3, r2
 8008638:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800863a:	4b2b      	ldr	r3, [pc, #172]	@ (80086e8 <WIZCHIP_READ_BUF+0xbc>)
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8008640:	4b29      	ldr	r3, [pc, #164]	@ (80086e8 <WIZCHIP_READ_BUF+0xbc>)
 8008642:	695b      	ldr	r3, [r3, #20]
 8008644:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8008646:	4b28      	ldr	r3, [pc, #160]	@ (80086e8 <WIZCHIP_READ_BUF+0xbc>)
 8008648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800864a:	2b00      	cmp	r3, #0
 800864c:	d003      	beq.n	8008656 <WIZCHIP_READ_BUF+0x2a>
 800864e:	4b26      	ldr	r3, [pc, #152]	@ (80086e8 <WIZCHIP_READ_BUF+0xbc>)
 8008650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008652:	2b00      	cmp	r3, #0
 8008654:	d126      	bne.n	80086a4 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8008656:	4b24      	ldr	r3, [pc, #144]	@ (80086e8 <WIZCHIP_READ_BUF+0xbc>)
 8008658:	6a1b      	ldr	r3, [r3, #32]
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	0c12      	lsrs	r2, r2, #16
 800865e:	b2d2      	uxtb	r2, r2
 8008660:	4610      	mov	r0, r2
 8008662:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8008664:	4b20      	ldr	r3, [pc, #128]	@ (80086e8 <WIZCHIP_READ_BUF+0xbc>)
 8008666:	6a1b      	ldr	r3, [r3, #32]
 8008668:	68fa      	ldr	r2, [r7, #12]
 800866a:	0a12      	lsrs	r2, r2, #8
 800866c:	b2d2      	uxtb	r2, r2
 800866e:	4610      	mov	r0, r2
 8008670:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8008672:	4b1d      	ldr	r3, [pc, #116]	@ (80086e8 <WIZCHIP_READ_BUF+0xbc>)
 8008674:	6a1b      	ldr	r3, [r3, #32]
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	b2d2      	uxtb	r2, r2
 800867a:	4610      	mov	r0, r2
 800867c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800867e:	2300      	movs	r3, #0
 8008680:	82fb      	strh	r3, [r7, #22]
 8008682:	e00a      	b.n	800869a <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8008684:	4b18      	ldr	r3, [pc, #96]	@ (80086e8 <WIZCHIP_READ_BUF+0xbc>)
 8008686:	69db      	ldr	r3, [r3, #28]
 8008688:	8afa      	ldrh	r2, [r7, #22]
 800868a:	68b9      	ldr	r1, [r7, #8]
 800868c:	188c      	adds	r4, r1, r2
 800868e:	4798      	blx	r3
 8008690:	4603      	mov	r3, r0
 8008692:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8008694:	8afb      	ldrh	r3, [r7, #22]
 8008696:	3301      	adds	r3, #1
 8008698:	82fb      	strh	r3, [r7, #22]
 800869a:	8afa      	ldrh	r2, [r7, #22]
 800869c:	88fb      	ldrh	r3, [r7, #6]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d3f0      	bcc.n	8008684 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80086a2:	e017      	b.n	80086d4 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	0c1b      	lsrs	r3, r3, #16
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	0a1b      	lsrs	r3, r3, #8
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80086ba:	4b0b      	ldr	r3, [pc, #44]	@ (80086e8 <WIZCHIP_READ_BUF+0xbc>)
 80086bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086be:	f107 0210 	add.w	r2, r7, #16
 80086c2:	2103      	movs	r1, #3
 80086c4:	4610      	mov	r0, r2
 80086c6:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80086c8:	4b07      	ldr	r3, [pc, #28]	@ (80086e8 <WIZCHIP_READ_BUF+0xbc>)
 80086ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086cc:	88fa      	ldrh	r2, [r7, #6]
 80086ce:	4611      	mov	r1, r2
 80086d0:	68b8      	ldr	r0, [r7, #8]
 80086d2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80086d4:	4b04      	ldr	r3, [pc, #16]	@ (80086e8 <WIZCHIP_READ_BUF+0xbc>)
 80086d6:	699b      	ldr	r3, [r3, #24]
 80086d8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80086da:	4b03      	ldr	r3, [pc, #12]	@ (80086e8 <WIZCHIP_READ_BUF+0xbc>)
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	4798      	blx	r3
}
 80086e0:	bf00      	nop
 80086e2:	371c      	adds	r7, #28
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd90      	pop	{r4, r7, pc}
 80086e8:	2000003c 	.word	0x2000003c

080086ec <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b086      	sub	sp, #24
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	4613      	mov	r3, r2
 80086f8:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80086fa:	4b2b      	ldr	r3, [pc, #172]	@ (80087a8 <WIZCHIP_WRITE_BUF+0xbc>)
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	4798      	blx	r3
   WIZCHIP.CS._select();
 8008700:	4b29      	ldr	r3, [pc, #164]	@ (80087a8 <WIZCHIP_WRITE_BUF+0xbc>)
 8008702:	695b      	ldr	r3, [r3, #20]
 8008704:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f043 0304 	orr.w	r3, r3, #4
 800870c:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800870e:	4b26      	ldr	r3, [pc, #152]	@ (80087a8 <WIZCHIP_WRITE_BUF+0xbc>)
 8008710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008712:	2b00      	cmp	r3, #0
 8008714:	d126      	bne.n	8008764 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8008716:	4b24      	ldr	r3, [pc, #144]	@ (80087a8 <WIZCHIP_WRITE_BUF+0xbc>)
 8008718:	6a1b      	ldr	r3, [r3, #32]
 800871a:	68fa      	ldr	r2, [r7, #12]
 800871c:	0c12      	lsrs	r2, r2, #16
 800871e:	b2d2      	uxtb	r2, r2
 8008720:	4610      	mov	r0, r2
 8008722:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8008724:	4b20      	ldr	r3, [pc, #128]	@ (80087a8 <WIZCHIP_WRITE_BUF+0xbc>)
 8008726:	6a1b      	ldr	r3, [r3, #32]
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	0a12      	lsrs	r2, r2, #8
 800872c:	b2d2      	uxtb	r2, r2
 800872e:	4610      	mov	r0, r2
 8008730:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8008732:	4b1d      	ldr	r3, [pc, #116]	@ (80087a8 <WIZCHIP_WRITE_BUF+0xbc>)
 8008734:	6a1b      	ldr	r3, [r3, #32]
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	b2d2      	uxtb	r2, r2
 800873a:	4610      	mov	r0, r2
 800873c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800873e:	2300      	movs	r3, #0
 8008740:	82fb      	strh	r3, [r7, #22]
 8008742:	e00a      	b.n	800875a <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8008744:	4b18      	ldr	r3, [pc, #96]	@ (80087a8 <WIZCHIP_WRITE_BUF+0xbc>)
 8008746:	6a1b      	ldr	r3, [r3, #32]
 8008748:	8afa      	ldrh	r2, [r7, #22]
 800874a:	68b9      	ldr	r1, [r7, #8]
 800874c:	440a      	add	r2, r1
 800874e:	7812      	ldrb	r2, [r2, #0]
 8008750:	4610      	mov	r0, r2
 8008752:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8008754:	8afb      	ldrh	r3, [r7, #22]
 8008756:	3301      	adds	r3, #1
 8008758:	82fb      	strh	r3, [r7, #22]
 800875a:	8afa      	ldrh	r2, [r7, #22]
 800875c:	88fb      	ldrh	r3, [r7, #6]
 800875e:	429a      	cmp	r2, r3
 8008760:	d3f0      	bcc.n	8008744 <WIZCHIP_WRITE_BUF+0x58>
 8008762:	e017      	b.n	8008794 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	0c1b      	lsrs	r3, r3, #16
 8008768:	b2db      	uxtb	r3, r3
 800876a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	0a1b      	lsrs	r3, r3, #8
 8008770:	b2db      	uxtb	r3, r3
 8008772:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	b2db      	uxtb	r3, r3
 8008778:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800877a:	4b0b      	ldr	r3, [pc, #44]	@ (80087a8 <WIZCHIP_WRITE_BUF+0xbc>)
 800877c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800877e:	f107 0210 	add.w	r2, r7, #16
 8008782:	2103      	movs	r1, #3
 8008784:	4610      	mov	r0, r2
 8008786:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8008788:	4b07      	ldr	r3, [pc, #28]	@ (80087a8 <WIZCHIP_WRITE_BUF+0xbc>)
 800878a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800878c:	88fa      	ldrh	r2, [r7, #6]
 800878e:	4611      	mov	r1, r2
 8008790:	68b8      	ldr	r0, [r7, #8]
 8008792:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8008794:	4b04      	ldr	r3, [pc, #16]	@ (80087a8 <WIZCHIP_WRITE_BUF+0xbc>)
 8008796:	699b      	ldr	r3, [r3, #24]
 8008798:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800879a:	4b03      	ldr	r3, [pc, #12]	@ (80087a8 <WIZCHIP_WRITE_BUF+0xbc>)
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	4798      	blx	r3
}
 80087a0:	bf00      	nop
 80087a2:	3718      	adds	r7, #24
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	2000003c 	.word	0x2000003c

080087ac <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80087ac:	b590      	push	{r4, r7, lr}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	4603      	mov	r3, r0
 80087b4:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80087b6:	2300      	movs	r3, #0
 80087b8:	81fb      	strh	r3, [r7, #14]
 80087ba:	2300      	movs	r3, #0
 80087bc:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80087be:	79fb      	ldrb	r3, [r7, #7]
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	3301      	adds	r3, #1
 80087c4:	00db      	lsls	r3, r3, #3
 80087c6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7ff fe94 	bl	80084f8 <WIZCHIP_READ>
 80087d0:	4603      	mov	r3, r0
 80087d2:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80087d4:	89bb      	ldrh	r3, [r7, #12]
 80087d6:	021b      	lsls	r3, r3, #8
 80087d8:	b29c      	uxth	r4, r3
 80087da:	79fb      	ldrb	r3, [r7, #7]
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	3301      	adds	r3, #1
 80087e0:	00db      	lsls	r3, r3, #3
 80087e2:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7ff fe86 	bl	80084f8 <WIZCHIP_READ>
 80087ec:	4603      	mov	r3, r0
 80087ee:	4423      	add	r3, r4
 80087f0:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80087f2:	89bb      	ldrh	r3, [r7, #12]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d019      	beq.n	800882c <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80087f8:	79fb      	ldrb	r3, [r7, #7]
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	3301      	adds	r3, #1
 80087fe:	00db      	lsls	r3, r3, #3
 8008800:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8008804:	4618      	mov	r0, r3
 8008806:	f7ff fe77 	bl	80084f8 <WIZCHIP_READ>
 800880a:	4603      	mov	r3, r0
 800880c:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800880e:	89fb      	ldrh	r3, [r7, #14]
 8008810:	021b      	lsls	r3, r3, #8
 8008812:	b29c      	uxth	r4, r3
 8008814:	79fb      	ldrb	r3, [r7, #7]
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	3301      	adds	r3, #1
 800881a:	00db      	lsls	r3, r3, #3
 800881c:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8008820:	4618      	mov	r0, r3
 8008822:	f7ff fe69 	bl	80084f8 <WIZCHIP_READ>
 8008826:	4603      	mov	r3, r0
 8008828:	4423      	add	r3, r4
 800882a:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800882c:	89fa      	ldrh	r2, [r7, #14]
 800882e:	89bb      	ldrh	r3, [r7, #12]
 8008830:	429a      	cmp	r2, r3
 8008832:	d1c4      	bne.n	80087be <getSn_TX_FSR+0x12>
   return val;
 8008834:	89fb      	ldrh	r3, [r7, #14]
}
 8008836:	4618      	mov	r0, r3
 8008838:	3714      	adds	r7, #20
 800883a:	46bd      	mov	sp, r7
 800883c:	bd90      	pop	{r4, r7, pc}

0800883e <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800883e:	b590      	push	{r4, r7, lr}
 8008840:	b085      	sub	sp, #20
 8008842:	af00      	add	r7, sp, #0
 8008844:	4603      	mov	r3, r0
 8008846:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8008848:	2300      	movs	r3, #0
 800884a:	81fb      	strh	r3, [r7, #14]
 800884c:	2300      	movs	r3, #0
 800884e:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8008850:	79fb      	ldrb	r3, [r7, #7]
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	3301      	adds	r3, #1
 8008856:	00db      	lsls	r3, r3, #3
 8008858:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 800885c:	4618      	mov	r0, r3
 800885e:	f7ff fe4b 	bl	80084f8 <WIZCHIP_READ>
 8008862:	4603      	mov	r3, r0
 8008864:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8008866:	89bb      	ldrh	r3, [r7, #12]
 8008868:	021b      	lsls	r3, r3, #8
 800886a:	b29c      	uxth	r4, r3
 800886c:	79fb      	ldrb	r3, [r7, #7]
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	3301      	adds	r3, #1
 8008872:	00db      	lsls	r3, r3, #3
 8008874:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8008878:	4618      	mov	r0, r3
 800887a:	f7ff fe3d 	bl	80084f8 <WIZCHIP_READ>
 800887e:	4603      	mov	r3, r0
 8008880:	4423      	add	r3, r4
 8008882:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8008884:	89bb      	ldrh	r3, [r7, #12]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d019      	beq.n	80088be <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 800888a:	79fb      	ldrb	r3, [r7, #7]
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	3301      	adds	r3, #1
 8008890:	00db      	lsls	r3, r3, #3
 8008892:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8008896:	4618      	mov	r0, r3
 8008898:	f7ff fe2e 	bl	80084f8 <WIZCHIP_READ>
 800889c:	4603      	mov	r3, r0
 800889e:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80088a0:	89fb      	ldrh	r3, [r7, #14]
 80088a2:	021b      	lsls	r3, r3, #8
 80088a4:	b29c      	uxth	r4, r3
 80088a6:	79fb      	ldrb	r3, [r7, #7]
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	3301      	adds	r3, #1
 80088ac:	00db      	lsls	r3, r3, #3
 80088ae:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7ff fe20 	bl	80084f8 <WIZCHIP_READ>
 80088b8:	4603      	mov	r3, r0
 80088ba:	4423      	add	r3, r4
 80088bc:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80088be:	89fa      	ldrh	r2, [r7, #14]
 80088c0:	89bb      	ldrh	r3, [r7, #12]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d1c4      	bne.n	8008850 <getSn_RX_RSR+0x12>
   return val;
 80088c6:	89fb      	ldrh	r3, [r7, #14]
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3714      	adds	r7, #20
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd90      	pop	{r4, r7, pc}

080088d0 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80088d0:	b590      	push	{r4, r7, lr}
 80088d2:	b085      	sub	sp, #20
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	4603      	mov	r3, r0
 80088d8:	6039      	str	r1, [r7, #0]
 80088da:	71fb      	strb	r3, [r7, #7]
 80088dc:	4613      	mov	r3, r2
 80088de:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80088e0:	2300      	movs	r3, #0
 80088e2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80088e4:	2300      	movs	r3, #0
 80088e6:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80088e8:	88bb      	ldrh	r3, [r7, #4]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d046      	beq.n	800897c <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 80088ee:	79fb      	ldrb	r3, [r7, #7]
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	3301      	adds	r3, #1
 80088f4:	00db      	lsls	r3, r3, #3
 80088f6:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7ff fdfc 	bl	80084f8 <WIZCHIP_READ>
 8008900:	4603      	mov	r3, r0
 8008902:	021b      	lsls	r3, r3, #8
 8008904:	b29c      	uxth	r4, r3
 8008906:	79fb      	ldrb	r3, [r7, #7]
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	3301      	adds	r3, #1
 800890c:	00db      	lsls	r3, r3, #3
 800890e:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8008912:	4618      	mov	r0, r3
 8008914:	f7ff fdf0 	bl	80084f8 <WIZCHIP_READ>
 8008918:	4603      	mov	r3, r0
 800891a:	4423      	add	r3, r4
 800891c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 800891e:	89fb      	ldrh	r3, [r7, #14]
 8008920:	021b      	lsls	r3, r3, #8
 8008922:	79fa      	ldrb	r2, [r7, #7]
 8008924:	0092      	lsls	r2, r2, #2
 8008926:	3202      	adds	r2, #2
 8008928:	00d2      	lsls	r2, r2, #3
 800892a:	4413      	add	r3, r2
 800892c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 800892e:	88bb      	ldrh	r3, [r7, #4]
 8008930:	461a      	mov	r2, r3
 8008932:	6839      	ldr	r1, [r7, #0]
 8008934:	68b8      	ldr	r0, [r7, #8]
 8008936:	f7ff fed9 	bl	80086ec <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800893a:	89fa      	ldrh	r2, [r7, #14]
 800893c:	88bb      	ldrh	r3, [r7, #4]
 800893e:	4413      	add	r3, r2
 8008940:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8008942:	79fb      	ldrb	r3, [r7, #7]
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	3301      	adds	r3, #1
 8008948:	00db      	lsls	r3, r3, #3
 800894a:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 800894e:	461a      	mov	r2, r3
 8008950:	89fb      	ldrh	r3, [r7, #14]
 8008952:	0a1b      	lsrs	r3, r3, #8
 8008954:	b29b      	uxth	r3, r3
 8008956:	b2db      	uxtb	r3, r3
 8008958:	4619      	mov	r1, r3
 800895a:	4610      	mov	r0, r2
 800895c:	f7ff fe18 	bl	8008590 <WIZCHIP_WRITE>
 8008960:	79fb      	ldrb	r3, [r7, #7]
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	3301      	adds	r3, #1
 8008966:	00db      	lsls	r3, r3, #3
 8008968:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 800896c:	461a      	mov	r2, r3
 800896e:	89fb      	ldrh	r3, [r7, #14]
 8008970:	b2db      	uxtb	r3, r3
 8008972:	4619      	mov	r1, r3
 8008974:	4610      	mov	r0, r2
 8008976:	f7ff fe0b 	bl	8008590 <WIZCHIP_WRITE>
 800897a:	e000      	b.n	800897e <wiz_send_data+0xae>
   if(len == 0)  return;
 800897c:	bf00      	nop
}
 800897e:	3714      	adds	r7, #20
 8008980:	46bd      	mov	sp, r7
 8008982:	bd90      	pop	{r4, r7, pc}

08008984 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8008984:	b590      	push	{r4, r7, lr}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	4603      	mov	r3, r0
 800898c:	6039      	str	r1, [r7, #0]
 800898e:	71fb      	strb	r3, [r7, #7]
 8008990:	4613      	mov	r3, r2
 8008992:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8008994:	2300      	movs	r3, #0
 8008996:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8008998:	2300      	movs	r3, #0
 800899a:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 800899c:	88bb      	ldrh	r3, [r7, #4]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d046      	beq.n	8008a30 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 80089a2:	79fb      	ldrb	r3, [r7, #7]
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	3301      	adds	r3, #1
 80089a8:	00db      	lsls	r3, r3, #3
 80089aa:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7ff fda2 	bl	80084f8 <WIZCHIP_READ>
 80089b4:	4603      	mov	r3, r0
 80089b6:	021b      	lsls	r3, r3, #8
 80089b8:	b29c      	uxth	r4, r3
 80089ba:	79fb      	ldrb	r3, [r7, #7]
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	3301      	adds	r3, #1
 80089c0:	00db      	lsls	r3, r3, #3
 80089c2:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7ff fd96 	bl	80084f8 <WIZCHIP_READ>
 80089cc:	4603      	mov	r3, r0
 80089ce:	4423      	add	r3, r4
 80089d0:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80089d2:	89fb      	ldrh	r3, [r7, #14]
 80089d4:	021b      	lsls	r3, r3, #8
 80089d6:	79fa      	ldrb	r2, [r7, #7]
 80089d8:	0092      	lsls	r2, r2, #2
 80089da:	3203      	adds	r2, #3
 80089dc:	00d2      	lsls	r2, r2, #3
 80089de:	4413      	add	r3, r2
 80089e0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80089e2:	88bb      	ldrh	r3, [r7, #4]
 80089e4:	461a      	mov	r2, r3
 80089e6:	6839      	ldr	r1, [r7, #0]
 80089e8:	68b8      	ldr	r0, [r7, #8]
 80089ea:	f7ff fe1f 	bl	800862c <WIZCHIP_READ_BUF>
   ptr += len;
 80089ee:	89fa      	ldrh	r2, [r7, #14]
 80089f0:	88bb      	ldrh	r3, [r7, #4]
 80089f2:	4413      	add	r3, r2
 80089f4:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 80089f6:	79fb      	ldrb	r3, [r7, #7]
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	3301      	adds	r3, #1
 80089fc:	00db      	lsls	r3, r3, #3
 80089fe:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8008a02:	461a      	mov	r2, r3
 8008a04:	89fb      	ldrh	r3, [r7, #14]
 8008a06:	0a1b      	lsrs	r3, r3, #8
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	4610      	mov	r0, r2
 8008a10:	f7ff fdbe 	bl	8008590 <WIZCHIP_WRITE>
 8008a14:	79fb      	ldrb	r3, [r7, #7]
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	3301      	adds	r3, #1
 8008a1a:	00db      	lsls	r3, r3, #3
 8008a1c:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8008a20:	461a      	mov	r2, r3
 8008a22:	89fb      	ldrh	r3, [r7, #14]
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	4619      	mov	r1, r3
 8008a28:	4610      	mov	r0, r2
 8008a2a:	f7ff fdb1 	bl	8008590 <WIZCHIP_WRITE>
 8008a2e:	e000      	b.n	8008a32 <wiz_recv_data+0xae>
   if(len == 0) return;
 8008a30:	bf00      	nop
}
 8008a32:	3714      	adds	r7, #20
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd90      	pop	{r4, r7, pc}

08008a38 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8008a38:	b590      	push	{r4, r7, lr}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	4604      	mov	r4, r0
 8008a40:	4608      	mov	r0, r1
 8008a42:	4611      	mov	r1, r2
 8008a44:	461a      	mov	r2, r3
 8008a46:	4623      	mov	r3, r4
 8008a48:	71fb      	strb	r3, [r7, #7]
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	71bb      	strb	r3, [r7, #6]
 8008a4e:	460b      	mov	r3, r1
 8008a50:	80bb      	strh	r3, [r7, #4]
 8008a52:	4613      	mov	r3, r2
 8008a54:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8008a56:	79fb      	ldrb	r3, [r7, #7]
 8008a58:	2b08      	cmp	r3, #8
 8008a5a:	d902      	bls.n	8008a62 <socket+0x2a>
 8008a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8008a60:	e0f0      	b.n	8008c44 <socket+0x20c>
	switch(protocol)
 8008a62:	79bb      	ldrb	r3, [r7, #6]
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d005      	beq.n	8008a74 <socket+0x3c>
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	dd11      	ble.n	8008a90 <socket+0x58>
 8008a6c:	3b02      	subs	r3, #2
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d80e      	bhi.n	8008a90 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8008a72:	e011      	b.n	8008a98 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8008a74:	f107 030c 	add.w	r3, r7, #12
 8008a78:	2204      	movs	r2, #4
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8008a80:	f7ff fdd4 	bl	800862c <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d105      	bne.n	8008a96 <socket+0x5e>
 8008a8a:	f06f 0302 	mvn.w	r3, #2
 8008a8e:	e0d9      	b.n	8008c44 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8008a90:	f06f 0304 	mvn.w	r3, #4
 8008a94:	e0d6      	b.n	8008c44 <socket+0x20c>
	    break;
 8008a96:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8008a98:	78fb      	ldrb	r3, [r7, #3]
 8008a9a:	f003 0304 	and.w	r3, r3, #4
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d002      	beq.n	8008aa8 <socket+0x70>
 8008aa2:	f06f 0305 	mvn.w	r3, #5
 8008aa6:	e0cd      	b.n	8008c44 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8008aa8:	78fb      	ldrb	r3, [r7, #3]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d028      	beq.n	8008b00 <socket+0xc8>
	{
   	switch(protocol)
 8008aae:	79bb      	ldrb	r3, [r7, #6]
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d002      	beq.n	8008aba <socket+0x82>
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d008      	beq.n	8008aca <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8008ab8:	e022      	b.n	8008b00 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8008aba:	78fb      	ldrb	r3, [r7, #3]
 8008abc:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d11a      	bne.n	8008afa <socket+0xc2>
 8008ac4:	f06f 0305 	mvn.w	r3, #5
 8008ac8:	e0bc      	b.n	8008c44 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8008aca:	78fb      	ldrb	r3, [r7, #3]
 8008acc:	f003 0320 	and.w	r3, r3, #32
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d006      	beq.n	8008ae2 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8008ad4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	db02      	blt.n	8008ae2 <socket+0xaa>
 8008adc:	f06f 0305 	mvn.w	r3, #5
 8008ae0:	e0b0      	b.n	8008c44 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8008ae2:	78fb      	ldrb	r3, [r7, #3]
 8008ae4:	f003 0310 	and.w	r3, r3, #16
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d008      	beq.n	8008afe <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8008aec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	db04      	blt.n	8008afe <socket+0xc6>
 8008af4:	f06f 0305 	mvn.w	r3, #5
 8008af8:	e0a4      	b.n	8008c44 <socket+0x20c>
   	      break;
 8008afa:	bf00      	nop
 8008afc:	e000      	b.n	8008b00 <socket+0xc8>
   	      break;
 8008afe:	bf00      	nop
   	}
   }
	close(sn);
 8008b00:	79fb      	ldrb	r3, [r7, #7]
 8008b02:	4618      	mov	r0, r3
 8008b04:	f000 f8ac 	bl	8008c60 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8008b08:	79fb      	ldrb	r3, [r7, #7]
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	00db      	lsls	r3, r3, #3
 8008b10:	4618      	mov	r0, r3
 8008b12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b16:	f023 030f 	bic.w	r3, r3, #15
 8008b1a:	b25a      	sxtb	r2, r3
 8008b1c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	b25b      	sxtb	r3, r3
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	4619      	mov	r1, r3
 8008b28:	f7ff fd32 	bl	8008590 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8008b2c:	88bb      	ldrh	r3, [r7, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d110      	bne.n	8008b54 <socket+0x11c>
	{
	   port = sock_any_port++;
 8008b32:	4b46      	ldr	r3, [pc, #280]	@ (8008c4c <socket+0x214>)
 8008b34:	881b      	ldrh	r3, [r3, #0]
 8008b36:	1c5a      	adds	r2, r3, #1
 8008b38:	b291      	uxth	r1, r2
 8008b3a:	4a44      	ldr	r2, [pc, #272]	@ (8008c4c <socket+0x214>)
 8008b3c:	8011      	strh	r1, [r2, #0]
 8008b3e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8008b40:	4b42      	ldr	r3, [pc, #264]	@ (8008c4c <socket+0x214>)
 8008b42:	881b      	ldrh	r3, [r3, #0]
 8008b44:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d103      	bne.n	8008b54 <socket+0x11c>
 8008b4c:	4b3f      	ldr	r3, [pc, #252]	@ (8008c4c <socket+0x214>)
 8008b4e:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8008b52:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8008b54:	79fb      	ldrb	r3, [r7, #7]
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	3301      	adds	r3, #1
 8008b5a:	00db      	lsls	r3, r3, #3
 8008b5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b60:	461a      	mov	r2, r3
 8008b62:	88bb      	ldrh	r3, [r7, #4]
 8008b64:	0a1b      	lsrs	r3, r3, #8
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	4610      	mov	r0, r2
 8008b6e:	f7ff fd0f 	bl	8008590 <WIZCHIP_WRITE>
 8008b72:	79fb      	ldrb	r3, [r7, #7]
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	3301      	adds	r3, #1
 8008b78:	00db      	lsls	r3, r3, #3
 8008b7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b7e:	461a      	mov	r2, r3
 8008b80:	88bb      	ldrh	r3, [r7, #4]
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	4619      	mov	r1, r3
 8008b86:	4610      	mov	r0, r2
 8008b88:	f7ff fd02 	bl	8008590 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8008b8c:	79fb      	ldrb	r3, [r7, #7]
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	3301      	adds	r3, #1
 8008b92:	00db      	lsls	r3, r3, #3
 8008b94:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008b98:	2101      	movs	r1, #1
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7ff fcf8 	bl	8008590 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8008ba0:	bf00      	nop
 8008ba2:	79fb      	ldrb	r3, [r7, #7]
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	00db      	lsls	r3, r3, #3
 8008baa:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7ff fca2 	bl	80084f8 <WIZCHIP_READ>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1f3      	bne.n	8008ba2 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8008bba:	79fb      	ldrb	r3, [r7, #7]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc2:	b21b      	sxth	r3, r3
 8008bc4:	43db      	mvns	r3, r3
 8008bc6:	b21a      	sxth	r2, r3
 8008bc8:	4b21      	ldr	r3, [pc, #132]	@ (8008c50 <socket+0x218>)
 8008bca:	881b      	ldrh	r3, [r3, #0]
 8008bcc:	b21b      	sxth	r3, r3
 8008bce:	4013      	ands	r3, r2
 8008bd0:	b21b      	sxth	r3, r3
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8008c50 <socket+0x218>)
 8008bd6:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8008bd8:	78fb      	ldrb	r3, [r7, #3]
 8008bda:	f003 0201 	and.w	r2, r3, #1
 8008bde:	79fb      	ldrb	r3, [r7, #7]
 8008be0:	fa02 f303 	lsl.w	r3, r2, r3
 8008be4:	b21a      	sxth	r2, r3
 8008be6:	4b1a      	ldr	r3, [pc, #104]	@ (8008c50 <socket+0x218>)
 8008be8:	881b      	ldrh	r3, [r3, #0]
 8008bea:	b21b      	sxth	r3, r3
 8008bec:	4313      	orrs	r3, r2
 8008bee:	b21b      	sxth	r3, r3
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	4b17      	ldr	r3, [pc, #92]	@ (8008c50 <socket+0x218>)
 8008bf4:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8008bf6:	79fb      	ldrb	r3, [r7, #7]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8008bfe:	b21b      	sxth	r3, r3
 8008c00:	43db      	mvns	r3, r3
 8008c02:	b21a      	sxth	r2, r3
 8008c04:	4b13      	ldr	r3, [pc, #76]	@ (8008c54 <socket+0x21c>)
 8008c06:	881b      	ldrh	r3, [r3, #0]
 8008c08:	b21b      	sxth	r3, r3
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	b21b      	sxth	r3, r3
 8008c0e:	b29a      	uxth	r2, r3
 8008c10:	4b10      	ldr	r3, [pc, #64]	@ (8008c54 <socket+0x21c>)
 8008c12:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8008c14:	79fb      	ldrb	r3, [r7, #7]
 8008c16:	4a10      	ldr	r2, [pc, #64]	@ (8008c58 <socket+0x220>)
 8008c18:	2100      	movs	r1, #0
 8008c1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8008c1e:	79fb      	ldrb	r3, [r7, #7]
 8008c20:	4a0e      	ldr	r2, [pc, #56]	@ (8008c5c <socket+0x224>)
 8008c22:	2100      	movs	r1, #0
 8008c24:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8008c26:	bf00      	nop
 8008c28:	79fb      	ldrb	r3, [r7, #7]
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	00db      	lsls	r3, r3, #3
 8008c30:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7ff fc5f 	bl	80084f8 <WIZCHIP_READ>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d0f3      	beq.n	8008c28 <socket+0x1f0>
   return (int8_t)sn;
 8008c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8008c44:	4618      	mov	r0, r3
 8008c46:	3714      	adds	r7, #20
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd90      	pop	{r4, r7, pc}
 8008c4c:	20000038 	.word	0x20000038
 8008c50:	200015bc 	.word	0x200015bc
 8008c54:	200015be 	.word	0x200015be
 8008c58:	200015c0 	.word	0x200015c0
 8008c5c:	200015d0 	.word	0x200015d0

08008c60 <close>:

int8_t close(uint8_t sn)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	4603      	mov	r3, r0
 8008c68:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8008c6a:	79fb      	ldrb	r3, [r7, #7]
 8008c6c:	2b08      	cmp	r3, #8
 8008c6e:	d902      	bls.n	8008c76 <close+0x16>
 8008c70:	f04f 33ff 	mov.w	r3, #4294967295
 8008c74:	e055      	b.n	8008d22 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8008c76:	79fb      	ldrb	r3, [r7, #7]
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	00db      	lsls	r3, r3, #3
 8008c7e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008c82:	2110      	movs	r1, #16
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7ff fc83 	bl	8008590 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8008c8a:	bf00      	nop
 8008c8c:	79fb      	ldrb	r3, [r7, #7]
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	3301      	adds	r3, #1
 8008c92:	00db      	lsls	r3, r3, #3
 8008c94:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7ff fc2d 	bl	80084f8 <WIZCHIP_READ>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d1f3      	bne.n	8008c8c <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8008ca4:	79fb      	ldrb	r3, [r7, #7]
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	3301      	adds	r3, #1
 8008caa:	00db      	lsls	r3, r3, #3
 8008cac:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8008cb0:	211f      	movs	r1, #31
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7ff fc6c 	bl	8008590 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8008cb8:	79fb      	ldrb	r3, [r7, #7]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc0:	b21b      	sxth	r3, r3
 8008cc2:	43db      	mvns	r3, r3
 8008cc4:	b21a      	sxth	r2, r3
 8008cc6:	4b19      	ldr	r3, [pc, #100]	@ (8008d2c <close+0xcc>)
 8008cc8:	881b      	ldrh	r3, [r3, #0]
 8008cca:	b21b      	sxth	r3, r3
 8008ccc:	4013      	ands	r3, r2
 8008cce:	b21b      	sxth	r3, r3
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	4b16      	ldr	r3, [pc, #88]	@ (8008d2c <close+0xcc>)
 8008cd4:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8008cd6:	79fb      	ldrb	r3, [r7, #7]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	fa02 f303 	lsl.w	r3, r2, r3
 8008cde:	b21b      	sxth	r3, r3
 8008ce0:	43db      	mvns	r3, r3
 8008ce2:	b21a      	sxth	r2, r3
 8008ce4:	4b12      	ldr	r3, [pc, #72]	@ (8008d30 <close+0xd0>)
 8008ce6:	881b      	ldrh	r3, [r3, #0]
 8008ce8:	b21b      	sxth	r3, r3
 8008cea:	4013      	ands	r3, r2
 8008cec:	b21b      	sxth	r3, r3
 8008cee:	b29a      	uxth	r2, r3
 8008cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8008d30 <close+0xd0>)
 8008cf2:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8008cf4:	79fb      	ldrb	r3, [r7, #7]
 8008cf6:	4a0f      	ldr	r2, [pc, #60]	@ (8008d34 <close+0xd4>)
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8008cfe:	79fb      	ldrb	r3, [r7, #7]
 8008d00:	4a0d      	ldr	r2, [pc, #52]	@ (8008d38 <close+0xd8>)
 8008d02:	2100      	movs	r1, #0
 8008d04:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8008d06:	bf00      	nop
 8008d08:	79fb      	ldrb	r3, [r7, #7]
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	00db      	lsls	r3, r3, #3
 8008d10:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7ff fbef 	bl	80084f8 <WIZCHIP_READ>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d1f3      	bne.n	8008d08 <close+0xa8>
	return SOCK_OK;
 8008d20:	2301      	movs	r3, #1
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3708      	adds	r7, #8
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	200015bc 	.word	0x200015bc
 8008d30:	200015be 	.word	0x200015be
 8008d34:	200015c0 	.word	0x200015c0
 8008d38:	200015d0 	.word	0x200015d0

08008d3c <listen>:

int8_t listen(uint8_t sn)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	4603      	mov	r3, r0
 8008d44:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8008d46:	79fb      	ldrb	r3, [r7, #7]
 8008d48:	2b08      	cmp	r3, #8
 8008d4a:	d902      	bls.n	8008d52 <listen+0x16>
 8008d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8008d50:	e049      	b.n	8008de6 <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8008d52:	79fb      	ldrb	r3, [r7, #7]
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	3301      	adds	r3, #1
 8008d58:	00db      	lsls	r3, r3, #3
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7ff fbcc 	bl	80084f8 <WIZCHIP_READ>
 8008d60:	4603      	mov	r3, r0
 8008d62:	f003 030f 	and.w	r3, r3, #15
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d002      	beq.n	8008d70 <listen+0x34>
 8008d6a:	f06f 0304 	mvn.w	r3, #4
 8008d6e:	e03a      	b.n	8008de6 <listen+0xaa>
	CHECK_SOCKINIT();
 8008d70:	79fb      	ldrb	r3, [r7, #7]
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	3301      	adds	r3, #1
 8008d76:	00db      	lsls	r3, r3, #3
 8008d78:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7ff fbbb 	bl	80084f8 <WIZCHIP_READ>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b13      	cmp	r3, #19
 8008d86:	d002      	beq.n	8008d8e <listen+0x52>
 8008d88:	f06f 0302 	mvn.w	r3, #2
 8008d8c:	e02b      	b.n	8008de6 <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8008d8e:	79fb      	ldrb	r3, [r7, #7]
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	3301      	adds	r3, #1
 8008d94:	00db      	lsls	r3, r3, #3
 8008d96:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008d9a:	2102      	movs	r1, #2
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7ff fbf7 	bl	8008590 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8008da2:	bf00      	nop
 8008da4:	79fb      	ldrb	r3, [r7, #7]
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	3301      	adds	r3, #1
 8008daa:	00db      	lsls	r3, r3, #3
 8008dac:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7ff fba1 	bl	80084f8 <WIZCHIP_READ>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d1f3      	bne.n	8008da4 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8008dbc:	e006      	b.n	8008dcc <listen+0x90>
   {
         close(sn);
 8008dbe:	79fb      	ldrb	r3, [r7, #7]
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7ff ff4d 	bl	8008c60 <close>
         return SOCKERR_SOCKCLOSED;
 8008dc6:	f06f 0303 	mvn.w	r3, #3
 8008dca:	e00c      	b.n	8008de6 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8008dcc:	79fb      	ldrb	r3, [r7, #7]
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	00db      	lsls	r3, r3, #3
 8008dd4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7ff fb8d 	bl	80084f8 <WIZCHIP_READ>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b14      	cmp	r3, #20
 8008de2:	d1ec      	bne.n	8008dbe <listen+0x82>
   }
   return SOCK_OK;
 8008de4:	2301      	movs	r3, #1
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
	...

08008df0 <connect>:


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	4603      	mov	r3, r0
 8008df8:	6039      	str	r1, [r7, #0]
 8008dfa:	71fb      	strb	r3, [r7, #7]
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8008e00:	79fb      	ldrb	r3, [r7, #7]
 8008e02:	2b08      	cmp	r3, #8
 8008e04:	d902      	bls.n	8008e0c <connect+0x1c>
 8008e06:	f04f 33ff 	mov.w	r3, #4294967295
 8008e0a:	e0c6      	b.n	8008f9a <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8008e0c:	79fb      	ldrb	r3, [r7, #7]
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	3301      	adds	r3, #1
 8008e12:	00db      	lsls	r3, r3, #3
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7ff fb6f 	bl	80084f8 <WIZCHIP_READ>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	f003 030f 	and.w	r3, r3, #15
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d002      	beq.n	8008e2a <connect+0x3a>
 8008e24:	f06f 0304 	mvn.w	r3, #4
 8008e28:	e0b7      	b.n	8008f9a <connect+0x1aa>
   CHECK_SOCKINIT();
 8008e2a:	79fb      	ldrb	r3, [r7, #7]
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	3301      	adds	r3, #1
 8008e30:	00db      	lsls	r3, r3, #3
 8008e32:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7ff fb5e 	bl	80084f8 <WIZCHIP_READ>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b13      	cmp	r3, #19
 8008e40:	d002      	beq.n	8008e48 <connect+0x58>
 8008e42:	f06f 0302 	mvn.w	r3, #2
 8008e46:	e0a8      	b.n	8008f9a <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	021b      	lsls	r3, r3, #8
 8008e52:	683a      	ldr	r2, [r7, #0]
 8008e54:	3201      	adds	r2, #1
 8008e56:	7812      	ldrb	r2, [r2, #0]
 8008e58:	4413      	add	r3, r2
 8008e5a:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	021b      	lsls	r3, r3, #8
 8008e60:	683a      	ldr	r2, [r7, #0]
 8008e62:	3202      	adds	r2, #2
 8008e64:	7812      	ldrb	r2, [r2, #0]
 8008e66:	4413      	add	r3, r2
 8008e68:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	021b      	lsls	r3, r3, #8
 8008e6e:	683a      	ldr	r2, [r7, #0]
 8008e70:	3203      	adds	r2, #3
 8008e72:	7812      	ldrb	r2, [r2, #0]
 8008e74:	4413      	add	r3, r2
 8008e76:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e7e:	d002      	beq.n	8008e86 <connect+0x96>
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d102      	bne.n	8008e8c <connect+0x9c>
 8008e86:	f06f 030b 	mvn.w	r3, #11
 8008e8a:	e086      	b.n	8008f9a <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8008e8c:	88bb      	ldrh	r3, [r7, #4]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d102      	bne.n	8008e98 <connect+0xa8>
 8008e92:	f06f 030a 	mvn.w	r3, #10
 8008e96:	e080      	b.n	8008f9a <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8008e98:	79fb      	ldrb	r3, [r7, #7]
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	00db      	lsls	r3, r3, #3
 8008ea0:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8008ea4:	2204      	movs	r2, #4
 8008ea6:	6839      	ldr	r1, [r7, #0]
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f7ff fc1f 	bl	80086ec <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8008eae:	79fb      	ldrb	r3, [r7, #7]
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	00db      	lsls	r3, r3, #3
 8008eb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008eba:	461a      	mov	r2, r3
 8008ebc:	88bb      	ldrh	r3, [r7, #4]
 8008ebe:	0a1b      	lsrs	r3, r3, #8
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	4610      	mov	r0, r2
 8008ec8:	f7ff fb62 	bl	8008590 <WIZCHIP_WRITE>
 8008ecc:	79fb      	ldrb	r3, [r7, #7]
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	00db      	lsls	r3, r3, #3
 8008ed4:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8008ed8:	461a      	mov	r2, r3
 8008eda:	88bb      	ldrh	r3, [r7, #4]
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	4619      	mov	r1, r3
 8008ee0:	4610      	mov	r0, r2
 8008ee2:	f7ff fb55 	bl	8008590 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8008ee6:	79fb      	ldrb	r3, [r7, #7]
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	3301      	adds	r3, #1
 8008eec:	00db      	lsls	r3, r3, #3
 8008eee:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008ef2:	2104      	movs	r1, #4
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7ff fb4b 	bl	8008590 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8008efa:	bf00      	nop
 8008efc:	79fb      	ldrb	r3, [r7, #7]
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	3301      	adds	r3, #1
 8008f02:	00db      	lsls	r3, r3, #3
 8008f04:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7ff faf5 	bl	80084f8 <WIZCHIP_READ>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1f3      	bne.n	8008efc <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8008f14:	4b23      	ldr	r3, [pc, #140]	@ (8008fa4 <connect+0x1b4>)
 8008f16:	881b      	ldrh	r3, [r3, #0]
 8008f18:	461a      	mov	r2, r3
 8008f1a:	79fb      	ldrb	r3, [r7, #7]
 8008f1c:	fa42 f303 	asr.w	r3, r2, r3
 8008f20:	f003 0301 	and.w	r3, r3, #1
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d02b      	beq.n	8008f80 <connect+0x190>
 8008f28:	2300      	movs	r3, #0
 8008f2a:	e036      	b.n	8008f9a <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8008f2c:	79fb      	ldrb	r3, [r7, #7]
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	3301      	adds	r3, #1
 8008f32:	00db      	lsls	r3, r3, #3
 8008f34:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7ff fadd 	bl	80084f8 <WIZCHIP_READ>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	f003 0308 	and.w	r3, r3, #8
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d00c      	beq.n	8008f62 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8008f48:	79fb      	ldrb	r3, [r7, #7]
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	00db      	lsls	r3, r3, #3
 8008f50:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8008f54:	2108      	movs	r1, #8
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7ff fb1a 	bl	8008590 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8008f5c:	f06f 030c 	mvn.w	r3, #12
 8008f60:	e01b      	b.n	8008f9a <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8008f62:	79fb      	ldrb	r3, [r7, #7]
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	3301      	adds	r3, #1
 8008f68:	00db      	lsls	r3, r3, #3
 8008f6a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7ff fac2 	bl	80084f8 <WIZCHIP_READ>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d102      	bne.n	8008f80 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8008f7a:	f06f 0303 	mvn.w	r3, #3
 8008f7e:	e00c      	b.n	8008f9a <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8008f80:	79fb      	ldrb	r3, [r7, #7]
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	3301      	adds	r3, #1
 8008f86:	00db      	lsls	r3, r3, #3
 8008f88:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7ff fab3 	bl	80084f8 <WIZCHIP_READ>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b17      	cmp	r3, #23
 8008f96:	d1c9      	bne.n	8008f2c <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8008f98:	2301      	movs	r3, #1
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	200015bc 	.word	0x200015bc

08008fa8 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	4603      	mov	r3, r0
 8008fb0:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8008fb2:	79fb      	ldrb	r3, [r7, #7]
 8008fb4:	2b08      	cmp	r3, #8
 8008fb6:	d902      	bls.n	8008fbe <disconnect+0x16>
 8008fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8008fbc:	e062      	b.n	8009084 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8008fbe:	79fb      	ldrb	r3, [r7, #7]
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	00db      	lsls	r3, r3, #3
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7ff fa96 	bl	80084f8 <WIZCHIP_READ>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	f003 030f 	and.w	r3, r3, #15
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d002      	beq.n	8008fdc <disconnect+0x34>
 8008fd6:	f06f 0304 	mvn.w	r3, #4
 8008fda:	e053      	b.n	8009084 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8008fdc:	79fb      	ldrb	r3, [r7, #7]
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	00db      	lsls	r3, r3, #3
 8008fe4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008fe8:	2108      	movs	r1, #8
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7ff fad0 	bl	8008590 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8008ff0:	bf00      	nop
 8008ff2:	79fb      	ldrb	r3, [r7, #7]
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	00db      	lsls	r3, r3, #3
 8008ffa:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7ff fa7a 	bl	80084f8 <WIZCHIP_READ>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d1f3      	bne.n	8008ff2 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 800900a:	79fb      	ldrb	r3, [r7, #7]
 800900c:	2201      	movs	r2, #1
 800900e:	fa02 f303 	lsl.w	r3, r2, r3
 8009012:	b21b      	sxth	r3, r3
 8009014:	43db      	mvns	r3, r3
 8009016:	b21a      	sxth	r2, r3
 8009018:	4b1c      	ldr	r3, [pc, #112]	@ (800908c <disconnect+0xe4>)
 800901a:	881b      	ldrh	r3, [r3, #0]
 800901c:	b21b      	sxth	r3, r3
 800901e:	4013      	ands	r3, r2
 8009020:	b21b      	sxth	r3, r3
 8009022:	b29a      	uxth	r2, r3
 8009024:	4b19      	ldr	r3, [pc, #100]	@ (800908c <disconnect+0xe4>)
 8009026:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8009028:	4b19      	ldr	r3, [pc, #100]	@ (8009090 <disconnect+0xe8>)
 800902a:	881b      	ldrh	r3, [r3, #0]
 800902c:	461a      	mov	r2, r3
 800902e:	79fb      	ldrb	r3, [r7, #7]
 8009030:	fa42 f303 	asr.w	r3, r2, r3
 8009034:	f003 0301 	and.w	r3, r3, #1
 8009038:	2b00      	cmp	r3, #0
 800903a:	d016      	beq.n	800906a <disconnect+0xc2>
 800903c:	2300      	movs	r3, #0
 800903e:	e021      	b.n	8009084 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8009040:	79fb      	ldrb	r3, [r7, #7]
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	3301      	adds	r3, #1
 8009046:	00db      	lsls	r3, r3, #3
 8009048:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800904c:	4618      	mov	r0, r3
 800904e:	f7ff fa53 	bl	80084f8 <WIZCHIP_READ>
 8009052:	4603      	mov	r3, r0
 8009054:	f003 0308 	and.w	r3, r3, #8
 8009058:	2b00      	cmp	r3, #0
 800905a:	d006      	beq.n	800906a <disconnect+0xc2>
	   {
	      close(sn);
 800905c:	79fb      	ldrb	r3, [r7, #7]
 800905e:	4618      	mov	r0, r3
 8009060:	f7ff fdfe 	bl	8008c60 <close>
	      return SOCKERR_TIMEOUT;
 8009064:	f06f 030c 	mvn.w	r3, #12
 8009068:	e00c      	b.n	8009084 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 800906a:	79fb      	ldrb	r3, [r7, #7]
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	3301      	adds	r3, #1
 8009070:	00db      	lsls	r3, r3, #3
 8009072:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8009076:	4618      	mov	r0, r3
 8009078:	f7ff fa3e 	bl	80084f8 <WIZCHIP_READ>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d1de      	bne.n	8009040 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8009082:	2301      	movs	r3, #1
}
 8009084:	4618      	mov	r0, r3
 8009086:	3708      	adds	r7, #8
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}
 800908c:	200015be 	.word	0x200015be
 8009090:	200015bc 	.word	0x200015bc

08009094 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	4603      	mov	r3, r0
 800909c:	6039      	str	r1, [r7, #0]
 800909e:	71fb      	strb	r3, [r7, #7]
 80090a0:	4613      	mov	r3, r2
 80090a2:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80090a4:	2300      	movs	r3, #0
 80090a6:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 80090a8:	2300      	movs	r3, #0
 80090aa:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 80090ac:	79fb      	ldrb	r3, [r7, #7]
 80090ae:	2b08      	cmp	r3, #8
 80090b0:	d902      	bls.n	80090b8 <send+0x24>
 80090b2:	f04f 33ff 	mov.w	r3, #4294967295
 80090b6:	e0dd      	b.n	8009274 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80090b8:	79fb      	ldrb	r3, [r7, #7]
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	3301      	adds	r3, #1
 80090be:	00db      	lsls	r3, r3, #3
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7ff fa19 	bl	80084f8 <WIZCHIP_READ>
 80090c6:	4603      	mov	r3, r0
 80090c8:	f003 030f 	and.w	r3, r3, #15
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d002      	beq.n	80090d6 <send+0x42>
 80090d0:	f06f 0304 	mvn.w	r3, #4
 80090d4:	e0ce      	b.n	8009274 <send+0x1e0>
   CHECK_SOCKDATA();
 80090d6:	88bb      	ldrh	r3, [r7, #4]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d102      	bne.n	80090e2 <send+0x4e>
 80090dc:	f06f 030d 	mvn.w	r3, #13
 80090e0:	e0c8      	b.n	8009274 <send+0x1e0>
   tmp = getSn_SR(sn);
 80090e2:	79fb      	ldrb	r3, [r7, #7]
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	3301      	adds	r3, #1
 80090e8:	00db      	lsls	r3, r3, #3
 80090ea:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7ff fa02 	bl	80084f8 <WIZCHIP_READ>
 80090f4:	4603      	mov	r3, r0
 80090f6:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80090f8:	7bfb      	ldrb	r3, [r7, #15]
 80090fa:	2b17      	cmp	r3, #23
 80090fc:	d005      	beq.n	800910a <send+0x76>
 80090fe:	7bfb      	ldrb	r3, [r7, #15]
 8009100:	2b1c      	cmp	r3, #28
 8009102:	d002      	beq.n	800910a <send+0x76>
 8009104:	f06f 0306 	mvn.w	r3, #6
 8009108:	e0b4      	b.n	8009274 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 800910a:	4b5c      	ldr	r3, [pc, #368]	@ (800927c <send+0x1e8>)
 800910c:	881b      	ldrh	r3, [r3, #0]
 800910e:	461a      	mov	r2, r3
 8009110:	79fb      	ldrb	r3, [r7, #7]
 8009112:	fa42 f303 	asr.w	r3, r2, r3
 8009116:	f003 0301 	and.w	r3, r3, #1
 800911a:	2b00      	cmp	r3, #0
 800911c:	d039      	beq.n	8009192 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800911e:	79fb      	ldrb	r3, [r7, #7]
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	3301      	adds	r3, #1
 8009124:	00db      	lsls	r3, r3, #3
 8009126:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800912a:	4618      	mov	r0, r3
 800912c:	f7ff f9e4 	bl	80084f8 <WIZCHIP_READ>
 8009130:	4603      	mov	r3, r0
 8009132:	f003 031f 	and.w	r3, r3, #31
 8009136:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8009138:	7bfb      	ldrb	r3, [r7, #15]
 800913a:	f003 0310 	and.w	r3, r3, #16
 800913e:	2b00      	cmp	r3, #0
 8009140:	d019      	beq.n	8009176 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8009142:	79fb      	ldrb	r3, [r7, #7]
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	3301      	adds	r3, #1
 8009148:	00db      	lsls	r3, r3, #3
 800914a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800914e:	2110      	movs	r1, #16
 8009150:	4618      	mov	r0, r3
 8009152:	f7ff fa1d 	bl	8008590 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8009156:	79fb      	ldrb	r3, [r7, #7]
 8009158:	2201      	movs	r2, #1
 800915a:	fa02 f303 	lsl.w	r3, r2, r3
 800915e:	b21b      	sxth	r3, r3
 8009160:	43db      	mvns	r3, r3
 8009162:	b21a      	sxth	r2, r3
 8009164:	4b45      	ldr	r3, [pc, #276]	@ (800927c <send+0x1e8>)
 8009166:	881b      	ldrh	r3, [r3, #0]
 8009168:	b21b      	sxth	r3, r3
 800916a:	4013      	ands	r3, r2
 800916c:	b21b      	sxth	r3, r3
 800916e:	b29a      	uxth	r2, r3
 8009170:	4b42      	ldr	r3, [pc, #264]	@ (800927c <send+0x1e8>)
 8009172:	801a      	strh	r2, [r3, #0]
 8009174:	e00d      	b.n	8009192 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8009176:	7bfb      	ldrb	r3, [r7, #15]
 8009178:	f003 0308 	and.w	r3, r3, #8
 800917c:	2b00      	cmp	r3, #0
 800917e:	d006      	beq.n	800918e <send+0xfa>
      {
         close(sn);
 8009180:	79fb      	ldrb	r3, [r7, #7]
 8009182:	4618      	mov	r0, r3
 8009184:	f7ff fd6c 	bl	8008c60 <close>
         return SOCKERR_TIMEOUT;
 8009188:	f06f 030c 	mvn.w	r3, #12
 800918c:	e072      	b.n	8009274 <send+0x1e0>
      }
      else return SOCK_BUSY;
 800918e:	2300      	movs	r3, #0
 8009190:	e070      	b.n	8009274 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 8009192:	79fb      	ldrb	r3, [r7, #7]
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	3301      	adds	r3, #1
 8009198:	00db      	lsls	r3, r3, #3
 800919a:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 800919e:	4618      	mov	r0, r3
 80091a0:	f7ff f9aa 	bl	80084f8 <WIZCHIP_READ>
 80091a4:	4603      	mov	r3, r0
 80091a6:	029b      	lsls	r3, r3, #10
 80091a8:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80091aa:	88ba      	ldrh	r2, [r7, #4]
 80091ac:	89bb      	ldrh	r3, [r7, #12]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d901      	bls.n	80091b6 <send+0x122>
 80091b2:	89bb      	ldrh	r3, [r7, #12]
 80091b4:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80091b6:	79fb      	ldrb	r3, [r7, #7]
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7ff faf7 	bl	80087ac <getSn_TX_FSR>
 80091be:	4603      	mov	r3, r0
 80091c0:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80091c2:	79fb      	ldrb	r3, [r7, #7]
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	3301      	adds	r3, #1
 80091c8:	00db      	lsls	r3, r3, #3
 80091ca:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7ff f992 	bl	80084f8 <WIZCHIP_READ>
 80091d4:	4603      	mov	r3, r0
 80091d6:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80091d8:	7bfb      	ldrb	r3, [r7, #15]
 80091da:	2b17      	cmp	r3, #23
 80091dc:	d009      	beq.n	80091f2 <send+0x15e>
 80091de:	7bfb      	ldrb	r3, [r7, #15]
 80091e0:	2b1c      	cmp	r3, #28
 80091e2:	d006      	beq.n	80091f2 <send+0x15e>
      {
         close(sn);
 80091e4:	79fb      	ldrb	r3, [r7, #7]
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7ff fd3a 	bl	8008c60 <close>
         return SOCKERR_SOCKSTATUS;
 80091ec:	f06f 0306 	mvn.w	r3, #6
 80091f0:	e040      	b.n	8009274 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80091f2:	4b23      	ldr	r3, [pc, #140]	@ (8009280 <send+0x1ec>)
 80091f4:	881b      	ldrh	r3, [r3, #0]
 80091f6:	461a      	mov	r2, r3
 80091f8:	79fb      	ldrb	r3, [r7, #7]
 80091fa:	fa42 f303 	asr.w	r3, r2, r3
 80091fe:	f003 0301 	and.w	r3, r3, #1
 8009202:	2b00      	cmp	r3, #0
 8009204:	d005      	beq.n	8009212 <send+0x17e>
 8009206:	88ba      	ldrh	r2, [r7, #4]
 8009208:	89bb      	ldrh	r3, [r7, #12]
 800920a:	429a      	cmp	r2, r3
 800920c:	d901      	bls.n	8009212 <send+0x17e>
 800920e:	2300      	movs	r3, #0
 8009210:	e030      	b.n	8009274 <send+0x1e0>
      if(len <= freesize) break;
 8009212:	88ba      	ldrh	r2, [r7, #4]
 8009214:	89bb      	ldrh	r3, [r7, #12]
 8009216:	429a      	cmp	r2, r3
 8009218:	d900      	bls.n	800921c <send+0x188>
      freesize = getSn_TX_FSR(sn);
 800921a:	e7cc      	b.n	80091b6 <send+0x122>
      if(len <= freesize) break;
 800921c:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 800921e:	88ba      	ldrh	r2, [r7, #4]
 8009220:	79fb      	ldrb	r3, [r7, #7]
 8009222:	6839      	ldr	r1, [r7, #0]
 8009224:	4618      	mov	r0, r3
 8009226:	f7ff fb53 	bl	80088d0 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 800922a:	79fb      	ldrb	r3, [r7, #7]
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	3301      	adds	r3, #1
 8009230:	00db      	lsls	r3, r3, #3
 8009232:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8009236:	2120      	movs	r1, #32
 8009238:	4618      	mov	r0, r3
 800923a:	f7ff f9a9 	bl	8008590 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 800923e:	bf00      	nop
 8009240:	79fb      	ldrb	r3, [r7, #7]
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	3301      	adds	r3, #1
 8009246:	00db      	lsls	r3, r3, #3
 8009248:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800924c:	4618      	mov	r0, r3
 800924e:	f7ff f953 	bl	80084f8 <WIZCHIP_READ>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d1f3      	bne.n	8009240 <send+0x1ac>
   sock_is_sending |= (1 << sn);
 8009258:	79fb      	ldrb	r3, [r7, #7]
 800925a:	2201      	movs	r2, #1
 800925c:	fa02 f303 	lsl.w	r3, r2, r3
 8009260:	b21a      	sxth	r2, r3
 8009262:	4b06      	ldr	r3, [pc, #24]	@ (800927c <send+0x1e8>)
 8009264:	881b      	ldrh	r3, [r3, #0]
 8009266:	b21b      	sxth	r3, r3
 8009268:	4313      	orrs	r3, r2
 800926a:	b21b      	sxth	r3, r3
 800926c:	b29a      	uxth	r2, r3
 800926e:	4b03      	ldr	r3, [pc, #12]	@ (800927c <send+0x1e8>)
 8009270:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8009272:	88bb      	ldrh	r3, [r7, #4]
}
 8009274:	4618      	mov	r0, r3
 8009276:	3710      	adds	r7, #16
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	200015be 	.word	0x200015be
 8009280:	200015bc 	.word	0x200015bc

08009284 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8009284:	b590      	push	{r4, r7, lr}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	4603      	mov	r3, r0
 800928c:	6039      	str	r1, [r7, #0]
 800928e:	71fb      	strb	r3, [r7, #7]
 8009290:	4613      	mov	r3, r2
 8009292:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8009294:	2300      	movs	r3, #0
 8009296:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8009298:	2300      	movs	r3, #0
 800929a:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 800929c:	79fb      	ldrb	r3, [r7, #7]
 800929e:	2b08      	cmp	r3, #8
 80092a0:	d902      	bls.n	80092a8 <recv+0x24>
 80092a2:	f04f 33ff 	mov.w	r3, #4294967295
 80092a6:	e09b      	b.n	80093e0 <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80092a8:	79fb      	ldrb	r3, [r7, #7]
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	3301      	adds	r3, #1
 80092ae:	00db      	lsls	r3, r3, #3
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7ff f921 	bl	80084f8 <WIZCHIP_READ>
 80092b6:	4603      	mov	r3, r0
 80092b8:	f003 030f 	and.w	r3, r3, #15
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d002      	beq.n	80092c6 <recv+0x42>
 80092c0:	f06f 0304 	mvn.w	r3, #4
 80092c4:	e08c      	b.n	80093e0 <recv+0x15c>
   CHECK_SOCKDATA();
 80092c6:	88bb      	ldrh	r3, [r7, #4]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d102      	bne.n	80092d2 <recv+0x4e>
 80092cc:	f06f 030d 	mvn.w	r3, #13
 80092d0:	e086      	b.n	80093e0 <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 80092d2:	79fb      	ldrb	r3, [r7, #7]
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	3301      	adds	r3, #1
 80092d8:	00db      	lsls	r3, r3, #3
 80092da:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 80092de:	4618      	mov	r0, r3
 80092e0:	f7ff f90a 	bl	80084f8 <WIZCHIP_READ>
 80092e4:	4603      	mov	r3, r0
 80092e6:	029b      	lsls	r3, r3, #10
 80092e8:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 80092ea:	89ba      	ldrh	r2, [r7, #12]
 80092ec:	88bb      	ldrh	r3, [r7, #4]
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d201      	bcs.n	80092f6 <recv+0x72>
 80092f2:	89bb      	ldrh	r3, [r7, #12]
 80092f4:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 80092f6:	79fb      	ldrb	r3, [r7, #7]
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7ff faa0 	bl	800883e <getSn_RX_RSR>
 80092fe:	4603      	mov	r3, r0
 8009300:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8009302:	79fb      	ldrb	r3, [r7, #7]
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	3301      	adds	r3, #1
 8009308:	00db      	lsls	r3, r3, #3
 800930a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800930e:	4618      	mov	r0, r3
 8009310:	f7ff f8f2 	bl	80084f8 <WIZCHIP_READ>
 8009314:	4603      	mov	r3, r0
 8009316:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8009318:	7bfb      	ldrb	r3, [r7, #15]
 800931a:	2b17      	cmp	r3, #23
 800931c:	d026      	beq.n	800936c <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 800931e:	7bfb      	ldrb	r3, [r7, #15]
 8009320:	2b1c      	cmp	r3, #28
 8009322:	d11c      	bne.n	800935e <recv+0xda>
            {
               if(recvsize != 0) break;
 8009324:	89bb      	ldrh	r3, [r7, #12]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d133      	bne.n	8009392 <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 800932a:	79fb      	ldrb	r3, [r7, #7]
 800932c:	4618      	mov	r0, r3
 800932e:	f7ff fa3d 	bl	80087ac <getSn_TX_FSR>
 8009332:	4603      	mov	r3, r0
 8009334:	461c      	mov	r4, r3
 8009336:	79fb      	ldrb	r3, [r7, #7]
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	3301      	adds	r3, #1
 800933c:	00db      	lsls	r3, r3, #3
 800933e:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8009342:	4618      	mov	r0, r3
 8009344:	f7ff f8d8 	bl	80084f8 <WIZCHIP_READ>
 8009348:	4603      	mov	r3, r0
 800934a:	029b      	lsls	r3, r3, #10
 800934c:	429c      	cmp	r4, r3
 800934e:	d10d      	bne.n	800936c <recv+0xe8>
               {
                  close(sn);
 8009350:	79fb      	ldrb	r3, [r7, #7]
 8009352:	4618      	mov	r0, r3
 8009354:	f7ff fc84 	bl	8008c60 <close>
                  return SOCKERR_SOCKSTATUS;
 8009358:	f06f 0306 	mvn.w	r3, #6
 800935c:	e040      	b.n	80093e0 <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 800935e:	79fb      	ldrb	r3, [r7, #7]
 8009360:	4618      	mov	r0, r3
 8009362:	f7ff fc7d 	bl	8008c60 <close>
               return SOCKERR_SOCKSTATUS;
 8009366:	f06f 0306 	mvn.w	r3, #6
 800936a:	e039      	b.n	80093e0 <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 800936c:	4b1e      	ldr	r3, [pc, #120]	@ (80093e8 <recv+0x164>)
 800936e:	881b      	ldrh	r3, [r3, #0]
 8009370:	461a      	mov	r2, r3
 8009372:	79fb      	ldrb	r3, [r7, #7]
 8009374:	fa42 f303 	asr.w	r3, r2, r3
 8009378:	f003 0301 	and.w	r3, r3, #1
 800937c:	2b00      	cmp	r3, #0
 800937e:	d004      	beq.n	800938a <recv+0x106>
 8009380:	89bb      	ldrh	r3, [r7, #12]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d101      	bne.n	800938a <recv+0x106>
 8009386:	2300      	movs	r3, #0
 8009388:	e02a      	b.n	80093e0 <recv+0x15c>
         if(recvsize != 0) break;
 800938a:	89bb      	ldrh	r3, [r7, #12]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d102      	bne.n	8009396 <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 8009390:	e7b1      	b.n	80092f6 <recv+0x72>
               if(recvsize != 0) break;
 8009392:	bf00      	nop
 8009394:	e000      	b.n	8009398 <recv+0x114>
         if(recvsize != 0) break;
 8009396:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8009398:	89ba      	ldrh	r2, [r7, #12]
 800939a:	88bb      	ldrh	r3, [r7, #4]
 800939c:	429a      	cmp	r2, r3
 800939e:	d201      	bcs.n	80093a4 <recv+0x120>
 80093a0:	89bb      	ldrh	r3, [r7, #12]
 80093a2:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 80093a4:	88ba      	ldrh	r2, [r7, #4]
 80093a6:	79fb      	ldrb	r3, [r7, #7]
 80093a8:	6839      	ldr	r1, [r7, #0]
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7ff faea 	bl	8008984 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 80093b0:	79fb      	ldrb	r3, [r7, #7]
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	3301      	adds	r3, #1
 80093b6:	00db      	lsls	r3, r3, #3
 80093b8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80093bc:	2140      	movs	r1, #64	@ 0x40
 80093be:	4618      	mov	r0, r3
 80093c0:	f7ff f8e6 	bl	8008590 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80093c4:	bf00      	nop
 80093c6:	79fb      	ldrb	r3, [r7, #7]
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	3301      	adds	r3, #1
 80093cc:	00db      	lsls	r3, r3, #3
 80093ce:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7ff f890 	bl	80084f8 <WIZCHIP_READ>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1f3      	bne.n	80093c6 <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80093de:	88bb      	ldrh	r3, [r7, #4]
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3714      	adds	r7, #20
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd90      	pop	{r4, r7, pc}
 80093e8:	200015bc 	.word	0x200015bc

080093ec <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80093ec:	b480      	push	{r7}
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	bf00      	nop
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr

080093fa <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80093fa:	b480      	push	{r7}
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	bf00      	nop
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8009408:	b480      	push	{r7}
 800940a:	af00      	add	r7, sp, #0
 800940c:	bf00      	nop
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr

08009416 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8009416:	b480      	push	{r7}
 8009418:	af00      	add	r7, sp, #0
 800941a:	bf00      	nop
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	b2db      	uxtb	r3, r3
 8009432:	4618      	mov	r0, r3
 8009434:	370c      	adds	r7, #12
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr

0800943e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800943e:	b480      	push	{r7}
 8009440:	b083      	sub	sp, #12
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
 8009446:	460b      	mov	r3, r1
 8009448:	70fb      	strb	r3, [r7, #3]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	78fa      	ldrb	r2, [r7, #3]
 800944e:	701a      	strb	r2, [r3, #0]
 8009450:	bf00      	nop
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 800945c:	b480      	push	{r7}
 800945e:	af00      	add	r7, sp, #0
 8009460:	2300      	movs	r3, #0
 8009462:	4618      	mov	r0, r3
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	4603      	mov	r3, r0
 8009474:	71fb      	strb	r3, [r7, #7]
 8009476:	bf00      	nop
 8009478:	370c      	adds	r7, #12
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr
	...

08009484 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d002      	beq.n	800949a <reg_wizchip_cs_cbfunc+0x16>
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d106      	bne.n	80094a8 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800949a:	4b0a      	ldr	r3, [pc, #40]	@ (80094c4 <reg_wizchip_cs_cbfunc+0x40>)
 800949c:	4a0a      	ldr	r2, [pc, #40]	@ (80094c8 <reg_wizchip_cs_cbfunc+0x44>)
 800949e:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80094a0:	4b08      	ldr	r3, [pc, #32]	@ (80094c4 <reg_wizchip_cs_cbfunc+0x40>)
 80094a2:	4a0a      	ldr	r2, [pc, #40]	@ (80094cc <reg_wizchip_cs_cbfunc+0x48>)
 80094a4:	619a      	str	r2, [r3, #24]
 80094a6:	e006      	b.n	80094b6 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80094a8:	4a06      	ldr	r2, [pc, #24]	@ (80094c4 <reg_wizchip_cs_cbfunc+0x40>)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 80094ae:	4a05      	ldr	r2, [pc, #20]	@ (80094c4 <reg_wizchip_cs_cbfunc+0x40>)
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	6193      	str	r3, [r2, #24]
   }
}
 80094b4:	bf00      	nop
 80094b6:	bf00      	nop
 80094b8:	370c      	adds	r7, #12
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	2000003c 	.word	0x2000003c
 80094c8:	08009409 	.word	0x08009409
 80094cc:	08009417 	.word	0x08009417

080094d0 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80094da:	bf00      	nop
 80094dc:	4b0f      	ldr	r3, [pc, #60]	@ (800951c <reg_wizchip_spi_cbfunc+0x4c>)
 80094de:	881b      	ldrh	r3, [r3, #0]
 80094e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d0f9      	beq.n	80094dc <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d002      	beq.n	80094f4 <reg_wizchip_spi_cbfunc+0x24>
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d106      	bne.n	8009502 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80094f4:	4b09      	ldr	r3, [pc, #36]	@ (800951c <reg_wizchip_spi_cbfunc+0x4c>)
 80094f6:	4a0a      	ldr	r2, [pc, #40]	@ (8009520 <reg_wizchip_spi_cbfunc+0x50>)
 80094f8:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80094fa:	4b08      	ldr	r3, [pc, #32]	@ (800951c <reg_wizchip_spi_cbfunc+0x4c>)
 80094fc:	4a09      	ldr	r2, [pc, #36]	@ (8009524 <reg_wizchip_spi_cbfunc+0x54>)
 80094fe:	621a      	str	r2, [r3, #32]
 8009500:	e006      	b.n	8009510 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8009502:	4a06      	ldr	r2, [pc, #24]	@ (800951c <reg_wizchip_spi_cbfunc+0x4c>)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8009508:	4a04      	ldr	r2, [pc, #16]	@ (800951c <reg_wizchip_spi_cbfunc+0x4c>)
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	6213      	str	r3, [r2, #32]
   }
}
 800950e:	bf00      	nop
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr
 800951c:	2000003c 	.word	0x2000003c
 8009520:	0800945d 	.word	0x0800945d
 8009524:	0800946d 	.word	0x0800946d

08009528 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b086      	sub	sp, #24
 800952c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800952e:	1d3b      	adds	r3, r7, #4
 8009530:	2206      	movs	r2, #6
 8009532:	4619      	mov	r1, r3
 8009534:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8009538:	f7ff f878 	bl	800862c <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800953c:	f107 0314 	add.w	r3, r7, #20
 8009540:	2204      	movs	r2, #4
 8009542:	4619      	mov	r1, r3
 8009544:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8009548:	f7ff f870 	bl	800862c <WIZCHIP_READ_BUF>
 800954c:	f107 0310 	add.w	r3, r7, #16
 8009550:	2204      	movs	r2, #4
 8009552:	4619      	mov	r1, r3
 8009554:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8009558:	f7ff f868 	bl	800862c <WIZCHIP_READ_BUF>
 800955c:	f107 030c 	add.w	r3, r7, #12
 8009560:	2204      	movs	r2, #4
 8009562:	4619      	mov	r1, r3
 8009564:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8009568:	f7ff f860 	bl	800862c <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 800956c:	2180      	movs	r1, #128	@ 0x80
 800956e:	2000      	movs	r0, #0
 8009570:	f7ff f80e 	bl	8008590 <WIZCHIP_WRITE>
   getMR(); // for delay
 8009574:	2000      	movs	r0, #0
 8009576:	f7fe ffbf 	bl	80084f8 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800957a:	1d3b      	adds	r3, r7, #4
 800957c:	2206      	movs	r2, #6
 800957e:	4619      	mov	r1, r3
 8009580:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8009584:	f7ff f8b2 	bl	80086ec <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8009588:	f107 0314 	add.w	r3, r7, #20
 800958c:	2204      	movs	r2, #4
 800958e:	4619      	mov	r1, r3
 8009590:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8009594:	f7ff f8aa 	bl	80086ec <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8009598:	f107 0310 	add.w	r3, r7, #16
 800959c:	2204      	movs	r2, #4
 800959e:	4619      	mov	r1, r3
 80095a0:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80095a4:	f7ff f8a2 	bl	80086ec <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80095a8:	f107 030c 	add.w	r3, r7, #12
 80095ac:	2204      	movs	r2, #4
 80095ae:	4619      	mov	r1, r3
 80095b0:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80095b4:	f7ff f89a 	bl	80086ec <WIZCHIP_WRITE_BUF>
}
 80095b8:	bf00      	nop
 80095ba:	3718      	adds	r7, #24
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80095ca:	2300      	movs	r3, #0
 80095cc:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80095ce:	f7ff ffab 	bl	8009528 <wizchip_sw_reset>
   if(txsize)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d03b      	beq.n	8009650 <wizchip_init+0x90>
   {
      tmp = 0;
 80095d8:	2300      	movs	r3, #0
 80095da:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80095dc:	2300      	movs	r3, #0
 80095de:	73fb      	strb	r3, [r7, #15]
 80095e0:	e015      	b.n	800960e <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80095e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	4413      	add	r3, r2
 80095ea:	781a      	ldrb	r2, [r3, #0]
 80095ec:	7bbb      	ldrb	r3, [r7, #14]
 80095ee:	4413      	add	r3, r2
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 80095f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095f8:	2b10      	cmp	r3, #16
 80095fa:	dd02      	ble.n	8009602 <wizchip_init+0x42>
 80095fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009600:	e066      	b.n	80096d0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009606:	b2db      	uxtb	r3, r3
 8009608:	3301      	adds	r3, #1
 800960a:	b2db      	uxtb	r3, r3
 800960c:	73fb      	strb	r3, [r7, #15]
 800960e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009612:	2b07      	cmp	r3, #7
 8009614:	dde5      	ble.n	80095e2 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009616:	2300      	movs	r3, #0
 8009618:	73fb      	strb	r3, [r7, #15]
 800961a:	e015      	b.n	8009648 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 800961c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	3301      	adds	r3, #1
 8009624:	00db      	lsls	r3, r3, #3
 8009626:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 800962a:	4618      	mov	r0, r3
 800962c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	4413      	add	r3, r2
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	4619      	mov	r1, r3
 8009638:	f7fe ffaa 	bl	8008590 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800963c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009640:	b2db      	uxtb	r3, r3
 8009642:	3301      	adds	r3, #1
 8009644:	b2db      	uxtb	r3, r3
 8009646:	73fb      	strb	r3, [r7, #15]
 8009648:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800964c:	2b07      	cmp	r3, #7
 800964e:	dde5      	ble.n	800961c <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d03b      	beq.n	80096ce <wizchip_init+0x10e>
   {
      tmp = 0;
 8009656:	2300      	movs	r3, #0
 8009658:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800965a:	2300      	movs	r3, #0
 800965c:	73fb      	strb	r3, [r7, #15]
 800965e:	e015      	b.n	800968c <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8009660:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009664:	683a      	ldr	r2, [r7, #0]
 8009666:	4413      	add	r3, r2
 8009668:	781a      	ldrb	r2, [r3, #0]
 800966a:	7bbb      	ldrb	r3, [r7, #14]
 800966c:	4413      	add	r3, r2
 800966e:	b2db      	uxtb	r3, r3
 8009670:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8009672:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009676:	2b10      	cmp	r3, #16
 8009678:	dd02      	ble.n	8009680 <wizchip_init+0xc0>
 800967a:	f04f 33ff 	mov.w	r3, #4294967295
 800967e:	e027      	b.n	80096d0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009680:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009684:	b2db      	uxtb	r3, r3
 8009686:	3301      	adds	r3, #1
 8009688:	b2db      	uxtb	r3, r3
 800968a:	73fb      	strb	r3, [r7, #15]
 800968c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009690:	2b07      	cmp	r3, #7
 8009692:	dde5      	ble.n	8009660 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009694:	2300      	movs	r3, #0
 8009696:	73fb      	strb	r3, [r7, #15]
 8009698:	e015      	b.n	80096c6 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800969a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800969e:	009b      	lsls	r3, r3, #2
 80096a0:	3301      	adds	r3, #1
 80096a2:	00db      	lsls	r3, r3, #3
 80096a4:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 80096a8:	4618      	mov	r0, r3
 80096aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096ae:	683a      	ldr	r2, [r7, #0]
 80096b0:	4413      	add	r3, r2
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	4619      	mov	r1, r3
 80096b6:	f7fe ff6b 	bl	8008590 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80096ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	3301      	adds	r3, #1
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	73fb      	strb	r3, [r7, #15]
 80096c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096ca:	2b07      	cmp	r3, #7
 80096cc:	dde5      	ble.n	800969a <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 80096ce:	2300      	movs	r3, #0
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2206      	movs	r2, #6
 80096e4:	4619      	mov	r1, r3
 80096e6:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80096ea:	f7fe ffff 	bl	80086ec <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	330e      	adds	r3, #14
 80096f2:	2204      	movs	r2, #4
 80096f4:	4619      	mov	r1, r3
 80096f6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80096fa:	f7fe fff7 	bl	80086ec <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	330a      	adds	r3, #10
 8009702:	2204      	movs	r2, #4
 8009704:	4619      	mov	r1, r3
 8009706:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800970a:	f7fe ffef 	bl	80086ec <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	3306      	adds	r3, #6
 8009712:	2204      	movs	r2, #4
 8009714:	4619      	mov	r1, r3
 8009716:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800971a:	f7fe ffe7 	bl	80086ec <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	7c9a      	ldrb	r2, [r3, #18]
 8009722:	4b0b      	ldr	r3, [pc, #44]	@ (8009750 <wizchip_setnetinfo+0x78>)
 8009724:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	7cda      	ldrb	r2, [r3, #19]
 800972a:	4b09      	ldr	r3, [pc, #36]	@ (8009750 <wizchip_setnetinfo+0x78>)
 800972c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	7d1a      	ldrb	r2, [r3, #20]
 8009732:	4b07      	ldr	r3, [pc, #28]	@ (8009750 <wizchip_setnetinfo+0x78>)
 8009734:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	7d5a      	ldrb	r2, [r3, #21]
 800973a:	4b05      	ldr	r3, [pc, #20]	@ (8009750 <wizchip_setnetinfo+0x78>)
 800973c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	7d9a      	ldrb	r2, [r3, #22]
 8009742:	4b04      	ldr	r3, [pc, #16]	@ (8009754 <wizchip_setnetinfo+0x7c>)
 8009744:	701a      	strb	r2, [r3, #0]
}
 8009746:	bf00      	nop
 8009748:	3708      	adds	r7, #8
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	200015d8 	.word	0x200015d8
 8009754:	200015dc 	.word	0x200015dc

08009758 <scan_files>:
//========================================================================================================================================== MOD
// Funciones modificadas para el FTP:
/* List contents of a directory
 * Taken from: http://elm-chan.org/fsw/ff/doc/readdir.html*/
FRESULT scan_files (char* path, char* dbuf, int* size)
{
 8009758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800975a:	b09f      	sub	sp, #124	@ 0x7c
 800975c:	af08      	add	r7, sp, #32
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	607a      	str	r2, [r7, #4]
    FRESULT res;
    DIR dir;
    UINT i;
    static FILINFO fno;
    unsigned int year = 0;
 8009764:	2300      	movs	r3, #0
 8009766:	653b      	str	r3, [r7, #80]	@ 0x50
	char month, day = 0b00000000;
 8009768:	2300      	movs	r3, #0
 800976a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    char hour, min, second = 0b00000000;
 800976e:	2300      	movs	r3, #0
 8009770:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

    res = f_opendir(&dir, path); /* Open the directory */
 8009774:	f107 0310 	add.w	r3, r7, #16
 8009778:	68f9      	ldr	r1, [r7, #12]
 800977a:	4618      	mov	r0, r3
 800977c:	f7fe fb0b 	bl	8007d96 <f_opendir>
 8009780:	4603      	mov	r3, r0
 8009782:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if(res != FR_OK)
 8009786:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800978a:	2b00      	cmp	r3, #0
 800978c:	d009      	beq.n	80097a2 <scan_files+0x4a>
    {
    	printf("Failed to open \"%s\". (%u)\n", path, res);
 800978e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009792:	461a      	mov	r2, r3
 8009794:	68f9      	ldr	r1, [r7, #12]
 8009796:	486c      	ldr	r0, [pc, #432]	@ (8009948 <scan_files+0x1f0>)
 8009798:	f001 fff0 	bl	800b77c <iprintf>
    	return res;
 800979c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80097a0:	e0ce      	b.n	8009940 <scan_files+0x1e8>
    }
    if (res == FR_OK)
 80097a2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f040 80c8 	bne.w	800993c <scan_files+0x1e4>
    {
        for (;;)
        {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80097ac:	f107 0310 	add.w	r3, r7, #16
 80097b0:	4966      	ldr	r1, [pc, #408]	@ (800994c <scan_files+0x1f4>)
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7fe fb88 	bl	8007ec8 <f_readdir>
 80097b8:	4603      	mov	r3, r0
 80097ba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80097be:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	f040 80b5 	bne.w	8009932 <scan_files+0x1da>
 80097c8:	4b60      	ldr	r3, [pc, #384]	@ (800994c <scan_files+0x1f4>)
 80097ca:	7d9b      	ldrb	r3, [r3, #22]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f000 80b0 	beq.w	8009932 <scan_files+0x1da>
            if (fno.fattrib & AM_DIR)					   /* It is a directory*/
 80097d2:	4b5e      	ldr	r3, [pc, #376]	@ (800994c <scan_files+0x1f4>)
 80097d4:	7a1b      	ldrb	r3, [r3, #8]
 80097d6:	f003 0310 	and.w	r3, r3, #16
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d052      	beq.n	8009884 <scan_files+0x12c>
            {
            	i = strlen((char*)dbuf);
 80097de:	68b8      	ldr	r0, [r7, #8]
 80097e0:	f7f6 fd28 	bl	8000234 <strlen>
 80097e4:	64b8      	str	r0, [r7, #72]	@ 0x48
            	year = (fno.fdate >> 9) + 1980;			   /*Year origin from 1980 (0..127)*/
 80097e6:	4b59      	ldr	r3, [pc, #356]	@ (800994c <scan_files+0x1f4>)
 80097e8:	889b      	ldrh	r3, [r3, #4]
 80097ea:	0a5b      	lsrs	r3, r3, #9
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	f203 73bc 	addw	r3, r3, #1980	@ 0x7bc
 80097f2:	653b      	str	r3, [r7, #80]	@ 0x50
            	month = (fno.fdate >> 5) & 15;			   /*Month (1..12)*/
 80097f4:	4b55      	ldr	r3, [pc, #340]	@ (800994c <scan_files+0x1f4>)
 80097f6:	889b      	ldrh	r3, [r3, #4]
 80097f8:	095b      	lsrs	r3, r3, #5
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	f003 030f 	and.w	r3, r3, #15
 8009802:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            	day = fno.fdate & 31;					   /*Day (1..31)*/
 8009806:	4b51      	ldr	r3, [pc, #324]	@ (800994c <scan_files+0x1f4>)
 8009808:	889b      	ldrh	r3, [r3, #4]
 800980a:	b2db      	uxtb	r3, r3
 800980c:	f003 031f 	and.w	r3, r3, #31
 8009810:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            	/*==================*/
            	hour = (fno.ftime >> 11) & 31;			   /*Hour (0..23)*/
 8009814:	4b4d      	ldr	r3, [pc, #308]	@ (800994c <scan_files+0x1f4>)
 8009816:	88db      	ldrh	r3, [r3, #6]
 8009818:	0adb      	lsrs	r3, r3, #11
 800981a:	b29b      	uxth	r3, r3
 800981c:	b2db      	uxtb	r3, r3
 800981e:	f003 031f 	and.w	r3, r3, #31
 8009822:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
            	min = (fno.ftime >> 5) & 63;			   /*Minute (0..59)*/
 8009826:	4b49      	ldr	r3, [pc, #292]	@ (800994c <scan_files+0x1f4>)
 8009828:	88db      	ldrh	r3, [r3, #6]
 800982a:	095b      	lsrs	r3, r3, #5
 800982c:	b29b      	uxth	r3, r3
 800982e:	b2db      	uxtb	r3, r3
 8009830:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009834:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            	second = fno.ftime & 31;				   /*Second / 2 (0..29)*/
 8009838:	4b44      	ldr	r3, [pc, #272]	@ (800994c <scan_files+0x1f4>)
 800983a:	88db      	ldrh	r3, [r3, #6]
 800983c:	b2db      	uxtb	r3, r3
 800983e:	f003 031f 	and.w	r3, r3, #31
 8009842:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
            	*size = sprintf(&dbuf[i], "type=dir;modify=%u%02d%02d%02d%02d%02d; %s/%s\r\n", year, month, day, hour, min, second, path, fno.fname);
 8009846:	68ba      	ldr	r2, [r7, #8]
 8009848:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800984a:	18d5      	adds	r5, r2, r3
 800984c:	f897 6047 	ldrb.w	r6, [r7, #71]	@ 0x47
 8009850:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009854:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8009858:	f897 1045 	ldrb.w	r1, [r7, #69]	@ 0x45
 800985c:	f897 004e 	ldrb.w	r0, [r7, #78]	@ 0x4e
 8009860:	4c3b      	ldr	r4, [pc, #236]	@ (8009950 <scan_files+0x1f8>)
 8009862:	9405      	str	r4, [sp, #20]
 8009864:	68fc      	ldr	r4, [r7, #12]
 8009866:	9404      	str	r4, [sp, #16]
 8009868:	9003      	str	r0, [sp, #12]
 800986a:	9102      	str	r1, [sp, #8]
 800986c:	9201      	str	r2, [sp, #4]
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	4633      	mov	r3, r6
 8009872:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009874:	4937      	ldr	r1, [pc, #220]	@ (8009954 <scan_files+0x1fc>)
 8009876:	4628      	mov	r0, r5
 8009878:	f001 fff8 	bl	800b86c <siprintf>
 800987c:	4602      	mov	r2, r0
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	601a      	str	r2, [r3, #0]
 8009882:	e793      	b.n	80097ac <scan_files+0x54>
            }
            else 										   /* It is a file. */
            {
                i = strlen((char*)dbuf);
 8009884:	68b8      	ldr	r0, [r7, #8]
 8009886:	f7f6 fcd5 	bl	8000234 <strlen>
 800988a:	64b8      	str	r0, [r7, #72]	@ 0x48
                year = (fno.fdate >> 9) + 1980;
 800988c:	4b2f      	ldr	r3, [pc, #188]	@ (800994c <scan_files+0x1f4>)
 800988e:	889b      	ldrh	r3, [r3, #4]
 8009890:	0a5b      	lsrs	r3, r3, #9
 8009892:	b29b      	uxth	r3, r3
 8009894:	f203 73bc 	addw	r3, r3, #1980	@ 0x7bc
 8009898:	653b      	str	r3, [r7, #80]	@ 0x50
                month = (fno.fdate >> 5) & 15;
 800989a:	4b2c      	ldr	r3, [pc, #176]	@ (800994c <scan_files+0x1f4>)
 800989c:	889b      	ldrh	r3, [r3, #4]
 800989e:	095b      	lsrs	r3, r3, #5
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	f003 030f 	and.w	r3, r3, #15
 80098a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                day = fno.fdate & 31;
 80098ac:	4b27      	ldr	r3, [pc, #156]	@ (800994c <scan_files+0x1f4>)
 80098ae:	889b      	ldrh	r3, [r3, #4]
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	f003 031f 	and.w	r3, r3, #31
 80098b6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                //==================
                hour = (fno.ftime >> 11) & 31;
 80098ba:	4b24      	ldr	r3, [pc, #144]	@ (800994c <scan_files+0x1f4>)
 80098bc:	88db      	ldrh	r3, [r3, #6]
 80098be:	0adb      	lsrs	r3, r3, #11
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	f003 031f 	and.w	r3, r3, #31
 80098c8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
                min = (fno.ftime >> 5) & 63;
 80098cc:	4b1f      	ldr	r3, [pc, #124]	@ (800994c <scan_files+0x1f4>)
 80098ce:	88db      	ldrh	r3, [r3, #6]
 80098d0:	095b      	lsrs	r3, r3, #5
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80098da:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                second = fno.ftime & 31;
 80098de:	4b1b      	ldr	r3, [pc, #108]	@ (800994c <scan_files+0x1f4>)
 80098e0:	88db      	ldrh	r3, [r3, #6]
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	f003 031f 	and.w	r3, r3, #31
 80098e8:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
                *size = sprintf(&dbuf[i], "type=file;size=%lu;modify=%u%02d%02d%02d%02d%02d; %s/%s\r\n", fno.fsize, year, month, day, hour, min, second, path, fno.fname);
 80098ec:	68ba      	ldr	r2, [r7, #8]
 80098ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098f0:	18d6      	adds	r6, r2, r3
 80098f2:	4b16      	ldr	r3, [pc, #88]	@ (800994c <scan_files+0x1f4>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	603b      	str	r3, [r7, #0]
 80098f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80098fc:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8009900:	f897 1046 	ldrb.w	r1, [r7, #70]	@ 0x46
 8009904:	f897 0045 	ldrb.w	r0, [r7, #69]	@ 0x45
 8009908:	f897 404e 	ldrb.w	r4, [r7, #78]	@ 0x4e
 800990c:	4d10      	ldr	r5, [pc, #64]	@ (8009950 <scan_files+0x1f8>)
 800990e:	9506      	str	r5, [sp, #24]
 8009910:	68fd      	ldr	r5, [r7, #12]
 8009912:	9505      	str	r5, [sp, #20]
 8009914:	9404      	str	r4, [sp, #16]
 8009916:	9003      	str	r0, [sp, #12]
 8009918:	9102      	str	r1, [sp, #8]
 800991a:	9201      	str	r2, [sp, #4]
 800991c:	9300      	str	r3, [sp, #0]
 800991e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009920:	683a      	ldr	r2, [r7, #0]
 8009922:	490d      	ldr	r1, [pc, #52]	@ (8009958 <scan_files+0x200>)
 8009924:	4630      	mov	r0, r6
 8009926:	f001 ffa1 	bl	800b86c <siprintf>
 800992a:	4602      	mov	r2, r0
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	601a      	str	r2, [r3, #0]
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8009930:	e73c      	b.n	80097ac <scan_files+0x54>
            }
        }
        f_closedir(&dir);
 8009932:	f107 0310 	add.w	r3, r7, #16
 8009936:	4618      	mov	r0, r3
 8009938:	f7fe faa0 	bl	8007e7c <f_closedir>
    }
    return res;
 800993c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8009940:	4618      	mov	r0, r3
 8009942:	375c      	adds	r7, #92	@ 0x5c
 8009944:	46bd      	mov	sp, r7
 8009946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009948:	0800cd30 	.word	0x0800cd30
 800994c:	200027cc 	.word	0x200027cc
 8009950:	200027e2 	.word	0x200027e2
 8009954:	0800cd4c 	.word	0x0800cd4c
 8009958:	0800cd7c 	.word	0x0800cd7c

0800995c <get_filesize>:


/* Return Filesize in unit BYTES, if it's DIRECTORY return 0 */
int get_filesize(char* path)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	f5ad 5d83 	sub.w	sp, sp, #4192	@ 0x1060
 8009962:	b086      	sub	sp, #24
 8009964:	af00      	add	r7, sp, #0
 8009966:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800996a:	f843 0c74 	str.w	r0, [r3, #-116]
	FIL file_s;
	FSIZE_t	o_size;
	FRESULT res;

	res = f_open(&file_s, path, FA_READ);
 800996e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8009972:	4619      	mov	r1, r3
 8009974:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009978:	3b18      	subs	r3, #24
 800997a:	2201      	movs	r2, #1
 800997c:	f851 1c74 	ldr.w	r1, [r1, #-116]
 8009980:	4618      	mov	r0, r3
 8009982:	f7fd fca5 	bl	80072d0 <f_open>
 8009986:	4603      	mov	r3, r0
 8009988:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800998c:	f102 0217 	add.w	r2, r2, #23
 8009990:	7013      	strb	r3, [r2, #0]
	if(res != FR_OK) 					 /*File not found*/
 8009992:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8009996:	f103 0317 	add.w	r3, r3, #23
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d044      	beq.n	8009a2a <get_filesize+0xce>
	{
	    DIR dir;
	    res = f_opendir(&dir, path);     /* Is it Directory? */
 80099a0:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80099a4:	461a      	mov	r2, r3
 80099a6:	f107 0318 	add.w	r3, r7, #24
 80099aa:	3b0c      	subs	r3, #12
 80099ac:	f852 1c74 	ldr.w	r1, [r2, #-116]
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7fe f9f0 	bl	8007d96 <f_opendir>
 80099b6:	4603      	mov	r3, r0
 80099b8:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 80099bc:	f102 0217 	add.w	r2, r2, #23
 80099c0:	7013      	strb	r3, [r2, #0]
	        if(res != FR_OK)
 80099c2:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80099c6:	f103 0317 	add.w	r3, r3, #23
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d00f      	beq.n	80099f0 <get_filesize+0x94>
	        {
	        	printf("Failed to Open DIR \"%s\". (%u)\n\r", path, res);
 80099d0:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80099d4:	f103 0317 	add.w	r3, r3, #23
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80099de:	4611      	mov	r1, r2
 80099e0:	461a      	mov	r2, r3
 80099e2:	f851 1c74 	ldr.w	r1, [r1, #-116]
 80099e6:	4827      	ldr	r0, [pc, #156]	@ (8009a84 <get_filesize+0x128>)
 80099e8:	f001 fec8 	bl	800b77c <iprintf>
	        	return 0;                /*It's not directory as well, return 0 for SIZE_CMD error handler*/
 80099ec:	2300      	movs	r3, #0
 80099ee:	e043      	b.n	8009a78 <get_filesize+0x11c>
	        }
	        if (res == FR_OK)
 80099f0:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80099f4:	f103 0317 	add.w	r3, r3, #23
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d115      	bne.n	8009a2a <get_filesize+0xce>
	        {

				printf("Open as DIR \"%s\". (%u)\n\r", path, res);
 80099fe:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8009a02:	f103 0317 	add.w	r3, r3, #23
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8009a0c:	4611      	mov	r1, r2
 8009a0e:	461a      	mov	r2, r3
 8009a10:	f851 1c74 	ldr.w	r1, [r1, #-116]
 8009a14:	481c      	ldr	r0, [pc, #112]	@ (8009a88 <get_filesize+0x12c>)
 8009a16:	f001 feb1 	bl	800b77c <iprintf>
				f_closedir(&dir);
 8009a1a:	f107 0318 	add.w	r3, r7, #24
 8009a1e:	3b0c      	subs	r3, #12
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7fe fa2b 	bl	8007e7c <f_closedir>
		    	return 0;				 /*return 0 for SIZE_CMD error handler*/
 8009a26:	2300      	movs	r3, #0
 8009a28:	e026      	b.n	8009a78 <get_filesize+0x11c>
	        }
	}
	o_size = file_s.obj.objsize;
 8009a2a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8009a2e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8009a32:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8009a36:	f102 0210 	add.w	r2, r2, #16
 8009a3a:	6013      	str	r3, [r2, #0]
	if(f_close(&file_s) != FR_OK)
 8009a3c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009a40:	3b18      	subs	r3, #24
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7fe f97d 	bl	8007d42 <f_close>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d00f      	beq.n	8009a6e <get_filesize+0x112>
	{
				printf("Failed to close \"%s\". (%u)\n\r", path, res);
 8009a4e:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8009a52:	f103 0317 	add.w	r3, r3, #23
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8009a5c:	4611      	mov	r1, r2
 8009a5e:	461a      	mov	r2, r3
 8009a60:	f851 1c74 	ldr.w	r1, [r1, #-116]
 8009a64:	4809      	ldr	r0, [pc, #36]	@ (8009a8c <get_filesize+0x130>)
 8009a66:	f001 fe89 	bl	800b77c <iprintf>
				return 0;				/*return 0 for SIZE_CMD error handler*/
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	e004      	b.n	8009a78 <get_filesize+0x11c>
	}
	return o_size;
 8009a6e:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8009a72:	f103 0310 	add.w	r3, r3, #16
 8009a76:	681b      	ldr	r3, [r3, #0]
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f507 5783 	add.w	r7, r7, #4192	@ 0x1060
 8009a7e:	3718      	adds	r7, #24
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}
 8009a84:	0800cdb8 	.word	0x0800cdb8
 8009a88:	0800cdd8 	.word	0x0800cdd8
 8009a8c:	0800cdf4 	.word	0x0800cdf4

08009a90 <ftpd_init>:
*/
	return i;
}

void ftpd_init(uint8_t * src_ip)
{
 8009a90:	b590      	push	{r4, r7, lr}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
	ftp.state = FTPS_NOT_LOGIN;
 8009a98:	4b2f      	ldr	r3, [pc, #188]	@ (8009b58 <ftpd_init+0xc8>)
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	70da      	strb	r2, [r3, #3]
	ftp.current_cmd = NO_CMD;
 8009a9e:	4b2e      	ldr	r3, [pc, #184]	@ (8009b58 <ftpd_init+0xc8>)
 8009aa0:	221d      	movs	r2, #29
 8009aa2:	711a      	strb	r2, [r3, #4]
	ftp.dsock_mode = ACTIVE_MODE;
 8009aa4:	4b2c      	ldr	r3, [pc, #176]	@ (8009b58 <ftpd_init+0xc8>)
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	719a      	strb	r2, [r3, #6]

	ftp.ID_Enable = STATUS_USED;
 8009aaa:	4b2b      	ldr	r3, [pc, #172]	@ (8009b58 <ftpd_init+0xc8>)
 8009aac:	2200      	movs	r2, #0
 8009aae:	71da      	strb	r2, [r3, #7]
	ftp.PW_Enable = STATUS_USED;
 8009ab0:	4b29      	ldr	r3, [pc, #164]	@ (8009b58 <ftpd_init+0xc8>)
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	721a      	strb	r2, [r3, #8]

	if(ftp.ID_Enable == STATUS_USED)
 8009ab6:	4b28      	ldr	r3, [pc, #160]	@ (8009b58 <ftpd_init+0xc8>)
 8009ab8:	79db      	ldrb	r3, [r3, #7]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d110      	bne.n	8009ae0 <ftpd_init+0x50>
	{
		strcpy(ftp.username, ftp_ID);
 8009abe:	4b27      	ldr	r3, [pc, #156]	@ (8009b5c <ftpd_init+0xcc>)
 8009ac0:	4a27      	ldr	r2, [pc, #156]	@ (8009b60 <ftpd_init+0xd0>)
 8009ac2:	6810      	ldr	r0, [r2, #0]
 8009ac4:	6018      	str	r0, [r3, #0]
 8009ac6:	8891      	ldrh	r1, [r2, #4]
 8009ac8:	7992      	ldrb	r2, [r2, #6]
 8009aca:	8099      	strh	r1, [r3, #4]
 8009acc:	719a      	strb	r2, [r3, #6]
		printf(" FTP ID[%d]:%s \r\n", strlen(ftp.username), ftp.username);
 8009ace:	4823      	ldr	r0, [pc, #140]	@ (8009b5c <ftpd_init+0xcc>)
 8009ad0:	f7f6 fbb0 	bl	8000234 <strlen>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	4a21      	ldr	r2, [pc, #132]	@ (8009b5c <ftpd_init+0xcc>)
 8009ad8:	4619      	mov	r1, r3
 8009ada:	4822      	ldr	r0, [pc, #136]	@ (8009b64 <ftpd_init+0xd4>)
 8009adc:	f001 fe4e 	bl	800b77c <iprintf>
	}
	if(ftp.PW_Enable == STATUS_USED)
 8009ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8009b58 <ftpd_init+0xc8>)
 8009ae2:	7a1b      	ldrb	r3, [r3, #8]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d10f      	bne.n	8009b08 <ftpd_init+0x78>
	{
		strcpy(ftp.userpassword, ftp_PW);
 8009ae8:	4a1f      	ldr	r2, [pc, #124]	@ (8009b68 <ftpd_init+0xd8>)
 8009aea:	4b20      	ldr	r3, [pc, #128]	@ (8009b6c <ftpd_init+0xdc>)
 8009aec:	4614      	mov	r4, r2
 8009aee:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009af0:	6020      	str	r0, [r4, #0]
 8009af2:	6061      	str	r1, [r4, #4]
 8009af4:	60a2      	str	r2, [r4, #8]
		printf(" FTP PW[%d]:%s \r\n", strlen(ftp.userpassword), ftp.userpassword);
 8009af6:	481c      	ldr	r0, [pc, #112]	@ (8009b68 <ftpd_init+0xd8>)
 8009af8:	f7f6 fb9c 	bl	8000234 <strlen>
 8009afc:	4603      	mov	r3, r0
 8009afe:	4a1a      	ldr	r2, [pc, #104]	@ (8009b68 <ftpd_init+0xd8>)
 8009b00:	4619      	mov	r1, r3
 8009b02:	481b      	ldr	r0, [pc, #108]	@ (8009b70 <ftpd_init+0xe0>)
 8009b04:	f001 fe3a 	bl	800b77c <iprintf>
	}
	


	local_ip.cVal[0] = src_ip[0];
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	781a      	ldrb	r2, [r3, #0]
 8009b0c:	4b19      	ldr	r3, [pc, #100]	@ (8009b74 <ftpd_init+0xe4>)
 8009b0e:	701a      	strb	r2, [r3, #0]
	local_ip.cVal[1] = src_ip[1];
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	785a      	ldrb	r2, [r3, #1]
 8009b14:	4b17      	ldr	r3, [pc, #92]	@ (8009b74 <ftpd_init+0xe4>)
 8009b16:	705a      	strb	r2, [r3, #1]
	local_ip.cVal[2] = src_ip[2];
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	789a      	ldrb	r2, [r3, #2]
 8009b1c:	4b15      	ldr	r3, [pc, #84]	@ (8009b74 <ftpd_init+0xe4>)
 8009b1e:	709a      	strb	r2, [r3, #2]
	local_ip.cVal[3] = src_ip[3];
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	78da      	ldrb	r2, [r3, #3]
 8009b24:	4b13      	ldr	r3, [pc, #76]	@ (8009b74 <ftpd_init+0xe4>)
 8009b26:	70da      	strb	r2, [r3, #3]
	local_port = 35000;
 8009b28:	4b13      	ldr	r3, [pc, #76]	@ (8009b78 <ftpd_init+0xe8>)
 8009b2a:	f648 02b8 	movw	r2, #35000	@ 0x88b8
 8009b2e:	801a      	strh	r2, [r3, #0]
	
	strcpy(ftp.workingdir, "/");
 8009b30:	4a12      	ldr	r2, [pc, #72]	@ (8009b7c <ftpd_init+0xec>)
 8009b32:	4b13      	ldr	r3, [pc, #76]	@ (8009b80 <ftpd_init+0xf0>)
 8009b34:	881b      	ldrh	r3, [r3, #0]
 8009b36:	8013      	strh	r3, [r2, #0]

	socket(CTRL_SOCK, Sn_MR_TCP, IPPORT_FTP, 0x0);
 8009b38:	2300      	movs	r3, #0
 8009b3a:	2215      	movs	r2, #21
 8009b3c:	2101      	movs	r1, #1
 8009b3e:	2002      	movs	r0, #2
 8009b40:	f7fe ff7a 	bl	8008a38 <socket>
    socket(CTRL_SOCK1, Sn_MR_TCP, IPPORT_FTP, 0x0);
 8009b44:	2300      	movs	r3, #0
 8009b46:	2215      	movs	r2, #21
 8009b48:	2101      	movs	r1, #1
 8009b4a:	2004      	movs	r0, #4
 8009b4c:	f7fe ff74 	bl	8008a38 <socket>
}
 8009b50:	bf00      	nop
 8009b52:	370c      	adds	r7, #12
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd90      	pop	{r4, r7, pc}
 8009b58:	200015fc 	.word	0x200015fc
 8009b5c:	20001605 	.word	0x20001605
 8009b60:	0800ce14 	.word	0x0800ce14
 8009b64:	0800ce1c 	.word	0x0800ce1c
 8009b68:	20001669 	.word	0x20001669
 8009b6c:	0800ce30 	.word	0x0800ce30
 8009b70:	0800ce3c 	.word	0x0800ce3c
 8009b74:	200015e8 	.word	0x200015e8
 8009b78:	200015ec 	.word	0x200015ec
 8009b7c:	200016cd 	.word	0x200016cd
 8009b80:	0800ce50 	.word	0x0800ce50

08009b84 <ftpd_run>:

uint8_t ftpd_run(uint8_t * dbuf)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b08a      	sub	sp, #40	@ 0x28
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
	uint16_t size = 0, i;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	827b      	strh	r3, [r7, #18]
	long ret = 0;
 8009b90:	2300      	movs	r3, #0
 8009b92:	617b      	str	r3, [r7, #20]
#endif

	//memset(dbuf, 0, sizeof(_MAX_SS));
	////////////////////////FTP Control 1
	#if 1
    switch(getSn_SR(CTRL_SOCK))
 8009b94:	f44f 7052 	mov.w	r0, #840	@ 0x348
 8009b98:	f7fe fcae 	bl	80084f8 <WIZCHIP_READ>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b1c      	cmp	r3, #28
 8009ba0:	f200 8144 	bhi.w	8009e2c <ftpd_run+0x2a8>
 8009ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8009bac <ftpd_run+0x28>)
 8009ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009baa:	bf00      	nop
 8009bac:	08009db9 	.word	0x08009db9
 8009bb0:	08009e2d 	.word	0x08009e2d
 8009bb4:	08009e2d 	.word	0x08009e2d
 8009bb8:	08009e2d 	.word	0x08009e2d
 8009bbc:	08009e2d 	.word	0x08009e2d
 8009bc0:	08009e2d 	.word	0x08009e2d
 8009bc4:	08009e2d 	.word	0x08009e2d
 8009bc8:	08009e2d 	.word	0x08009e2d
 8009bcc:	08009e2d 	.word	0x08009e2d
 8009bd0:	08009e2d 	.word	0x08009e2d
 8009bd4:	08009e2d 	.word	0x08009e2d
 8009bd8:	08009e2d 	.word	0x08009e2d
 8009bdc:	08009e2d 	.word	0x08009e2d
 8009be0:	08009e2d 	.word	0x08009e2d
 8009be4:	08009e2d 	.word	0x08009e2d
 8009be8:	08009e2d 	.word	0x08009e2d
 8009bec:	08009e2d 	.word	0x08009e2d
 8009bf0:	08009e2d 	.word	0x08009e2d
 8009bf4:	08009e2d 	.word	0x08009e2d
 8009bf8:	08009def 	.word	0x08009def
 8009bfc:	08009e2d 	.word	0x08009e2d
 8009c00:	08009e2d 	.word	0x08009e2d
 8009c04:	08009e2d 	.word	0x08009e2d
 8009c08:	08009c21 	.word	0x08009c21
 8009c0c:	08009e2d 	.word	0x08009e2d
 8009c10:	08009e2d 	.word	0x08009e2d
 8009c14:	08009e2d 	.word	0x08009e2d
 8009c18:	08009e2d 	.word	0x08009e2d
 8009c1c:	08009d8f 	.word	0x08009d8f
    {
    	case SOCK_ESTABLISHED :
    		if(!connect_state_control)
 8009c20:	4ba7      	ldr	r3, [pc, #668]	@ (8009ec0 <ftpd_run+0x33c>)
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d130      	bne.n	8009c8a <ftpd_run+0x106>
    		{
#if defined(_FTP_DEBUG_)
    			printf("%d:FTP Connected\r\n", CTRL_SOCK);
 8009c28:	2102      	movs	r1, #2
 8009c2a:	48a6      	ldr	r0, [pc, #664]	@ (8009ec4 <ftpd_run+0x340>)
 8009c2c:	f001 fda6 	bl	800b77c <iprintf>
#endif
    			//fsprintf(CTRL_SOCK, banner, HOSTNAME, VERSION);
    			strcpy(ftp.workingdir, "/");
 8009c30:	4aa5      	ldr	r2, [pc, #660]	@ (8009ec8 <ftpd_run+0x344>)
 8009c32:	4ba6      	ldr	r3, [pc, #664]	@ (8009ecc <ftpd_run+0x348>)
 8009c34:	881b      	ldrh	r3, [r3, #0]
 8009c36:	8013      	strh	r3, [r2, #0]
    			sprintf((char *)dbuf, "220 %s FTP version %s ready.\r\n", HOSTNAME, VERSION);
 8009c38:	4ba5      	ldr	r3, [pc, #660]	@ (8009ed0 <ftpd_run+0x34c>)
 8009c3a:	4aa6      	ldr	r2, [pc, #664]	@ (8009ed4 <ftpd_run+0x350>)
 8009c3c:	49a6      	ldr	r1, [pc, #664]	@ (8009ed8 <ftpd_run+0x354>)
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f001 fe14 	bl	800b86c <siprintf>
    			ret = send(CTRL_SOCK, (uint8_t *)dbuf, strlen((const char *)dbuf));
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f7f6 faf5 	bl	8000234 <strlen>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	461a      	mov	r2, r3
 8009c50:	6879      	ldr	r1, [r7, #4]
 8009c52:	2002      	movs	r0, #2
 8009c54:	f7ff fa1e 	bl	8009094 <send>
 8009c58:	6178      	str	r0, [r7, #20]
                
#if defined(_FTP_DEBUG_)
                printf("%d:send() [%s]\r\n",CTRL_SOCK,dbuf);
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	2102      	movs	r1, #2
 8009c5e:	489f      	ldr	r0, [pc, #636]	@ (8009edc <ftpd_run+0x358>)
 8009c60:	f001 fd8c 	bl	800b77c <iprintf>
#endif
    			if(ret < 0)
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	da0b      	bge.n	8009c82 <ftpd_run+0xfe>
    			{
#if defined(_FTP_DEBUG_)
    				printf("%d:send() error:%ld\r\n",CTRL_SOCK,ret);
 8009c6a:	697a      	ldr	r2, [r7, #20]
 8009c6c:	2102      	movs	r1, #2
 8009c6e:	489c      	ldr	r0, [pc, #624]	@ (8009ee0 <ftpd_run+0x35c>)
 8009c70:	f001 fd84 	bl	800b77c <iprintf>
#endif
    				close(CTRL_SOCK);
 8009c74:	2002      	movs	r0, #2
 8009c76:	f7fe fff3 	bl	8008c60 <close>
    				return ret;
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	f000 bd41 	b.w	800a704 <ftpd_run+0xb80>
    			}
    			connect_state_control = 1;
 8009c82:	4b8f      	ldr	r3, [pc, #572]	@ (8009ec0 <ftpd_run+0x33c>)
 8009c84:	2201      	movs	r2, #1
 8009c86:	701a      	strb	r2, [r3, #0]
 8009c88:	e032      	b.n	8009cf0 <ftpd_run+0x16c>
    		}
			#if connect_timeout_en
			else
			{
				if(con_remain_cnt1 > remain_time)
 8009c8a:	4b96      	ldr	r3, [pc, #600]	@ (8009ee4 <ftpd_run+0x360>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a96      	ldr	r2, [pc, #600]	@ (8009ee8 <ftpd_run+0x364>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d910      	bls.n	8009cb6 <ftpd_run+0x132>
				{
					if((ret=disconnect(CTRL_SOCK)) != SOCK_OK) return ret;
 8009c94:	2002      	movs	r0, #2
 8009c96:	f7ff f987 	bl	8008fa8 <disconnect>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	617b      	str	r3, [r7, #20]
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d003      	beq.n	8009cac <ftpd_run+0x128>
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	f000 bd2c 	b.w	800a704 <ftpd_run+0xb80>
			#if defined(_FTP_DEBUG_)
						printf("%d:Timeout Closed\r\n",CTRL_SOCK);
 8009cac:	2102      	movs	r1, #2
 8009cae:	488f      	ldr	r0, [pc, #572]	@ (8009eec <ftpd_run+0x368>)
 8009cb0:	f001 fd64 	bl	800b77c <iprintf>
 8009cb4:	e017      	b.n	8009ce6 <ftpd_run+0x162>
			#endif
				}
				#if defined(_FTP_DEBUG_)
				else if(((con_remain_cnt1 % 10000) == 0) && (con_remain_cnt1 != 0))
 8009cb6:	4b8b      	ldr	r3, [pc, #556]	@ (8009ee4 <ftpd_run+0x360>)
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	4b8d      	ldr	r3, [pc, #564]	@ (8009ef0 <ftpd_run+0x36c>)
 8009cbc:	fba3 1302 	umull	r1, r3, r3, r2
 8009cc0:	0b5b      	lsrs	r3, r3, #13
 8009cc2:	f242 7110 	movw	r1, #10000	@ 0x2710
 8009cc6:	fb01 f303 	mul.w	r3, r1, r3
 8009cca:	1ad3      	subs	r3, r2, r3
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d10a      	bne.n	8009ce6 <ftpd_run+0x162>
 8009cd0:	4b84      	ldr	r3, [pc, #528]	@ (8009ee4 <ftpd_run+0x360>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d006      	beq.n	8009ce6 <ftpd_run+0x162>
				{
					printf("%d:Timeout Count:%ld\r\n", CTRL_SOCK, con_remain_cnt1);
 8009cd8:	4b82      	ldr	r3, [pc, #520]	@ (8009ee4 <ftpd_run+0x360>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	461a      	mov	r2, r3
 8009cde:	2102      	movs	r1, #2
 8009ce0:	4884      	ldr	r0, [pc, #528]	@ (8009ef4 <ftpd_run+0x370>)
 8009ce2:	f001 fd4b 	bl	800b77c <iprintf>
				}
				#endif
				con_remain_cnt1++;
 8009ce6:	4b7f      	ldr	r3, [pc, #508]	@ (8009ee4 <ftpd_run+0x360>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	3301      	adds	r3, #1
 8009cec:	4a7d      	ldr	r2, [pc, #500]	@ (8009ee4 <ftpd_run+0x360>)
 8009cee:	6013      	str	r3, [r2, #0]
	
#if defined(_FTP_DEBUG_)
    		//printf("ftp socket %d\r\n", CTRL_SOCK);
#endif
			 
    		if((size = getSn_RX_RSR(CTRL_SOCK)) > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 8009cf0:	2002      	movs	r0, #2
 8009cf2:	f7fe fda4 	bl	800883e <getSn_RX_RSR>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	827b      	strh	r3, [r7, #18]
 8009cfa:	8a7b      	ldrh	r3, [r7, #18]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f000 8097 	beq.w	8009e30 <ftpd_run+0x2ac>
    		{
#if defined(_FTP_DEBUG_)
    			printf("%d:size: %d\r\n", CTRL_SOCK, size);
 8009d02:	8a7b      	ldrh	r3, [r7, #18]
 8009d04:	461a      	mov	r2, r3
 8009d06:	2102      	movs	r1, #2
 8009d08:	487b      	ldr	r0, [pc, #492]	@ (8009ef8 <ftpd_run+0x374>)
 8009d0a:	f001 fd37 	bl	800b77c <iprintf>
#endif

    			memset(dbuf, 0, _MAX_SS);
 8009d0e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009d12:	2100      	movs	r1, #0
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f001 fea1 	bl	800ba5c <memset>

    			if(size > _MAX_SS) size = _MAX_SS - 1;
 8009d1a:	8a7b      	ldrh	r3, [r7, #18]
 8009d1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d20:	d902      	bls.n	8009d28 <ftpd_run+0x1a4>
 8009d22:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8009d26:	827b      	strh	r3, [r7, #18]

    			ret = recv(CTRL_SOCK,dbuf,size);
 8009d28:	8a7b      	ldrh	r3, [r7, #18]
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	6879      	ldr	r1, [r7, #4]
 8009d2e:	2002      	movs	r0, #2
 8009d30:	f7ff faa8 	bl	8009284 <recv>
 8009d34:	6178      	str	r0, [r7, #20]
    			dbuf[ret] = '\0';
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	4413      	add	r3, r2
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	701a      	strb	r2, [r3, #0]
    			if(ret != size)
 8009d40:	8a7b      	ldrh	r3, [r7, #18]
 8009d42:	461a      	mov	r2, r3
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d014      	beq.n	8009d74 <ftpd_run+0x1f0>
    			{
    				if(ret==SOCK_BUSY) return 0;
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d102      	bne.n	8009d56 <ftpd_run+0x1d2>
 8009d50:	2300      	movs	r3, #0
 8009d52:	f000 bcd7 	b.w	800a704 <ftpd_run+0xb80>
    				if(ret < 0)
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	da0b      	bge.n	8009d74 <ftpd_run+0x1f0>
    				{
#if defined(_FTP_DEBUG_)
    					printf("%d:recv() error:%ld\r\n",CTRL_SOCK,ret);
 8009d5c:	697a      	ldr	r2, [r7, #20]
 8009d5e:	2102      	movs	r1, #2
 8009d60:	4866      	ldr	r0, [pc, #408]	@ (8009efc <ftpd_run+0x378>)
 8009d62:	f001 fd0b 	bl	800b77c <iprintf>
#endif
    					close(CTRL_SOCK);
 8009d66:	2002      	movs	r0, #2
 8009d68:	f7fe ff7a 	bl	8008c60 <close>
    					return ret;
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	f000 bcc8 	b.w	800a704 <ftpd_run+0xb80>
    				}
    			}
#if defined(_FTP_DEBUG_)
    			printf("%d:Rcvd Command: %s", CTRL_SOCK, dbuf);
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	2102      	movs	r1, #2
 8009d78:	4861      	ldr	r0, [pc, #388]	@ (8009f00 <ftpd_run+0x37c>)
 8009d7a:	f001 fcff 	bl	800b77c <iprintf>
#endif
    			proc_ftpd(CTRL_SOCK, (char *)dbuf);
 8009d7e:	6879      	ldr	r1, [r7, #4]
 8009d80:	2002      	movs	r0, #2
 8009d82:	f000 fce9 	bl	800a758 <proc_ftpd>
				con_remain_cnt1 = 0;
 8009d86:	4b57      	ldr	r3, [pc, #348]	@ (8009ee4 <ftpd_run+0x360>)
 8009d88:	2200      	movs	r2, #0
 8009d8a:	601a      	str	r2, [r3, #0]
    		}
    		break;
 8009d8c:	e050      	b.n	8009e30 <ftpd_run+0x2ac>

    	case SOCK_CLOSE_WAIT :
#if defined(_FTP_DEBUG_)
    		printf("%d:CloseWait\r\n",CTRL_SOCK);
 8009d8e:	2102      	movs	r1, #2
 8009d90:	485c      	ldr	r0, [pc, #368]	@ (8009f04 <ftpd_run+0x380>)
 8009d92:	f001 fcf3 	bl	800b77c <iprintf>
#endif
    		if((ret=disconnect(CTRL_SOCK)) != SOCK_OK) return ret;
 8009d96:	2002      	movs	r0, #2
 8009d98:	f7ff f906 	bl	8008fa8 <disconnect>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	617b      	str	r3, [r7, #20]
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d003      	beq.n	8009dae <ftpd_run+0x22a>
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	f000 bcab 	b.w	800a704 <ftpd_run+0xb80>
#if defined(_FTP_DEBUG_)
    		printf("%d:Closed\r\n",CTRL_SOCK);
 8009dae:	2102      	movs	r1, #2
 8009db0:	4855      	ldr	r0, [pc, #340]	@ (8009f08 <ftpd_run+0x384>)
 8009db2:	f001 fce3 	bl	800b77c <iprintf>
#endif
    		break;
 8009db6:	e03e      	b.n	8009e36 <ftpd_run+0x2b2>

    	case SOCK_CLOSED :
#if defined(_FTP_DEBUG_)
    		printf("%d:FTPStart\r\n",CTRL_SOCK);
 8009db8:	2102      	movs	r1, #2
 8009dba:	4854      	ldr	r0, [pc, #336]	@ (8009f0c <ftpd_run+0x388>)
 8009dbc:	f001 fcde 	bl	800b77c <iprintf>
#endif
    		if((ret=socket(CTRL_SOCK, Sn_MR_TCP, IPPORT_FTP, 0x0)) != CTRL_SOCK)
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	2215      	movs	r2, #21
 8009dc4:	2101      	movs	r1, #1
 8009dc6:	2002      	movs	r0, #2
 8009dc8:	f7fe fe36 	bl	8008a38 <socket>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	617b      	str	r3, [r7, #20]
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	2b02      	cmp	r3, #2
 8009dd4:	d02e      	beq.n	8009e34 <ftpd_run+0x2b0>
    		{
#if defined(_FTP_DEBUG_)
    			printf("%d:socket() error:%ld\r\n", CTRL_SOCK, ret);
 8009dd6:	697a      	ldr	r2, [r7, #20]
 8009dd8:	2102      	movs	r1, #2
 8009dda:	484d      	ldr	r0, [pc, #308]	@ (8009f10 <ftpd_run+0x38c>)
 8009ddc:	f001 fcce 	bl	800b77c <iprintf>
#endif
    			close(CTRL_SOCK);
 8009de0:	2002      	movs	r0, #2
 8009de2:	f7fe ff3d 	bl	8008c60 <close>
    			return ret;
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	f000 bc8b 	b.w	800a704 <ftpd_run+0xb80>
    		}
    		break;

    	case SOCK_INIT :
#if defined(_FTP_DEBUG_)
    		printf("%d:Opened\r\n",CTRL_SOCK);
 8009dee:	2102      	movs	r1, #2
 8009df0:	4848      	ldr	r0, [pc, #288]	@ (8009f14 <ftpd_run+0x390>)
 8009df2:	f001 fcc3 	bl	800b77c <iprintf>
#endif
    		//strcpy(ftp.workingdir, "/");
    		if( (ret = listen(CTRL_SOCK)) != SOCK_OK)
 8009df6:	2002      	movs	r0, #2
 8009df8:	f7fe ffa0 	bl	8008d3c <listen>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	617b      	str	r3, [r7, #20]
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d007      	beq.n	8009e16 <ftpd_run+0x292>
    		{
#if defined(_FTP_DEBUG_)
    			printf("%d:Listen error\r\n",CTRL_SOCK);
 8009e06:	2102      	movs	r1, #2
 8009e08:	4843      	ldr	r0, [pc, #268]	@ (8009f18 <ftpd_run+0x394>)
 8009e0a:	f001 fcb7 	bl	800b77c <iprintf>
#endif
    			return ret;
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	f000 bc77 	b.w	800a704 <ftpd_run+0xb80>
    		}
			connect_state_control = 0;
 8009e16:	4b2a      	ldr	r3, [pc, #168]	@ (8009ec0 <ftpd_run+0x33c>)
 8009e18:	2200      	movs	r2, #0
 8009e1a:	701a      	strb	r2, [r3, #0]
			con_remain_cnt1 = 0;
 8009e1c:	4b31      	ldr	r3, [pc, #196]	@ (8009ee4 <ftpd_run+0x360>)
 8009e1e:	2200      	movs	r2, #0
 8009e20:	601a      	str	r2, [r3, #0]

#if defined(_FTP_DEBUG_)
			printf("%d:Listen ok\r\n",CTRL_SOCK);
 8009e22:	2102      	movs	r1, #2
 8009e24:	483d      	ldr	r0, [pc, #244]	@ (8009f1c <ftpd_run+0x398>)
 8009e26:	f001 fca9 	bl	800b77c <iprintf>
#endif
			break;
 8009e2a:	e004      	b.n	8009e36 <ftpd_run+0x2b2>

    	default :
    		break;
 8009e2c:	bf00      	nop
 8009e2e:	e002      	b.n	8009e36 <ftpd_run+0x2b2>
    		break;
 8009e30:	bf00      	nop
 8009e32:	e000      	b.n	8009e36 <ftpd_run+0x2b2>
    		break;
 8009e34:	bf00      	nop
    }
	////////////////////////FTP Control 2
	
	switch(getSn_SR(CTRL_SOCK1))
 8009e36:	f44f 7062 	mov.w	r0, #904	@ 0x388
 8009e3a:	f7fe fb5d 	bl	80084f8 <WIZCHIP_READ>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	2b1c      	cmp	r3, #28
 8009e42:	f200 8172 	bhi.w	800a12a <ftpd_run+0x5a6>
 8009e46:	a201      	add	r2, pc, #4	@ (adr r2, 8009e4c <ftpd_run+0x2c8>)
 8009e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e4c:	0800a0bb 	.word	0x0800a0bb
 8009e50:	0800a12b 	.word	0x0800a12b
 8009e54:	0800a12b 	.word	0x0800a12b
 8009e58:	0800a12b 	.word	0x0800a12b
 8009e5c:	0800a12b 	.word	0x0800a12b
 8009e60:	0800a12b 	.word	0x0800a12b
 8009e64:	0800a12b 	.word	0x0800a12b
 8009e68:	0800a12b 	.word	0x0800a12b
 8009e6c:	0800a12b 	.word	0x0800a12b
 8009e70:	0800a12b 	.word	0x0800a12b
 8009e74:	0800a12b 	.word	0x0800a12b
 8009e78:	0800a12b 	.word	0x0800a12b
 8009e7c:	0800a12b 	.word	0x0800a12b
 8009e80:	0800a12b 	.word	0x0800a12b
 8009e84:	0800a12b 	.word	0x0800a12b
 8009e88:	0800a12b 	.word	0x0800a12b
 8009e8c:	0800a12b 	.word	0x0800a12b
 8009e90:	0800a12b 	.word	0x0800a12b
 8009e94:	0800a12b 	.word	0x0800a12b
 8009e98:	0800a0ef 	.word	0x0800a0ef
 8009e9c:	0800a12b 	.word	0x0800a12b
 8009ea0:	0800a12b 	.word	0x0800a12b
 8009ea4:	0800a12b 	.word	0x0800a12b
 8009ea8:	08009f21 	.word	0x08009f21
 8009eac:	0800a12b 	.word	0x0800a12b
 8009eb0:	0800a12b 	.word	0x0800a12b
 8009eb4:	0800a12b 	.word	0x0800a12b
 8009eb8:	0800a12b 	.word	0x0800a12b
 8009ebc:	0800a087 	.word	0x0800a087
 8009ec0:	200015ee 	.word	0x200015ee
 8009ec4:	0800ce54 	.word	0x0800ce54
 8009ec8:	200016cd 	.word	0x200016cd
 8009ecc:	0800ce50 	.word	0x0800ce50
 8009ed0:	0800ce68 	.word	0x0800ce68
 8009ed4:	0800ce6c 	.word	0x0800ce6c
 8009ed8:	0800ce74 	.word	0x0800ce74
 8009edc:	0800ce94 	.word	0x0800ce94
 8009ee0:	0800cea8 	.word	0x0800cea8
 8009ee4:	200015f4 	.word	0x200015f4
 8009ee8:	00061a80 	.word	0x00061a80
 8009eec:	0800cec0 	.word	0x0800cec0
 8009ef0:	d1b71759 	.word	0xd1b71759
 8009ef4:	0800ced4 	.word	0x0800ced4
 8009ef8:	0800ceec 	.word	0x0800ceec
 8009efc:	0800cefc 	.word	0x0800cefc
 8009f00:	0800cf14 	.word	0x0800cf14
 8009f04:	0800cf28 	.word	0x0800cf28
 8009f08:	0800cf38 	.word	0x0800cf38
 8009f0c:	0800cf44 	.word	0x0800cf44
 8009f10:	0800cf54 	.word	0x0800cf54
 8009f14:	0800cf6c 	.word	0x0800cf6c
 8009f18:	0800cf78 	.word	0x0800cf78
 8009f1c:	0800cf8c 	.word	0x0800cf8c
	{
		case SOCK_ESTABLISHED :
			if(!connect_state_control1)
 8009f20:	4ba7      	ldr	r3, [pc, #668]	@ (800a1c0 <ftpd_run+0x63c>)
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d12f      	bne.n	8009f88 <ftpd_run+0x404>
			{
#if defined(_FTP_DEBUG_)
				printf("%d:FTP Connected\r\n", CTRL_SOCK1);
 8009f28:	2104      	movs	r1, #4
 8009f2a:	48a6      	ldr	r0, [pc, #664]	@ (800a1c4 <ftpd_run+0x640>)
 8009f2c:	f001 fc26 	bl	800b77c <iprintf>
#endif
				strcpy(ftp.workingdir, "/");
 8009f30:	4aa5      	ldr	r2, [pc, #660]	@ (800a1c8 <ftpd_run+0x644>)
 8009f32:	4ba6      	ldr	r3, [pc, #664]	@ (800a1cc <ftpd_run+0x648>)
 8009f34:	881b      	ldrh	r3, [r3, #0]
 8009f36:	8013      	strh	r3, [r2, #0]
				sprintf((char *)dbuf, "220 %s FTP version %s ready.\r\n", HOSTNAME, VERSION);
 8009f38:	4ba5      	ldr	r3, [pc, #660]	@ (800a1d0 <ftpd_run+0x64c>)
 8009f3a:	4aa6      	ldr	r2, [pc, #664]	@ (800a1d4 <ftpd_run+0x650>)
 8009f3c:	49a6      	ldr	r1, [pc, #664]	@ (800a1d8 <ftpd_run+0x654>)
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f001 fc94 	bl	800b86c <siprintf>
				ret = send(CTRL_SOCK1, (uint8_t *)dbuf, strlen((const char *)dbuf));
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f7f6 f975 	bl	8000234 <strlen>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	461a      	mov	r2, r3
 8009f50:	6879      	ldr	r1, [r7, #4]
 8009f52:	2004      	movs	r0, #4
 8009f54:	f7ff f89e 	bl	8009094 <send>
 8009f58:	6178      	str	r0, [r7, #20]
				
#if defined(_FTP_DEBUG_)
				printf("%d:send() [%s]\r\n",CTRL_SOCK1,dbuf);
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	2104      	movs	r1, #4
 8009f5e:	489f      	ldr	r0, [pc, #636]	@ (800a1dc <ftpd_run+0x658>)
 8009f60:	f001 fc0c 	bl	800b77c <iprintf>
#endif
				if(ret < 0)
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	da0a      	bge.n	8009f80 <ftpd_run+0x3fc>
				{
#if defined(_FTP_DEBUG_)
					printf("%d:send() error:%ld\r\n",CTRL_SOCK1,ret);
 8009f6a:	697a      	ldr	r2, [r7, #20]
 8009f6c:	2104      	movs	r1, #4
 8009f6e:	489c      	ldr	r0, [pc, #624]	@ (800a1e0 <ftpd_run+0x65c>)
 8009f70:	f001 fc04 	bl	800b77c <iprintf>
#endif
					close(CTRL_SOCK1);
 8009f74:	2004      	movs	r0, #4
 8009f76:	f7fe fe73 	bl	8008c60 <close>
					return ret;
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	e3c1      	b.n	800a704 <ftpd_run+0xb80>
				}
				connect_state_control1 = 1;
 8009f80:	4b8f      	ldr	r3, [pc, #572]	@ (800a1c0 <ftpd_run+0x63c>)
 8009f82:	2201      	movs	r2, #1
 8009f84:	701a      	strb	r2, [r3, #0]
 8009f86:	e031      	b.n	8009fec <ftpd_run+0x468>
			}
			#if connect_timeout_en
			else
			{
				if(con_remain_cnt2 > remain_time)
 8009f88:	4b96      	ldr	r3, [pc, #600]	@ (800a1e4 <ftpd_run+0x660>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a96      	ldr	r2, [pc, #600]	@ (800a1e8 <ftpd_run+0x664>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d90f      	bls.n	8009fb2 <ftpd_run+0x42e>
				{
					if((ret=disconnect(CTRL_SOCK1)) != SOCK_OK) return ret;
 8009f92:	2004      	movs	r0, #4
 8009f94:	f7ff f808 	bl	8008fa8 <disconnect>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	617b      	str	r3, [r7, #20]
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d002      	beq.n	8009fa8 <ftpd_run+0x424>
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	e3ad      	b.n	800a704 <ftpd_run+0xb80>
			#if defined(_FTP_DEBUG_)
						printf("%d:Timeout Closed\r\n",CTRL_SOCK1);
 8009fa8:	2104      	movs	r1, #4
 8009faa:	4890      	ldr	r0, [pc, #576]	@ (800a1ec <ftpd_run+0x668>)
 8009fac:	f001 fbe6 	bl	800b77c <iprintf>
 8009fb0:	e017      	b.n	8009fe2 <ftpd_run+0x45e>
			#endif
				}
				#if defined(_FTP_DEBUG_)
				else if(((con_remain_cnt2 % 10000) == 0) && (con_remain_cnt2 != 0))
 8009fb2:	4b8c      	ldr	r3, [pc, #560]	@ (800a1e4 <ftpd_run+0x660>)
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	4b8e      	ldr	r3, [pc, #568]	@ (800a1f0 <ftpd_run+0x66c>)
 8009fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8009fbc:	0b5b      	lsrs	r3, r3, #13
 8009fbe:	f242 7110 	movw	r1, #10000	@ 0x2710
 8009fc2:	fb01 f303 	mul.w	r3, r1, r3
 8009fc6:	1ad3      	subs	r3, r2, r3
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d10a      	bne.n	8009fe2 <ftpd_run+0x45e>
 8009fcc:	4b85      	ldr	r3, [pc, #532]	@ (800a1e4 <ftpd_run+0x660>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d006      	beq.n	8009fe2 <ftpd_run+0x45e>
				{
					printf("%d:Timeout Count:%ld\r\n", CTRL_SOCK1, con_remain_cnt2);
 8009fd4:	4b83      	ldr	r3, [pc, #524]	@ (800a1e4 <ftpd_run+0x660>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	461a      	mov	r2, r3
 8009fda:	2104      	movs	r1, #4
 8009fdc:	4885      	ldr	r0, [pc, #532]	@ (800a1f4 <ftpd_run+0x670>)
 8009fde:	f001 fbcd 	bl	800b77c <iprintf>
				}
				#endif
				con_remain_cnt2++;
 8009fe2:	4b80      	ldr	r3, [pc, #512]	@ (800a1e4 <ftpd_run+0x660>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	4a7e      	ldr	r2, [pc, #504]	@ (800a1e4 <ftpd_run+0x660>)
 8009fea:	6013      	str	r3, [r2, #0]
	
#if defined(_FTP_DEBUG_)
			//printf("ftp socket %d\r\n", CTRL_SOCK);
#endif
			
			if((size = getSn_RX_RSR(CTRL_SOCK1)) > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 8009fec:	2004      	movs	r0, #4
 8009fee:	f7fe fc26 	bl	800883e <getSn_RX_RSR>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	827b      	strh	r3, [r7, #18]
 8009ff6:	8a7b      	ldrh	r3, [r7, #18]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	f000 8098 	beq.w	800a12e <ftpd_run+0x5aa>
			{
#if defined(_FTP_DEBUG_)
				printf("%d: size: %d\r\n", CTRL_SOCK1, size);
 8009ffe:	8a7b      	ldrh	r3, [r7, #18]
 800a000:	461a      	mov	r2, r3
 800a002:	2104      	movs	r1, #4
 800a004:	487c      	ldr	r0, [pc, #496]	@ (800a1f8 <ftpd_run+0x674>)
 800a006:	f001 fbb9 	bl	800b77c <iprintf>
#endif

				memset(dbuf, 0, _MAX_SS);
 800a00a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a00e:	2100      	movs	r1, #0
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f001 fd23 	bl	800ba5c <memset>

				if(size > _MAX_SS) size = _MAX_SS - 1;
 800a016:	8a7b      	ldrh	r3, [r7, #18]
 800a018:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a01c:	d902      	bls.n	800a024 <ftpd_run+0x4a0>
 800a01e:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800a022:	827b      	strh	r3, [r7, #18]

				ret = recv(CTRL_SOCK1,dbuf,size);
 800a024:	8a7b      	ldrh	r3, [r7, #18]
 800a026:	461a      	mov	r2, r3
 800a028:	6879      	ldr	r1, [r7, #4]
 800a02a:	2004      	movs	r0, #4
 800a02c:	f7ff f92a 	bl	8009284 <recv>
 800a030:	6178      	str	r0, [r7, #20]
				dbuf[ret] = '\0';
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	4413      	add	r3, r2
 800a038:	2200      	movs	r2, #0
 800a03a:	701a      	strb	r2, [r3, #0]
				if(ret != size)
 800a03c:	8a7b      	ldrh	r3, [r7, #18]
 800a03e:	461a      	mov	r2, r3
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	4293      	cmp	r3, r2
 800a044:	d012      	beq.n	800a06c <ftpd_run+0x4e8>
				{
					if(ret==SOCK_BUSY) return 0;
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d101      	bne.n	800a050 <ftpd_run+0x4cc>
 800a04c:	2300      	movs	r3, #0
 800a04e:	e359      	b.n	800a704 <ftpd_run+0xb80>
					if(ret < 0)
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	2b00      	cmp	r3, #0
 800a054:	da0a      	bge.n	800a06c <ftpd_run+0x4e8>
					{
#if defined(_FTP_DEBUG_)
						printf("%d:recv() error:%ld\r\n",CTRL_SOCK1,ret);
 800a056:	697a      	ldr	r2, [r7, #20]
 800a058:	2104      	movs	r1, #4
 800a05a:	4868      	ldr	r0, [pc, #416]	@ (800a1fc <ftpd_run+0x678>)
 800a05c:	f001 fb8e 	bl	800b77c <iprintf>
#endif
						close(CTRL_SOCK1);
 800a060:	2004      	movs	r0, #4
 800a062:	f7fe fdfd 	bl	8008c60 <close>
						return ret;
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	e34b      	b.n	800a704 <ftpd_run+0xb80>
					}
				}
#if defined(_FTP_DEBUG_)
				printf("%d: Rcvd Command: %s", CTRL_SOCK1, dbuf);
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	2104      	movs	r1, #4
 800a070:	4863      	ldr	r0, [pc, #396]	@ (800a200 <ftpd_run+0x67c>)
 800a072:	f001 fb83 	bl	800b77c <iprintf>
#endif
				proc_ftpd(CTRL_SOCK1, (char *)dbuf);
 800a076:	6879      	ldr	r1, [r7, #4]
 800a078:	2004      	movs	r0, #4
 800a07a:	f000 fb6d 	bl	800a758 <proc_ftpd>
				con_remain_cnt2 = 0;
 800a07e:	4b59      	ldr	r3, [pc, #356]	@ (800a1e4 <ftpd_run+0x660>)
 800a080:	2200      	movs	r2, #0
 800a082:	601a      	str	r2, [r3, #0]
			}
			break;
 800a084:	e053      	b.n	800a12e <ftpd_run+0x5aa>

		case SOCK_CLOSE_WAIT :
#if defined(_FTP_DEBUG_)
			printf("%d:CloseWait\r\n",CTRL_SOCK1);
 800a086:	2104      	movs	r1, #4
 800a088:	485e      	ldr	r0, [pc, #376]	@ (800a204 <ftpd_run+0x680>)
 800a08a:	f001 fb77 	bl	800b77c <iprintf>
#endif
			if((ret=disconnect(CTRL_SOCK1)) != SOCK_OK) return ret;
 800a08e:	2004      	movs	r0, #4
 800a090:	f7fe ff8a 	bl	8008fa8 <disconnect>
 800a094:	4603      	mov	r3, r0
 800a096:	617b      	str	r3, [r7, #20]
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d002      	beq.n	800a0a4 <ftpd_run+0x520>
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	b2db      	uxtb	r3, r3
 800a0a2:	e32f      	b.n	800a704 <ftpd_run+0xb80>
			connect_count--;
 800a0a4:	4b58      	ldr	r3, [pc, #352]	@ (800a208 <ftpd_run+0x684>)
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	3b01      	subs	r3, #1
 800a0aa:	b2da      	uxtb	r2, r3
 800a0ac:	4b56      	ldr	r3, [pc, #344]	@ (800a208 <ftpd_run+0x684>)
 800a0ae:	701a      	strb	r2, [r3, #0]
#if defined(_FTP_DEBUG_)
			printf("%d:Closed\r\n",CTRL_SOCK1);
 800a0b0:	2104      	movs	r1, #4
 800a0b2:	4856      	ldr	r0, [pc, #344]	@ (800a20c <ftpd_run+0x688>)
 800a0b4:	f001 fb62 	bl	800b77c <iprintf>
#endif
			break;
 800a0b8:	e03c      	b.n	800a134 <ftpd_run+0x5b0>

		case SOCK_CLOSED :
#if defined(_FTP_DEBUG_)
			printf("%d:FTPStart\r\n",CTRL_SOCK1);
 800a0ba:	2104      	movs	r1, #4
 800a0bc:	4854      	ldr	r0, [pc, #336]	@ (800a210 <ftpd_run+0x68c>)
 800a0be:	f001 fb5d 	bl	800b77c <iprintf>
#endif
			if((ret=socket(CTRL_SOCK1, Sn_MR_TCP, IPPORT_FTP, 0x0)) != CTRL_SOCK1)
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	2215      	movs	r2, #21
 800a0c6:	2101      	movs	r1, #1
 800a0c8:	2004      	movs	r0, #4
 800a0ca:	f7fe fcb5 	bl	8008a38 <socket>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	617b      	str	r3, [r7, #20]
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	2b04      	cmp	r3, #4
 800a0d6:	d02c      	beq.n	800a132 <ftpd_run+0x5ae>
			{
#if defined(_FTP_DEBUG_)
				printf("%d:socket() error:%ld\r\n", CTRL_SOCK1, ret);
 800a0d8:	697a      	ldr	r2, [r7, #20]
 800a0da:	2104      	movs	r1, #4
 800a0dc:	484d      	ldr	r0, [pc, #308]	@ (800a214 <ftpd_run+0x690>)
 800a0de:	f001 fb4d 	bl	800b77c <iprintf>
#endif
				close(CTRL_SOCK1);
 800a0e2:	2004      	movs	r0, #4
 800a0e4:	f7fe fdbc 	bl	8008c60 <close>
				return ret;
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	e30a      	b.n	800a704 <ftpd_run+0xb80>
			}
			break;

		case SOCK_INIT :
#if defined(_FTP_DEBUG_)
			printf("%d:Opened\r\n",CTRL_SOCK1);
 800a0ee:	2104      	movs	r1, #4
 800a0f0:	4849      	ldr	r0, [pc, #292]	@ (800a218 <ftpd_run+0x694>)
 800a0f2:	f001 fb43 	bl	800b77c <iprintf>
#endif
			//strcpy(ftp.workingdir, "/");
			if( (ret = listen(CTRL_SOCK1)) != SOCK_OK)
 800a0f6:	2004      	movs	r0, #4
 800a0f8:	f7fe fe20 	bl	8008d3c <listen>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	617b      	str	r3, [r7, #20]
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	2b01      	cmp	r3, #1
 800a104:	d006      	beq.n	800a114 <ftpd_run+0x590>
			{
#if defined(_FTP_DEBUG_)
				printf("%d:Listen error\r\n",CTRL_SOCK1);
 800a106:	2104      	movs	r1, #4
 800a108:	4844      	ldr	r0, [pc, #272]	@ (800a21c <ftpd_run+0x698>)
 800a10a:	f001 fb37 	bl	800b77c <iprintf>
#endif
				return ret;
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	b2db      	uxtb	r3, r3
 800a112:	e2f7      	b.n	800a704 <ftpd_run+0xb80>
			}
			connect_state_control1 = 0;
 800a114:	4b2a      	ldr	r3, [pc, #168]	@ (800a1c0 <ftpd_run+0x63c>)
 800a116:	2200      	movs	r2, #0
 800a118:	701a      	strb	r2, [r3, #0]
			con_remain_cnt2 = 0;
 800a11a:	4b32      	ldr	r3, [pc, #200]	@ (800a1e4 <ftpd_run+0x660>)
 800a11c:	2200      	movs	r2, #0
 800a11e:	601a      	str	r2, [r3, #0]
#if defined(_FTP_DEBUG_)
			printf("%d:Listen ok\r\n",CTRL_SOCK1);
 800a120:	2104      	movs	r1, #4
 800a122:	483f      	ldr	r0, [pc, #252]	@ (800a220 <ftpd_run+0x69c>)
 800a124:	f001 fb2a 	bl	800b77c <iprintf>
#endif
			break;
 800a128:	e004      	b.n	800a134 <ftpd_run+0x5b0>

		default :
			break;
 800a12a:	bf00      	nop
 800a12c:	e002      	b.n	800a134 <ftpd_run+0x5b0>
			break;
 800a12e:	bf00      	nop
 800a130:	e000      	b.n	800a134 <ftpd_run+0x5b0>
			break;
 800a132:	bf00      	nop
	}
    
	#endif
/////////////////////////////////// ftp data part
#if 1
    switch(getSn_SR(DATA_SOCK))
 800a134:	f44f 705a 	mov.w	r0, #872	@ 0x368
 800a138:	f7fe f9de 	bl	80084f8 <WIZCHIP_READ>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b1c      	cmp	r3, #28
 800a140:	f200 82dc 	bhi.w	800a6fc <ftpd_run+0xb78>
 800a144:	a201      	add	r2, pc, #4	@ (adr r2, 800a14c <ftpd_run+0x5c8>)
 800a146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a14a:	bf00      	nop
 800a14c:	0800a5e9 	.word	0x0800a5e9
 800a150:	0800a6fd 	.word	0x0800a6fd
 800a154:	0800a6fd 	.word	0x0800a6fd
 800a158:	0800a6fd 	.word	0x0800a6fd
 800a15c:	0800a6fd 	.word	0x0800a6fd
 800a160:	0800a6fd 	.word	0x0800a6fd
 800a164:	0800a6fd 	.word	0x0800a6fd
 800a168:	0800a6fd 	.word	0x0800a6fd
 800a16c:	0800a6fd 	.word	0x0800a6fd
 800a170:	0800a6fd 	.word	0x0800a6fd
 800a174:	0800a6fd 	.word	0x0800a6fd
 800a178:	0800a6fd 	.word	0x0800a6fd
 800a17c:	0800a6fd 	.word	0x0800a6fd
 800a180:	0800a6fd 	.word	0x0800a6fd
 800a184:	0800a6fd 	.word	0x0800a6fd
 800a188:	0800a6fd 	.word	0x0800a6fd
 800a18c:	0800a6fd 	.word	0x0800a6fd
 800a190:	0800a6fd 	.word	0x0800a6fd
 800a194:	0800a6fd 	.word	0x0800a6fd
 800a198:	0800a697 	.word	0x0800a697
 800a19c:	0800a6fd 	.word	0x0800a6fd
 800a1a0:	0800a6fd 	.word	0x0800a6fd
 800a1a4:	0800a6fd 	.word	0x0800a6fd
 800a1a8:	0800a225 	.word	0x0800a225
 800a1ac:	0800a6fd 	.word	0x0800a6fd
 800a1b0:	0800a6fd 	.word	0x0800a6fd
 800a1b4:	0800a6fd 	.word	0x0800a6fd
 800a1b8:	0800a6fd 	.word	0x0800a6fd
 800a1bc:	0800a5c1 	.word	0x0800a5c1
 800a1c0:	200015ef 	.word	0x200015ef
 800a1c4:	0800ce54 	.word	0x0800ce54
 800a1c8:	200016cd 	.word	0x200016cd
 800a1cc:	0800ce50 	.word	0x0800ce50
 800a1d0:	0800ce68 	.word	0x0800ce68
 800a1d4:	0800ce6c 	.word	0x0800ce6c
 800a1d8:	0800ce74 	.word	0x0800ce74
 800a1dc:	0800ce94 	.word	0x0800ce94
 800a1e0:	0800cea8 	.word	0x0800cea8
 800a1e4:	200015f8 	.word	0x200015f8
 800a1e8:	00061a80 	.word	0x00061a80
 800a1ec:	0800cec0 	.word	0x0800cec0
 800a1f0:	d1b71759 	.word	0xd1b71759
 800a1f4:	0800ced4 	.word	0x0800ced4
 800a1f8:	0800cf9c 	.word	0x0800cf9c
 800a1fc:	0800cefc 	.word	0x0800cefc
 800a200:	0800cfac 	.word	0x0800cfac
 800a204:	0800cf28 	.word	0x0800cf28
 800a208:	200015f1 	.word	0x200015f1
 800a20c:	0800cf38 	.word	0x0800cf38
 800a210:	0800cf44 	.word	0x0800cf44
 800a214:	0800cf54 	.word	0x0800cf54
 800a218:	0800cf6c 	.word	0x0800cf6c
 800a21c:	0800cf78 	.word	0x0800cf78
 800a220:	0800cf8c 	.word	0x0800cf8c
    {
    	case SOCK_ESTABLISHED :
    		if(!connect_state_data)
 800a224:	4bb9      	ldr	r3, [pc, #740]	@ (800a50c <ftpd_run+0x988>)
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d106      	bne.n	800a23a <ftpd_run+0x6b6>
    		{
#if defined(_FTP_DEBUG_)
    			printf("%d:FTP Data socket Connected\r\n", DATA_SOCK);
 800a22c:	2103      	movs	r1, #3
 800a22e:	48b8      	ldr	r0, [pc, #736]	@ (800a510 <ftpd_run+0x98c>)
 800a230:	f001 faa4 	bl	800b77c <iprintf>
#endif
    			connect_state_data = 1;
 800a234:	4bb5      	ldr	r3, [pc, #724]	@ (800a50c <ftpd_run+0x988>)
 800a236:	2201      	movs	r2, #1
 800a238:	701a      	strb	r2, [r3, #0]
    		}
	
    		switch(ftp.current_cmd)
 800a23a:	4bb6      	ldr	r3, [pc, #728]	@ (800a514 <ftpd_run+0x990>)
 800a23c:	791b      	ldrb	r3, [r3, #4]
 800a23e:	3b04      	subs	r3, #4
 800a240:	2b17      	cmp	r3, #23
 800a242:	f200 81bb 	bhi.w	800a5bc <ftpd_run+0xa38>
 800a246:	a201      	add	r2, pc, #4	@ (adr r2, 800a24c <ftpd_run+0x6c8>)
 800a248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a24c:	0800a2ad 	.word	0x0800a2ad
 800a250:	0800a5bd 	.word	0x0800a5bd
 800a254:	0800a5bd 	.word	0x0800a5bd
 800a258:	0800a5bd 	.word	0x0800a5bd
 800a25c:	0800a5bd 	.word	0x0800a5bd
 800a260:	0800a31b 	.word	0x0800a31b
 800a264:	0800a42b 	.word	0x0800a42b
 800a268:	0800a5bd 	.word	0x0800a5bd
 800a26c:	0800a5bd 	.word	0x0800a5bd
 800a270:	0800a5bd 	.word	0x0800a5bd
 800a274:	0800a5bd 	.word	0x0800a5bd
 800a278:	0800a5bd 	.word	0x0800a5bd
 800a27c:	0800a5bd 	.word	0x0800a5bd
 800a280:	0800a5bd 	.word	0x0800a5bd
 800a284:	0800a5bd 	.word	0x0800a5bd
 800a288:	0800a5bd 	.word	0x0800a5bd
 800a28c:	0800a5bd 	.word	0x0800a5bd
 800a290:	0800a5bd 	.word	0x0800a5bd
 800a294:	0800a5bd 	.word	0x0800a5bd
 800a298:	0800a5bd 	.word	0x0800a5bd
 800a29c:	0800a5bd 	.word	0x0800a5bd
 800a2a0:	0800a5bd 	.word	0x0800a5bd
 800a2a4:	0800a5bd 	.word	0x0800a5bd
 800a2a8:	0800a2ad 	.word	0x0800a2ad
    		{
    			case LIST_CMD:
    			case MLSD_CMD:
#if defined(_FTP_DEBUG_)
    				printf("previous size: %d\r\n", size);
 800a2ac:	8a7b      	ldrh	r3, [r7, #18]
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	4899      	ldr	r0, [pc, #612]	@ (800a518 <ftpd_run+0x994>)
 800a2b2:	f001 fa63 	bl	800b77c <iprintf>
#endif
#if defined(F_FILESYSTEM)
    				scan_files(ftp.workingdir, dbuf, (int *)&size);
 800a2b6:	f107 0312 	add.w	r3, r7, #18
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	6879      	ldr	r1, [r7, #4]
 800a2be:	4897      	ldr	r0, [pc, #604]	@ (800a51c <ftpd_run+0x998>)
 800a2c0:	f7ff fa4a 	bl	8009758 <scan_files>
#endif
#if defined(_FTP_DEBUG_)
    				printf("returned size: %d\r\n", size);
 800a2c4:	8a7b      	ldrh	r3, [r7, #18]
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	4895      	ldr	r0, [pc, #596]	@ (800a520 <ftpd_run+0x99c>)
 800a2ca:	f001 fa57 	bl	800b77c <iprintf>
    				printf("%s\r\n", dbuf);
 800a2ce:	6879      	ldr	r1, [r7, #4]
 800a2d0:	4894      	ldr	r0, [pc, #592]	@ (800a524 <ftpd_run+0x9a0>)
 800a2d2:	f001 fa53 	bl	800b77c <iprintf>
#endif
#if !defined(F_FILESYSTEM)
    				if (strncmp(ftp.workingdir, "/$Recycle.Bin", sizeof("/$Recycle.Bin")) != 0)
    					size = sprintf(dbuf, "drwxr-xr-x 1 ftp ftp 0 Dec 31 2014 $Recycle.Bin\r\n-rwxr-xr-x 1 ftp ftp 512 Dec 31 2014 test.txt\r\n");
#endif
    				size = strlen(dbuf);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f7f5 ffac 	bl	8000234 <strlen>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	827b      	strh	r3, [r7, #18]
    				send(DATA_SOCK, dbuf, size);
 800a2e2:	8a7b      	ldrh	r3, [r7, #18]
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	6879      	ldr	r1, [r7, #4]
 800a2e8:	2003      	movs	r0, #3
 800a2ea:	f7fe fed3 	bl	8009094 <send>
    				ftp.current_cmd = NO_CMD;
 800a2ee:	4b89      	ldr	r3, [pc, #548]	@ (800a514 <ftpd_run+0x990>)
 800a2f0:	221d      	movs	r2, #29
 800a2f2:	711a      	strb	r2, [r3, #4]
    				disconnect(DATA_SOCK);
 800a2f4:	2003      	movs	r0, #3
 800a2f6:	f7fe fe57 	bl	8008fa8 <disconnect>
    				size = sprintf(dbuf, "226 Successfully transferred \"%s\"\r\n", ftp.workingdir);
 800a2fa:	4a88      	ldr	r2, [pc, #544]	@ (800a51c <ftpd_run+0x998>)
 800a2fc:	498a      	ldr	r1, [pc, #552]	@ (800a528 <ftpd_run+0x9a4>)
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f001 fab4 	bl	800b86c <siprintf>
 800a304:	4603      	mov	r3, r0
 800a306:	b29b      	uxth	r3, r3
 800a308:	827b      	strh	r3, [r7, #18]
					send(cur_sn, dbuf, size);
 800a30a:	4b88      	ldr	r3, [pc, #544]	@ (800a52c <ftpd_run+0x9a8>)
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	8a7a      	ldrh	r2, [r7, #18]
 800a310:	6879      	ldr	r1, [r7, #4]
 800a312:	4618      	mov	r0, r3
 800a314:	f7fe febe 	bl	8009094 <send>
    				break;
 800a318:	e151      	b.n	800a5be <ftpd_run+0xa3a>

    			case RETR_CMD:
#if defined(_FTP_DEBUG_)
    				printf("filename to retrieve : %s %d\r\n", ftp.filename, strlen(ftp.filename));
 800a31a:	4885      	ldr	r0, [pc, #532]	@ (800a530 <ftpd_run+0x9ac>)
 800a31c:	f7f5 ff8a 	bl	8000234 <strlen>
 800a320:	4603      	mov	r3, r0
 800a322:	461a      	mov	r2, r3
 800a324:	4982      	ldr	r1, [pc, #520]	@ (800a530 <ftpd_run+0x9ac>)
 800a326:	4883      	ldr	r0, [pc, #524]	@ (800a534 <ftpd_run+0x9b0>)
 800a328:	f001 fa28 	bl	800b77c <iprintf>
#endif
#if defined(F_FILESYSTEM)
    				ftp.fr = f_open(&(ftp.fil), (const char *)ftp.filename, FA_READ);
 800a32c:	2201      	movs	r2, #1
 800a32e:	4980      	ldr	r1, [pc, #512]	@ (800a530 <ftpd_run+0x9ac>)
 800a330:	4881      	ldr	r0, [pc, #516]	@ (800a538 <ftpd_run+0x9b4>)
 800a332:	f7fc ffcd 	bl	80072d0 <f_open>
 800a336:	4603      	mov	r3, r0
 800a338:	461a      	mov	r2, r3
 800a33a:	4b76      	ldr	r3, [pc, #472]	@ (800a514 <ftpd_run+0x990>)
 800a33c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a340:	f883 21cc 	strb.w	r2, [r3, #460]	@ 0x1cc
    				//print_filedsc(&(ftp.fil));
    				if(ftp.fr == FR_OK){
 800a344:	4b73      	ldr	r3, [pc, #460]	@ (800a514 <ftpd_run+0x990>)
 800a346:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a34a:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d14c      	bne.n	800a3ec <ftpd_run+0x868>
//====================================================================================================================================================    MOD
    					//remain_filesize = ftp.fil.fsize;
    					remain_filesize = ftp.fil.obj.objsize;
 800a352:	4b70      	ldr	r3, [pc, #448]	@ (800a514 <ftpd_run+0x990>)
 800a354:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800a358:	61fb      	str	r3, [r7, #28]
#if defined(_FTP_DEBUG_)
    					printf("f_open return FR_OK\r\n");
 800a35a:	4878      	ldr	r0, [pc, #480]	@ (800a53c <ftpd_run+0x9b8>)
 800a35c:	f001 fa7e 	bl	800b85c <puts>
#endif
    					do{
#if defined(_FTP_DEBUG_)
    						//printf("remained file size: %d\r\n", ftp.fil.fsize);
#endif
    						memset(dbuf, 0, _MAX_SS);
 800a360:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a364:	2100      	movs	r1, #0
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f001 fb78 	bl	800ba5c <memset>

    						if(remain_filesize > _MAX_SS)
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a372:	d903      	bls.n	800a37c <ftpd_run+0x7f8>
    							send_byte = _MAX_SS;
 800a374:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a378:	627b      	str	r3, [r7, #36]	@ 0x24
 800a37a:	e001      	b.n	800a380 <ftpd_run+0x7fc>
    						else
    							send_byte = remain_filesize;
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	627b      	str	r3, [r7, #36]	@ 0x24

    						ftp.fr = f_read(&(ftp.fil), dbuf, send_byte , &blocklen);
 800a380:	f107 030c 	add.w	r3, r7, #12
 800a384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a386:	6879      	ldr	r1, [r7, #4]
 800a388:	486b      	ldr	r0, [pc, #428]	@ (800a538 <ftpd_run+0x9b4>)
 800a38a:	f7fd f969 	bl	8007660 <f_read>
 800a38e:	4603      	mov	r3, r0
 800a390:	461a      	mov	r2, r3
 800a392:	4b60      	ldr	r3, [pc, #384]	@ (800a514 <ftpd_run+0x990>)
 800a394:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a398:	f883 21cc 	strb.w	r2, [r3, #460]	@ 0x1cc
    						if(ftp.fr != FR_OK)
 800a39c:	4b5d      	ldr	r3, [pc, #372]	@ (800a514 <ftpd_run+0x990>)
 800a39e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3a2:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d111      	bne.n	800a3ce <ftpd_run+0x84a>
    							break;
#if defined(_FTP_DEBUG_)
    						printf("#");
 800a3aa:	2023      	movs	r0, #35	@ 0x23
 800a3ac:	f001 f9f8 	bl	800b7a0 <putchar>
    						//printf("----->fsize:%d recv:%d len:%d \r\n", remain_filesize, send_byte, blocklen);
    						//printf("----->fn:%s data:%s \r\n", ftp.filename, dbuf);
#endif
    						send(DATA_SOCK, dbuf, blocklen);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	6879      	ldr	r1, [r7, #4]
 800a3b8:	2003      	movs	r0, #3
 800a3ba:	f7fe fe6b 	bl	8009094 <send>
    						remain_filesize -= blocklen;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	69fa      	ldr	r2, [r7, #28]
 800a3c2:	1ad3      	subs	r3, r2, r3
 800a3c4:	61fb      	str	r3, [r7, #28]
    					}while(remain_filesize != 0);
 800a3c6:	69fb      	ldr	r3, [r7, #28]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d1c9      	bne.n	800a360 <ftpd_run+0x7dc>
 800a3cc:	e000      	b.n	800a3d0 <ftpd_run+0x84c>
    							break;
 800a3ce:	bf00      	nop
#if defined(_FTP_DEBUG_)
    					printf("\r\nFile read finished\r\n");
 800a3d0:	485b      	ldr	r0, [pc, #364]	@ (800a540 <ftpd_run+0x9bc>)
 800a3d2:	f001 fa43 	bl	800b85c <puts>
#endif
    					ftp.fr = f_close(&(ftp.fil));
 800a3d6:	4858      	ldr	r0, [pc, #352]	@ (800a538 <ftpd_run+0x9b4>)
 800a3d8:	f7fd fcb3 	bl	8007d42 <f_close>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	461a      	mov	r2, r3
 800a3e0:	4b4c      	ldr	r3, [pc, #304]	@ (800a514 <ftpd_run+0x990>)
 800a3e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3e6:	f883 21cc 	strb.w	r2, [r3, #460]	@ 0x1cc
 800a3ea:	e008      	b.n	800a3fe <ftpd_run+0x87a>
    				}else{
#if defined(_FTP_DEBUG_)
    					printf("File Open Error: %d\r\n", ftp.fr);
 800a3ec:	4b49      	ldr	r3, [pc, #292]	@ (800a514 <ftpd_run+0x990>)
 800a3ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3f2:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	4852      	ldr	r0, [pc, #328]	@ (800a544 <ftpd_run+0x9c0>)
 800a3fa:	f001 f9bf 	bl	800b77c <iprintf>
						send(DATA_SOCK, dbuf, blocklen);
						remain_filesize -= blocklen;
					}while(remain_filesize != 0);

#endif
    				ftp.current_cmd = NO_CMD;
 800a3fe:	4b45      	ldr	r3, [pc, #276]	@ (800a514 <ftpd_run+0x990>)
 800a400:	221d      	movs	r2, #29
 800a402:	711a      	strb	r2, [r3, #4]
    				disconnect(DATA_SOCK);
 800a404:	2003      	movs	r0, #3
 800a406:	f7fe fdcf 	bl	8008fa8 <disconnect>
    				size = sprintf(dbuf, "226 Successfully transferred \"%s\"\r\n", ftp.filename);
 800a40a:	4a49      	ldr	r2, [pc, #292]	@ (800a530 <ftpd_run+0x9ac>)
 800a40c:	4946      	ldr	r1, [pc, #280]	@ (800a528 <ftpd_run+0x9a4>)
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f001 fa2c 	bl	800b86c <siprintf>
 800a414:	4603      	mov	r3, r0
 800a416:	b29b      	uxth	r3, r3
 800a418:	827b      	strh	r3, [r7, #18]
					send(cur_sn, dbuf, size);
 800a41a:	4b44      	ldr	r3, [pc, #272]	@ (800a52c <ftpd_run+0x9a8>)
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	8a7a      	ldrh	r2, [r7, #18]
 800a420:	6879      	ldr	r1, [r7, #4]
 800a422:	4618      	mov	r0, r3
 800a424:	f7fe fe36 	bl	8009094 <send>
    				break;
 800a428:	e0c9      	b.n	800a5be <ftpd_run+0xa3a>

    			case STOR_CMD:
#if defined(_FTP_DEBUG_)
    				printf("filename to store : %s %d\r\n", ftp.filename, strlen(ftp.filename));
 800a42a:	4841      	ldr	r0, [pc, #260]	@ (800a530 <ftpd_run+0x9ac>)
 800a42c:	f7f5 ff02 	bl	8000234 <strlen>
 800a430:	4603      	mov	r3, r0
 800a432:	461a      	mov	r2, r3
 800a434:	493e      	ldr	r1, [pc, #248]	@ (800a530 <ftpd_run+0x9ac>)
 800a436:	4844      	ldr	r0, [pc, #272]	@ (800a548 <ftpd_run+0x9c4>)
 800a438:	f001 f9a0 	bl	800b77c <iprintf>
#endif
#if defined(F_FILESYSTEM)
    				ftp.fr = f_open(&(ftp.fil), (const char *)ftp.filename, FA_CREATE_ALWAYS | FA_WRITE);
 800a43c:	220a      	movs	r2, #10
 800a43e:	493c      	ldr	r1, [pc, #240]	@ (800a530 <ftpd_run+0x9ac>)
 800a440:	483d      	ldr	r0, [pc, #244]	@ (800a538 <ftpd_run+0x9b4>)
 800a442:	f7fc ff45 	bl	80072d0 <f_open>
 800a446:	4603      	mov	r3, r0
 800a448:	461a      	mov	r2, r3
 800a44a:	4b32      	ldr	r3, [pc, #200]	@ (800a514 <ftpd_run+0x990>)
 800a44c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a450:	f883 21cc 	strb.w	r2, [r3, #460]	@ 0x1cc
    				//print_filedsc(&(ftp.fil));
    				if(ftp.fr == FR_OK){
 800a454:	4b2f      	ldr	r3, [pc, #188]	@ (800a514 <ftpd_run+0x990>)
 800a456:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a45a:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 800a45e:	2b00      	cmp	r3, #0
 800a460:	f040 808d 	bne.w	800a57e <ftpd_run+0x9fa>
#if defined(_FTP_DEBUG_)
    					printf("f_open return FR_OK\r\n");
 800a464:	4835      	ldr	r0, [pc, #212]	@ (800a53c <ftpd_run+0x9b8>)
 800a466:	f001 f9f9 	bl	800b85c <puts>
#endif
    					while(1){
    						if((remain_datasize = getSn_RX_RSR(DATA_SOCK)) > 0){
 800a46a:	2003      	movs	r0, #3
 800a46c:	f7fe f9e7 	bl	800883e <getSn_RX_RSR>
 800a470:	4603      	mov	r3, r0
 800a472:	61bb      	str	r3, [r7, #24]
 800a474:	69bb      	ldr	r3, [r7, #24]
 800a476:	2b00      	cmp	r3, #0
 800a478:	dd6a      	ble.n	800a550 <ftpd_run+0x9cc>
    							while(1){
    								memset(dbuf, 0, _MAX_SS);
 800a47a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a47e:	2100      	movs	r1, #0
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f001 faeb 	bl	800ba5c <memset>

    								if(remain_datasize > _MAX_SS)
 800a486:	69bb      	ldr	r3, [r7, #24]
 800a488:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a48c:	dd03      	ble.n	800a496 <ftpd_run+0x912>
    									recv_byte = _MAX_SS;
 800a48e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a492:	623b      	str	r3, [r7, #32]
 800a494:	e001      	b.n	800a49a <ftpd_run+0x916>
    								else
    									recv_byte = remain_datasize;
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	623b      	str	r3, [r7, #32]

    								ret = recv(DATA_SOCK, dbuf, recv_byte);
 800a49a:	6a3b      	ldr	r3, [r7, #32]
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	461a      	mov	r2, r3
 800a4a0:	6879      	ldr	r1, [r7, #4]
 800a4a2:	2003      	movs	r0, #3
 800a4a4:	f7fe feee 	bl	8009284 <recv>
 800a4a8:	6178      	str	r0, [r7, #20]
#if defined(_FTP_DEBUG_)
    								//printf("----->fn:%s data:%s \r\n", ftp.filename, dbuf);
#endif

    								ftp.fr = f_write(&(ftp.fil), dbuf, (UINT)ret, &blocklen);
 800a4aa:	697a      	ldr	r2, [r7, #20]
 800a4ac:	f107 030c 	add.w	r3, r7, #12
 800a4b0:	6879      	ldr	r1, [r7, #4]
 800a4b2:	4821      	ldr	r0, [pc, #132]	@ (800a538 <ftpd_run+0x9b4>)
 800a4b4:	f7fd fa33 	bl	800791e <f_write>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	4b15      	ldr	r3, [pc, #84]	@ (800a514 <ftpd_run+0x990>)
 800a4be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a4c2:	f883 21cc 	strb.w	r2, [r3, #460]	@ 0x1cc
#if defined(_FTP_DEBUG_)
    								//printf("----->dsize:%d recv:%d len:%d \r\n", remain_datasize, ret, blocklen);
#endif
    								remain_datasize -= blocklen;
 800a4c6:	69ba      	ldr	r2, [r7, #24]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	1ad3      	subs	r3, r2, r3
 800a4cc:	61bb      	str	r3, [r7, #24]

    								if(ftp.fr != FR_OK){
 800a4ce:	4b11      	ldr	r3, [pc, #68]	@ (800a514 <ftpd_run+0x990>)
 800a4d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a4d4:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d003      	beq.n	800a4e4 <ftpd_run+0x960>
#if defined(_FTP_DEBUG_)
    									printf("f_write failed\r\n");
 800a4dc:	481b      	ldr	r0, [pc, #108]	@ (800a54c <ftpd_run+0x9c8>)
 800a4de:	f001 f9bd 	bl	800b85c <puts>
#endif
    									break;
 800a4e2:	e004      	b.n	800a4ee <ftpd_run+0x96a>
    								}

    								if(remain_datasize <= 0)
 800a4e4:	69bb      	ldr	r3, [r7, #24]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	dd00      	ble.n	800a4ec <ftpd_run+0x968>
    								memset(dbuf, 0, _MAX_SS);
 800a4ea:	e7c6      	b.n	800a47a <ftpd_run+0x8f6>
    									break;
 800a4ec:	bf00      	nop
    							}

    							if(ftp.fr != FR_OK){
 800a4ee:	4b09      	ldr	r3, [pc, #36]	@ (800a514 <ftpd_run+0x990>)
 800a4f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a4f4:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d003      	beq.n	800a504 <ftpd_run+0x980>
#if defined(_FTP_DEBUG_)
    								printf("f_write failed\r\n");
 800a4fc:	4813      	ldr	r0, [pc, #76]	@ (800a54c <ftpd_run+0x9c8>)
 800a4fe:	f001 f9ad 	bl	800b85c <puts>
#endif
    								break;
 800a502:	e02e      	b.n	800a562 <ftpd_run+0x9de>
    							}

#if defined(_FTP_DEBUG_)
    							printf("#");
 800a504:	2023      	movs	r0, #35	@ 0x23
 800a506:	f001 f94b 	bl	800b7a0 <putchar>
 800a50a:	e7ae      	b.n	800a46a <ftpd_run+0x8e6>
 800a50c:	200015f0 	.word	0x200015f0
 800a510:	0800cfc4 	.word	0x0800cfc4
 800a514:	200015fc 	.word	0x200015fc
 800a518:	0800cfe4 	.word	0x0800cfe4
 800a51c:	200016cd 	.word	0x200016cd
 800a520:	0800cff8 	.word	0x0800cff8
 800a524:	0800d00c 	.word	0x0800d00c
 800a528:	0800d014 	.word	0x0800d014
 800a52c:	200000e0 	.word	0x200000e0
 800a530:	20001731 	.word	0x20001731
 800a534:	0800d038 	.word	0x0800d038
 800a538:	20001798 	.word	0x20001798
 800a53c:	0800d058 	.word	0x0800d058
 800a540:	0800d070 	.word	0x0800d070
 800a544:	0800d088 	.word	0x0800d088
 800a548:	0800d0a0 	.word	0x0800d0a0
 800a54c:	0800d0bc 	.word	0x0800d0bc
#endif
    						}else{
    							if(getSn_SR(DATA_SOCK) != SOCK_ESTABLISHED)
 800a550:	f44f 705a 	mov.w	r0, #872	@ 0x368
 800a554:	f7fd ffd0 	bl	80084f8 <WIZCHIP_READ>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b17      	cmp	r3, #23
 800a55c:	d100      	bne.n	800a560 <ftpd_run+0x9dc>
    						if((remain_datasize = getSn_RX_RSR(DATA_SOCK)) > 0){
 800a55e:	e784      	b.n	800a46a <ftpd_run+0x8e6>
    								break;
 800a560:	bf00      	nop
    						}
    					}
#if defined(_FTP_DEBUG_)
    					printf("\r\nFile write finished\r\n");
 800a562:	486a      	ldr	r0, [pc, #424]	@ (800a70c <ftpd_run+0xb88>)
 800a564:	f001 f97a 	bl	800b85c <puts>
#endif
    					ftp.fr = f_close(&(ftp.fil));
 800a568:	4869      	ldr	r0, [pc, #420]	@ (800a710 <ftpd_run+0xb8c>)
 800a56a:	f7fd fbea 	bl	8007d42 <f_close>
 800a56e:	4603      	mov	r3, r0
 800a570:	461a      	mov	r2, r3
 800a572:	4b68      	ldr	r3, [pc, #416]	@ (800a714 <ftpd_run+0xb90>)
 800a574:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a578:	f883 21cc 	strb.w	r2, [r3, #460]	@ 0x1cc
 800a57c:	e008      	b.n	800a590 <ftpd_run+0xa0c>
    				}else{
#if defined(_FTP_DEBUG_)
    					printf("File Open Error: %d\r\n", ftp.fr);
 800a57e:	4b65      	ldr	r3, [pc, #404]	@ (800a714 <ftpd_run+0xb90>)
 800a580:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a584:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 800a588:	4619      	mov	r1, r3
 800a58a:	4863      	ldr	r0, [pc, #396]	@ (800a718 <ftpd_run+0xb94>)
 800a58c:	f001 f8f6 	bl	800b77c <iprintf>
							if(getSn_SR(DATA_SOCK) != SOCK_ESTABLISHED)
								break;
						}
					}
#endif
    				ftp.current_cmd = NO_CMD;
 800a590:	4b60      	ldr	r3, [pc, #384]	@ (800a714 <ftpd_run+0xb90>)
 800a592:	221d      	movs	r2, #29
 800a594:	711a      	strb	r2, [r3, #4]
    				disconnect(DATA_SOCK);
 800a596:	2003      	movs	r0, #3
 800a598:	f7fe fd06 	bl	8008fa8 <disconnect>
    				size = sprintf(dbuf, "226 Successfully transferred \"%s\"\r\n", ftp.filename);
 800a59c:	4a5f      	ldr	r2, [pc, #380]	@ (800a71c <ftpd_run+0xb98>)
 800a59e:	4960      	ldr	r1, [pc, #384]	@ (800a720 <ftpd_run+0xb9c>)
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f001 f963 	bl	800b86c <siprintf>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	827b      	strh	r3, [r7, #18]
					send(cur_sn, dbuf, size);
 800a5ac:	4b5d      	ldr	r3, [pc, #372]	@ (800a724 <ftpd_run+0xba0>)
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	8a7a      	ldrh	r2, [r7, #18]
 800a5b2:	6879      	ldr	r1, [r7, #4]
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7fe fd6d 	bl	8009094 <send>
    				break;
 800a5ba:	e000      	b.n	800a5be <ftpd_run+0xa3a>

    			case NO_CMD:
    			default:
    				break;
 800a5bc:	bf00      	nop
    		}
    		break;
 800a5be:	e0a0      	b.n	800a702 <ftpd_run+0xb7e>

   		case SOCK_CLOSE_WAIT :
#if defined(_FTP_DEBUG_)
   			printf("%d:CloseWait\r\n",DATA_SOCK);
 800a5c0:	2103      	movs	r1, #3
 800a5c2:	4859      	ldr	r0, [pc, #356]	@ (800a728 <ftpd_run+0xba4>)
 800a5c4:	f001 f8da 	bl	800b77c <iprintf>
#endif
   			if((ret=disconnect(DATA_SOCK)) != SOCK_OK) return ret;
 800a5c8:	2003      	movs	r0, #3
 800a5ca:	f7fe fced 	bl	8008fa8 <disconnect>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	617b      	str	r3, [r7, #20]
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d002      	beq.n	800a5de <ftpd_run+0xa5a>
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	e092      	b.n	800a704 <ftpd_run+0xb80>
#if defined(_FTP_DEBUG_)
   			printf("%d:Closed\r\n",DATA_SOCK);
 800a5de:	2103      	movs	r1, #3
 800a5e0:	4852      	ldr	r0, [pc, #328]	@ (800a72c <ftpd_run+0xba8>)
 800a5e2:	f001 f8cb 	bl	800b77c <iprintf>
#endif
   			break;
 800a5e6:	e08c      	b.n	800a702 <ftpd_run+0xb7e>

   		case SOCK_CLOSED :
   			if(ftp.dsock_state == DATASOCK_READY)
 800a5e8:	4b4a      	ldr	r3, [pc, #296]	@ (800a714 <ftpd_run+0xb90>)
 800a5ea:	795b      	ldrb	r3, [r3, #5]
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	f040 8087 	bne.w	800a700 <ftpd_run+0xb7c>
   			{
   				if(ftp.dsock_mode == PASSIVE_MODE){
 800a5f2:	4b48      	ldr	r3, [pc, #288]	@ (800a714 <ftpd_run+0xb90>)
 800a5f4:	799b      	ldrb	r3, [r3, #6]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d12e      	bne.n	800a658 <ftpd_run+0xad4>
#if defined(_FTP_DEBUG_)
   					printf("%d:FTPDataStart, port : %d\r\n",DATA_SOCK, local_port);
 800a5fa:	4b4d      	ldr	r3, [pc, #308]	@ (800a730 <ftpd_run+0xbac>)
 800a5fc:	881b      	ldrh	r3, [r3, #0]
 800a5fe:	461a      	mov	r2, r3
 800a600:	2103      	movs	r1, #3
 800a602:	484c      	ldr	r0, [pc, #304]	@ (800a734 <ftpd_run+0xbb0>)
 800a604:	f001 f8ba 	bl	800b77c <iprintf>
#endif
   					if((ret=socket(DATA_SOCK, Sn_MR_TCP, local_port, 0x0)) != DATA_SOCK)
 800a608:	4b49      	ldr	r3, [pc, #292]	@ (800a730 <ftpd_run+0xbac>)
 800a60a:	881a      	ldrh	r2, [r3, #0]
 800a60c:	2300      	movs	r3, #0
 800a60e:	2101      	movs	r1, #1
 800a610:	2003      	movs	r0, #3
 800a612:	f7fe fa11 	bl	8008a38 <socket>
 800a616:	4603      	mov	r3, r0
 800a618:	617b      	str	r3, [r7, #20]
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	2b03      	cmp	r3, #3
 800a61e:	d00a      	beq.n	800a636 <ftpd_run+0xab2>
   					{
#if defined(_FTP_DEBUG_)
   						printf("%d:socket() error:%ld\r\n", DATA_SOCK, ret);
 800a620:	697a      	ldr	r2, [r7, #20]
 800a622:	2103      	movs	r1, #3
 800a624:	4844      	ldr	r0, [pc, #272]	@ (800a738 <ftpd_run+0xbb4>)
 800a626:	f001 f8a9 	bl	800b77c <iprintf>
#endif
   						close(DATA_SOCK);
 800a62a:	2003      	movs	r0, #3
 800a62c:	f7fe fb18 	bl	8008c60 <close>
   						return ret;
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	b2db      	uxtb	r3, r3
 800a634:	e066      	b.n	800a704 <ftpd_run+0xb80>
   					}

   					local_port++;
 800a636:	4b3e      	ldr	r3, [pc, #248]	@ (800a730 <ftpd_run+0xbac>)
 800a638:	881b      	ldrh	r3, [r3, #0]
 800a63a:	3301      	adds	r3, #1
 800a63c:	b29a      	uxth	r2, r3
 800a63e:	4b3c      	ldr	r3, [pc, #240]	@ (800a730 <ftpd_run+0xbac>)
 800a640:	801a      	strh	r2, [r3, #0]
   					if(local_port > 50000)
 800a642:	4b3b      	ldr	r3, [pc, #236]	@ (800a730 <ftpd_run+0xbac>)
 800a644:	881b      	ldrh	r3, [r3, #0]
 800a646:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d91f      	bls.n	800a68e <ftpd_run+0xb0a>
   						local_port = 35000;
 800a64e:	4b38      	ldr	r3, [pc, #224]	@ (800a730 <ftpd_run+0xbac>)
 800a650:	f648 02b8 	movw	r2, #35000	@ 0x88b8
 800a654:	801a      	strh	r2, [r3, #0]
 800a656:	e01a      	b.n	800a68e <ftpd_run+0xb0a>
   				}else{
#if defined(_FTP_DEBUG_)
   					printf("%d:FTPDataStart, port : %d\r\n",DATA_SOCK, IPPORT_FTPD);
 800a658:	2214      	movs	r2, #20
 800a65a:	2103      	movs	r1, #3
 800a65c:	4835      	ldr	r0, [pc, #212]	@ (800a734 <ftpd_run+0xbb0>)
 800a65e:	f001 f88d 	bl	800b77c <iprintf>
#endif
   					if((ret=socket(DATA_SOCK, Sn_MR_TCP, IPPORT_FTPD, 0x0)) != DATA_SOCK)
 800a662:	2300      	movs	r3, #0
 800a664:	2214      	movs	r2, #20
 800a666:	2101      	movs	r1, #1
 800a668:	2003      	movs	r0, #3
 800a66a:	f7fe f9e5 	bl	8008a38 <socket>
 800a66e:	4603      	mov	r3, r0
 800a670:	617b      	str	r3, [r7, #20]
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	2b03      	cmp	r3, #3
 800a676:	d00a      	beq.n	800a68e <ftpd_run+0xb0a>
   					{
#if defined(_FTP_DEBUG_)
   						printf("%d:socket() error:%ld\r\n", DATA_SOCK, ret);
 800a678:	697a      	ldr	r2, [r7, #20]
 800a67a:	2103      	movs	r1, #3
 800a67c:	482e      	ldr	r0, [pc, #184]	@ (800a738 <ftpd_run+0xbb4>)
 800a67e:	f001 f87d 	bl	800b77c <iprintf>
#endif
   						close(DATA_SOCK);
 800a682:	2003      	movs	r0, #3
 800a684:	f7fe faec 	bl	8008c60 <close>
   						return ret;
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	e03a      	b.n	800a704 <ftpd_run+0xb80>
   					}
   				}

   				ftp.dsock_state = DATASOCK_START;
 800a68e:	4b21      	ldr	r3, [pc, #132]	@ (800a714 <ftpd_run+0xb90>)
 800a690:	2202      	movs	r2, #2
 800a692:	715a      	strb	r2, [r3, #5]
   			}
   			break;
 800a694:	e034      	b.n	800a700 <ftpd_run+0xb7c>

   		case SOCK_INIT :
#if defined(_FTP_DEBUG_)
   			printf("%d:Opened\r\n",DATA_SOCK);
 800a696:	2103      	movs	r1, #3
 800a698:	4828      	ldr	r0, [pc, #160]	@ (800a73c <ftpd_run+0xbb8>)
 800a69a:	f001 f86f 	bl	800b77c <iprintf>
#endif
   			if(ftp.dsock_mode == PASSIVE_MODE){
 800a69e:	4b1d      	ldr	r3, [pc, #116]	@ (800a714 <ftpd_run+0xb90>)
 800a6a0:	799b      	ldrb	r3, [r3, #6]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d113      	bne.n	800a6ce <ftpd_run+0xb4a>
   				if( (ret = listen(DATA_SOCK)) != SOCK_OK)
 800a6a6:	2003      	movs	r0, #3
 800a6a8:	f7fe fb48 	bl	8008d3c <listen>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	617b      	str	r3, [r7, #20]
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d006      	beq.n	800a6c4 <ftpd_run+0xb40>
   				{
#if defined(_FTP_DEBUG_)
   					printf("%d:Listen error\r\n",DATA_SOCK);
 800a6b6:	2103      	movs	r1, #3
 800a6b8:	4821      	ldr	r0, [pc, #132]	@ (800a740 <ftpd_run+0xbbc>)
 800a6ba:	f001 f85f 	bl	800b77c <iprintf>
#endif
   					return ret;
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	b2db      	uxtb	r3, r3
 800a6c2:	e01f      	b.n	800a704 <ftpd_run+0xb80>
   				}

#if defined(_FTP_DEBUG_)
   				printf("%d:Listen ok\r\n",DATA_SOCK);
 800a6c4:	2103      	movs	r1, #3
 800a6c6:	481f      	ldr	r0, [pc, #124]	@ (800a744 <ftpd_run+0xbc0>)
 800a6c8:	f001 f858 	bl	800b77c <iprintf>
 800a6cc:	e012      	b.n	800a6f4 <ftpd_run+0xb70>
#endif
   			}else{
   				if((ret = connect(DATA_SOCK, remote_ip.cVal, remote_port)) != SOCK_OK){
 800a6ce:	4b1e      	ldr	r3, [pc, #120]	@ (800a748 <ftpd_run+0xbc4>)
 800a6d0:	881b      	ldrh	r3, [r3, #0]
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	491d      	ldr	r1, [pc, #116]	@ (800a74c <ftpd_run+0xbc8>)
 800a6d6:	2003      	movs	r0, #3
 800a6d8:	f7fe fb8a 	bl	8008df0 <connect>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	617b      	str	r3, [r7, #20]
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	2b01      	cmp	r3, #1
 800a6e4:	d006      	beq.n	800a6f4 <ftpd_run+0xb70>
#if defined(_FTP_DEBUG_)
   					printf("%d:Connect error\r\n", DATA_SOCK);
 800a6e6:	2103      	movs	r1, #3
 800a6e8:	4819      	ldr	r0, [pc, #100]	@ (800a750 <ftpd_run+0xbcc>)
 800a6ea:	f001 f847 	bl	800b77c <iprintf>
#endif
   					return ret;
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	e007      	b.n	800a704 <ftpd_run+0xb80>
   				}
   			}
   			connect_state_data = 0;
 800a6f4:	4b17      	ldr	r3, [pc, #92]	@ (800a754 <ftpd_run+0xbd0>)
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	701a      	strb	r2, [r3, #0]
   			break;
 800a6fa:	e002      	b.n	800a702 <ftpd_run+0xb7e>

   		default :
   			break;
 800a6fc:	bf00      	nop
 800a6fe:	e000      	b.n	800a702 <ftpd_run+0xb7e>
   			break;
 800a700:	bf00      	nop
    }
#endif

    return 0;
 800a702:	2300      	movs	r3, #0
}
 800a704:	4618      	mov	r0, r3
 800a706:	3728      	adds	r7, #40	@ 0x28
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	0800d0cc 	.word	0x0800d0cc
 800a710:	20001798 	.word	0x20001798
 800a714:	200015fc 	.word	0x200015fc
 800a718:	0800d088 	.word	0x0800d088
 800a71c:	20001731 	.word	0x20001731
 800a720:	0800d014 	.word	0x0800d014
 800a724:	200000e0 	.word	0x200000e0
 800a728:	0800cf28 	.word	0x0800cf28
 800a72c:	0800cf38 	.word	0x0800cf38
 800a730:	200015ec 	.word	0x200015ec
 800a734:	0800d0e4 	.word	0x0800d0e4
 800a738:	0800cf54 	.word	0x0800cf54
 800a73c:	0800cf6c 	.word	0x0800cf6c
 800a740:	0800cf78 	.word	0x0800cf78
 800a744:	0800cf8c 	.word	0x0800cf8c
 800a748:	200015e4 	.word	0x200015e4
 800a74c:	200015e0 	.word	0x200015e0
 800a750:	0800d104 	.word	0x0800d104
 800a754:	200015f0 	.word	0x200015f0

0800a758 <proc_ftpd>:

char proc_ftpd(uint8_t sn, char * buf)
{
 800a758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a75a:	b0c1      	sub	sp, #260	@ 0x104
 800a75c:	af04      	add	r7, sp, #16
 800a75e:	4603      	mov	r3, r0
 800a760:	6039      	str	r1, [r7, #0]
 800a762:	71fb      	strb	r3, [r7, #7]
	int slen;
	long ret;
	

	/* Translate first word to lower case */
	for (cp = buf; *cp != ' ' && *cp != '\0'; cp++)
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a76a:	e01d      	b.n	800a7a8 <proc_ftpd+0x50>
		*cp = tolower(*cp);
 800a76c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800a776:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800a77a:	3301      	adds	r3, #1
 800a77c:	4ab3      	ldr	r2, [pc, #716]	@ (800aa4c <proc_ftpd+0x2f4>)
 800a77e:	4413      	add	r3, r2
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	f003 0303 	and.w	r3, r3, #3
 800a786:	2b01      	cmp	r3, #1
 800a788:	d103      	bne.n	800a792 <proc_ftpd+0x3a>
 800a78a:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800a78e:	3320      	adds	r3, #32
 800a790:	e001      	b.n	800a796 <proc_ftpd+0x3e>
 800a792:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800a796:	b2da      	uxtb	r2, r3
 800a798:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a79c:	701a      	strb	r2, [r3, #0]
	for (cp = buf; *cp != ' ' && *cp != '\0'; cp++)
 800a79e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a7a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	2b20      	cmp	r3, #32
 800a7b0:	d004      	beq.n	800a7bc <proc_ftpd+0x64>
 800a7b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d1d7      	bne.n	800a76c <proc_ftpd+0x14>

	/* Find command in table; if not present, return syntax error */
	for (cmdp = commands; *cmdp != NULL; cmdp++)
 800a7bc:	4ba4      	ldr	r3, [pc, #656]	@ (800aa50 <proc_ftpd+0x2f8>)
 800a7be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a7c2:	e016      	b.n	800a7f2 <proc_ftpd+0x9a>
		if (strncmp(*cmdp, buf, strlen(*cmdp)) == 0)
 800a7c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a7c8:	681c      	ldr	r4, [r3, #0]
 800a7ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f7f5 fd2f 	bl	8000234 <strlen>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	461a      	mov	r2, r3
 800a7da:	6839      	ldr	r1, [r7, #0]
 800a7dc:	4620      	mov	r0, r4
 800a7de:	f001 f945 	bl	800ba6c <strncmp>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d00a      	beq.n	800a7fe <proc_ftpd+0xa6>
	for (cmdp = commands; *cmdp != NULL; cmdp++)
 800a7e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a7ec:	3304      	adds	r3, #4
 800a7ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a7f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d1e3      	bne.n	800a7c4 <proc_ftpd+0x6c>
 800a7fc:	e000      	b.n	800a800 <proc_ftpd+0xa8>
			break;
 800a7fe:	bf00      	nop

	if (*cmdp == NULL)
 800a800:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d114      	bne.n	800a834 <proc_ftpd+0xdc>
	{
		//fsprintf(CTRL_SOCK, badcmd, buf);
		slen = sprintf(sendbuf, "500 Unknown command '%s'\r\n", buf);
 800a80a:	f107 030c 	add.w	r3, r7, #12
 800a80e:	683a      	ldr	r2, [r7, #0]
 800a810:	4990      	ldr	r1, [pc, #576]	@ (800aa54 <proc_ftpd+0x2fc>)
 800a812:	4618      	mov	r0, r3
 800a814:	f001 f82a 	bl	800b86c <siprintf>
 800a818:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
		send(sn, (uint8_t *)sendbuf, slen);
 800a81c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a820:	b29a      	uxth	r2, r3
 800a822:	f107 010c 	add.w	r1, r7, #12
 800a826:	79fb      	ldrb	r3, [r7, #7]
 800a828:	4618      	mov	r0, r3
 800a82a:	f7fe fc33 	bl	8009094 <send>
		return 0;
 800a82e:	2300      	movs	r3, #0
 800a830:	f000 bd92 	b.w	800b358 <proc_ftpd+0xc00>
	}
	/* Allow only USER, PASS and QUIT before logging in */
	if (ftp.state == FTPS_NOT_LOGIN)
 800a834:	4b88      	ldr	r3, [pc, #544]	@ (800aa58 <proc_ftpd+0x300>)
 800a836:	78db      	ldrb	r3, [r3, #3]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d12d      	bne.n	800a898 <proc_ftpd+0x140>
	{
		switch(cmdp - commands)
 800a83c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a840:	4a83      	ldr	r2, [pc, #524]	@ (800aa50 <proc_ftpd+0x2f8>)
 800a842:	1a9b      	subs	r3, r3, r2
 800a844:	109b      	asrs	r3, r3, #2
 800a846:	2b08      	cmp	r3, #8
 800a848:	bf8c      	ite	hi
 800a84a:	2201      	movhi	r2, #1
 800a84c:	2200      	movls	r2, #0
 800a84e:	b2d2      	uxtb	r2, r2
 800a850:	2a00      	cmp	r2, #0
 800a852:	d10c      	bne.n	800a86e <proc_ftpd+0x116>
 800a854:	f240 1205 	movw	r2, #261	@ 0x105
 800a858:	fa22 f303 	lsr.w	r3, r2, r3
 800a85c:	f003 0301 	and.w	r3, r3, #1
 800a860:	2b00      	cmp	r3, #0
 800a862:	bf14      	ite	ne
 800a864:	2301      	movne	r3, #1
 800a866:	2300      	moveq	r3, #0
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d113      	bne.n	800a896 <proc_ftpd+0x13e>
			case PASS_CMD:
			case QUIT_CMD:
				break;
			default:
				//fsprintf(CTRL_SOCK, notlog);
				slen = sprintf(sendbuf, "530 Please log in with USER and PASS\r\n");
 800a86e:	f107 030c 	add.w	r3, r7, #12
 800a872:	497a      	ldr	r1, [pc, #488]	@ (800aa5c <proc_ftpd+0x304>)
 800a874:	4618      	mov	r0, r3
 800a876:	f000 fff9 	bl	800b86c <siprintf>
 800a87a:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
				send(sn, (uint8_t *)sendbuf, slen);
 800a87e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a882:	b29a      	uxth	r2, r3
 800a884:	f107 010c 	add.w	r1, r7, #12
 800a888:	79fb      	ldrb	r3, [r7, #7]
 800a88a:	4618      	mov	r0, r3
 800a88c:	f7fe fc02 	bl	8009094 <send>
				return 0;
 800a890:	2300      	movs	r3, #0
 800a892:	f000 bd61 	b.w	800b358 <proc_ftpd+0xc00>
				break;
 800a896:	bf00      	nop
		}
	}
	
	arg = &buf[strlen(*cmdp)];
 800a898:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7f5 fcc8 	bl	8000234 <strlen>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	4413      	add	r3, r2
 800a8aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	while(*arg == ' ') arg++;
 800a8ae:	e004      	b.n	800a8ba <proc_ftpd+0x162>
 800a8b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a8ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	2b20      	cmp	r3, #32
 800a8c2:	d0f5      	beq.n	800a8b0 <proc_ftpd+0x158>

	/* Execute specific command */
	switch (cmdp - commands)
 800a8c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a8c8:	4a61      	ldr	r2, [pc, #388]	@ (800aa50 <proc_ftpd+0x2f8>)
 800a8ca:	1a9b      	subs	r3, r3, r2
 800a8cc:	109b      	asrs	r3, r3, #2
 800a8ce:	2b1c      	cmp	r3, #28
 800a8d0:	f200 8528 	bhi.w	800b324 <proc_ftpd+0xbcc>
 800a8d4:	a201      	add	r2, pc, #4	@ (adr r2, 800a8dc <proc_ftpd+0x184>)
 800a8d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8da:	bf00      	nop
 800a8dc:	0800a951 	.word	0x0800a951
 800a8e0:	0800b301 	.word	0x0800b301
 800a8e4:	0800aa75 	.word	0x0800aa75
 800a8e8:	0800ab25 	.word	0x0800ab25
 800a8ec:	0800af15 	.word	0x0800af15
 800a8f0:	0800b135 	.word	0x0800b135
 800a8f4:	0800b287 	.word	0x0800b287
 800a8f8:	0800b325 	.word	0x0800b325
 800a8fc:	0800acb7 	.word	0x0800acb7
 800a900:	0800ace9 	.word	0x0800ace9
 800a904:	0800ad71 	.word	0x0800ad71
 800a908:	0800ae79 	.word	0x0800ae79
 800a90c:	0800af47 	.word	0x0800af47
 800a910:	0800af73 	.word	0x0800af73
 800a914:	0800af73 	.word	0x0800af73
 800a918:	0800b20d 	.word	0x0800b20d
 800a91c:	0800b20d 	.word	0x0800b20d
 800a920:	0800b301 	.word	0x0800b301
 800a924:	0800b301 	.word	0x0800b301
 800a928:	0800b301 	.word	0x0800b301
 800a92c:	0800b301 	.word	0x0800b301
 800a930:	0800af4f 	.word	0x0800af4f
 800a934:	0800b301 	.word	0x0800b301
 800a938:	0800b301 	.word	0x0800b301
 800a93c:	0800ac93 	.word	0x0800ac93
 800a940:	0800af99 	.word	0x0800af99
 800a944:	0800b029 	.word	0x0800b029
 800a948:	0800aee3 	.word	0x0800aee3
 800a94c:	0800ad71 	.word	0x0800ad71
	{
		case USER_CMD :
#if defined(_FTP_DEBUG_)
			printf("USER_CMD : %s", arg);
 800a950:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 800a954:	4842      	ldr	r0, [pc, #264]	@ (800aa60 <proc_ftpd+0x308>)
 800a956:	f000 ff11 	bl	800b77c <iprintf>
#endif
			slen = strlen(arg);
 800a95a:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800a95e:	f7f5 fc69 	bl	8000234 <strlen>
 800a962:	4603      	mov	r3, r0
 800a964:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
			arg[slen - 1] = 0x00;
 800a968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a96c:	3b01      	subs	r3, #1
 800a96e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a972:	4413      	add	r3, r2
 800a974:	2200      	movs	r2, #0
 800a976:	701a      	strb	r2, [r3, #0]
			arg[slen - 2] = 0x00;
 800a978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a97c:	3b02      	subs	r3, #2
 800a97e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a982:	4413      	add	r3, r2
 800a984:	2200      	movs	r2, #0
 800a986:	701a      	strb	r2, [r3, #0]
			if(ftp.ID_Enable == STATUS_USED)
 800a988:	4b33      	ldr	r3, [pc, #204]	@ (800aa58 <proc_ftpd+0x300>)
 800a98a:	79db      	ldrb	r3, [r3, #7]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d12f      	bne.n	800a9f0 <proc_ftpd+0x298>
			{
				if(strcmp(ftp.username, arg) != 0)
 800a990:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 800a994:	4833      	ldr	r0, [pc, #204]	@ (800aa64 <proc_ftpd+0x30c>)
 800a996:	f7f5 fc43 	bl	8000220 <strcmp>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d02c      	beq.n	800a9fa <proc_ftpd+0x2a2>
				{
					slen = sprintf(sendbuf, "430 Invalid username\r\n");
 800a9a0:	f107 030c 	add.w	r3, r7, #12
 800a9a4:	4930      	ldr	r1, [pc, #192]	@ (800aa68 <proc_ftpd+0x310>)
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f000 ff60 	bl	800b86c <siprintf>
 800a9ac:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
					ret = send(sn, (uint8_t *)sendbuf, slen);
 800a9b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9b4:	b29a      	uxth	r2, r3
 800a9b6:	f107 010c 	add.w	r1, r7, #12
 800a9ba:	79fb      	ldrb	r3, [r7, #7]
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7fe fb69 	bl	8009094 <send>
 800a9c2:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
					if(ret < 0)
 800a9c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	f280 84be 	bge.w	800b34c <proc_ftpd+0xbf4>
					{
		#if defined(_FTP_DEBUG_)
						printf("%d:send() error:%ld\r\n",sn,ret);
 800a9d0:	79fb      	ldrb	r3, [r7, #7]
 800a9d2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	4824      	ldr	r0, [pc, #144]	@ (800aa6c <proc_ftpd+0x314>)
 800a9da:	f000 fecf 	bl	800b77c <iprintf>
		#endif
						close(sn);
 800a9de:	79fb      	ldrb	r3, [r7, #7]
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7fe f93d 	bl	8008c60 <close>
						return ret;
 800a9e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	f000 bcb4 	b.w	800b358 <proc_ftpd+0xc00>
					break;
				}
			}
			else
			{
				strcpy(ftp.username, arg);
 800a9f0:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 800a9f4:	481b      	ldr	r0, [pc, #108]	@ (800aa64 <proc_ftpd+0x30c>)
 800a9f6:	f001 f930 	bl	800bc5a <strcpy>
			}
			//fsprintf(CTRL_SOCK, givepass);
			slen = sprintf(sendbuf, "331 Enter PASS command\r\n");
 800a9fa:	f107 030c 	add.w	r3, r7, #12
 800a9fe:	491c      	ldr	r1, [pc, #112]	@ (800aa70 <proc_ftpd+0x318>)
 800aa00:	4618      	mov	r0, r3
 800aa02:	f000 ff33 	bl	800b86c <siprintf>
 800aa06:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
			ret = send(sn, (uint8_t *)sendbuf, slen);
 800aa0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa0e:	b29a      	uxth	r2, r3
 800aa10:	f107 010c 	add.w	r1, r7, #12
 800aa14:	79fb      	ldrb	r3, [r7, #7]
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7fe fb3c 	bl	8009094 <send>
 800aa1c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
			if(ret < 0)
 800aa20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f280 8493 	bge.w	800b350 <proc_ftpd+0xbf8>
			{
#if defined(_FTP_DEBUG_)
				printf("%d:send() error:%ld\r\n",sn,ret);
 800aa2a:	79fb      	ldrb	r3, [r7, #7]
 800aa2c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800aa30:	4619      	mov	r1, r3
 800aa32:	480e      	ldr	r0, [pc, #56]	@ (800aa6c <proc_ftpd+0x314>)
 800aa34:	f000 fea2 	bl	800b77c <iprintf>
#endif
				close(sn);
 800aa38:	79fb      	ldrb	r3, [r7, #7]
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7fe f910 	bl	8008c60 <close>
				return ret;
 800aa40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	f000 bc87 	b.w	800b358 <proc_ftpd+0xc00>
 800aa4a:	bf00      	nop
 800aa4c:	0800db94 	.word	0x0800db94
 800aa50:	20000068 	.word	0x20000068
 800aa54:	0800d118 	.word	0x0800d118
 800aa58:	200015fc 	.word	0x200015fc
 800aa5c:	0800d134 	.word	0x0800d134
 800aa60:	0800d15c 	.word	0x0800d15c
 800aa64:	20001605 	.word	0x20001605
 800aa68:	0800d16c 	.word	0x0800d16c
 800aa6c:	0800cea8 	.word	0x0800cea8
 800aa70:	0800d184 	.word	0x0800d184
			}
			break;

		case PASS_CMD :
#if defined(_FTP_DEBUG_)
			printf("PASS_CMD : %s", arg);
 800aa74:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 800aa78:	48d1      	ldr	r0, [pc, #836]	@ (800adc0 <proc_ftpd+0x668>)
 800aa7a:	f000 fe7f 	bl	800b77c <iprintf>
#endif
			slen = strlen(arg);
 800aa7e:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800aa82:	f7f5 fbd7 	bl	8000234 <strlen>
 800aa86:	4603      	mov	r3, r0
 800aa88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
			arg[slen - 1] = 0x00;
 800aa8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa90:	3b01      	subs	r3, #1
 800aa92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800aa96:	4413      	add	r3, r2
 800aa98:	2200      	movs	r2, #0
 800aa9a:	701a      	strb	r2, [r3, #0]
			arg[slen - 2] = 0x00;
 800aa9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aaa0:	3b02      	subs	r3, #2
 800aaa2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800aaa6:	4413      	add	r3, r2
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	701a      	strb	r2, [r3, #0]
			if(ftp.PW_Enable == STATUS_USED)
 800aaac:	4bc5      	ldr	r3, [pc, #788]	@ (800adc4 <proc_ftpd+0x66c>)
 800aaae:	7a1b      	ldrb	r3, [r3, #8]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d12f      	bne.n	800ab14 <proc_ftpd+0x3bc>
			{
				if(strcmp(ftp.userpassword, arg) != 0)
 800aab4:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 800aab8:	48c3      	ldr	r0, [pc, #780]	@ (800adc8 <proc_ftpd+0x670>)
 800aaba:	f7f5 fbb1 	bl	8000220 <strcmp>
 800aabe:	4603      	mov	r3, r0
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d027      	beq.n	800ab14 <proc_ftpd+0x3bc>
				{
					slen = sprintf(sendbuf, "430 Invalid password\r\n");
 800aac4:	f107 030c 	add.w	r3, r7, #12
 800aac8:	49c0      	ldr	r1, [pc, #768]	@ (800adcc <proc_ftpd+0x674>)
 800aaca:	4618      	mov	r0, r3
 800aacc:	f000 fece 	bl	800b86c <siprintf>
 800aad0:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
					ret = send(sn, (uint8_t *)sendbuf, slen);
 800aad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aad8:	b29a      	uxth	r2, r3
 800aada:	f107 010c 	add.w	r1, r7, #12
 800aade:	79fb      	ldrb	r3, [r7, #7]
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7fe fad7 	bl	8009094 <send>
 800aae6:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
					if(ret < 0)
 800aaea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	f280 8430 	bge.w	800b354 <proc_ftpd+0xbfc>
					{
		#if defined(_FTP_DEBUG_)
						printf("%d:send() error:%ld\r\n",sn,ret);
 800aaf4:	79fb      	ldrb	r3, [r7, #7]
 800aaf6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800aafa:	4619      	mov	r1, r3
 800aafc:	48b4      	ldr	r0, [pc, #720]	@ (800add0 <proc_ftpd+0x678>)
 800aafe:	f000 fe3d 	bl	800b77c <iprintf>
		#endif
						close(sn);
 800ab02:	79fb      	ldrb	r3, [r7, #7]
 800ab04:	4618      	mov	r0, r3
 800ab06:	f7fe f8ab 	bl	8008c60 <close>
						return ret;
 800ab0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	f000 bc22 	b.w	800b358 <proc_ftpd+0xc00>
					}
					break;
				}
			}
			ftplogin(sn, arg);
 800ab14:	79fb      	ldrb	r3, [r7, #7]
 800ab16:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f000 fc34 	bl	800b388 <ftplogin>
			break;
 800ab20:	f000 bc19 	b.w	800b356 <proc_ftpd+0xbfe>

		case TYPE_CMD :
			slen = strlen(arg);
 800ab24:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800ab28:	f7f5 fb84 	bl	8000234 <strlen>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
			arg[slen - 1] = 0x00;
 800ab32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab36:	3b01      	subs	r3, #1
 800ab38:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ab3c:	4413      	add	r3, r2
 800ab3e:	2200      	movs	r2, #0
 800ab40:	701a      	strb	r2, [r3, #0]
			arg[slen - 2] = 0x00;
 800ab42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab46:	3b02      	subs	r3, #2
 800ab48:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ab4c:	4413      	add	r3, r2
 800ab4e:	2200      	movs	r2, #0
 800ab50:	701a      	strb	r2, [r3, #0]
			switch(arg[0])
 800ab52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	3b41      	subs	r3, #65	@ 0x41
 800ab5a:	2b28      	cmp	r3, #40	@ 0x28
 800ab5c:	f200 8084 	bhi.w	800ac68 <proc_ftpd+0x510>
 800ab60:	a201      	add	r2, pc, #4	@ (adr r2, 800ab68 <proc_ftpd+0x410>)
 800ab62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab66:	bf00      	nop
 800ab68:	0800ac0d 	.word	0x0800ac0d
 800ab6c:	0800ac3b 	.word	0x0800ac3b
 800ab70:	0800ac69 	.word	0x0800ac69
 800ab74:	0800ac69 	.word	0x0800ac69
 800ab78:	0800ac69 	.word	0x0800ac69
 800ab7c:	0800ac69 	.word	0x0800ac69
 800ab80:	0800ac69 	.word	0x0800ac69
 800ab84:	0800ac69 	.word	0x0800ac69
 800ab88:	0800ac3b 	.word	0x0800ac3b
 800ab8c:	0800ac69 	.word	0x0800ac69
 800ab90:	0800ac69 	.word	0x0800ac69
 800ab94:	0800ac69 	.word	0x0800ac69
 800ab98:	0800ac69 	.word	0x0800ac69
 800ab9c:	0800ac69 	.word	0x0800ac69
 800aba0:	0800ac69 	.word	0x0800ac69
 800aba4:	0800ac69 	.word	0x0800ac69
 800aba8:	0800ac69 	.word	0x0800ac69
 800abac:	0800ac69 	.word	0x0800ac69
 800abb0:	0800ac69 	.word	0x0800ac69
 800abb4:	0800ac69 	.word	0x0800ac69
 800abb8:	0800ac69 	.word	0x0800ac69
 800abbc:	0800ac69 	.word	0x0800ac69
 800abc0:	0800ac69 	.word	0x0800ac69
 800abc4:	0800ac69 	.word	0x0800ac69
 800abc8:	0800ac69 	.word	0x0800ac69
 800abcc:	0800ac69 	.word	0x0800ac69
 800abd0:	0800ac69 	.word	0x0800ac69
 800abd4:	0800ac69 	.word	0x0800ac69
 800abd8:	0800ac69 	.word	0x0800ac69
 800abdc:	0800ac69 	.word	0x0800ac69
 800abe0:	0800ac69 	.word	0x0800ac69
 800abe4:	0800ac69 	.word	0x0800ac69
 800abe8:	0800ac0d 	.word	0x0800ac0d
 800abec:	0800ac3b 	.word	0x0800ac3b
 800abf0:	0800ac69 	.word	0x0800ac69
 800abf4:	0800ac69 	.word	0x0800ac69
 800abf8:	0800ac69 	.word	0x0800ac69
 800abfc:	0800ac69 	.word	0x0800ac69
 800ac00:	0800ac69 	.word	0x0800ac69
 800ac04:	0800ac69 	.word	0x0800ac69
 800ac08:	0800ac3b 	.word	0x0800ac3b
			{
				case 'A':
				case 'a':	/* Ascii */
					ftp.type = ASCII_TYPE;
 800ac0c:	4b6d      	ldr	r3, [pc, #436]	@ (800adc4 <proc_ftpd+0x66c>)
 800ac0e:	2200      	movs	r2, #0
 800ac10:	709a      	strb	r2, [r3, #2]
					//fsprintf(CTRL_SOCK, typeok, arg);
					slen = sprintf(sendbuf, "200 Type set to %s\r\n", arg);
 800ac12:	f107 030c 	add.w	r3, r7, #12
 800ac16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ac1a:	496e      	ldr	r1, [pc, #440]	@ (800add4 <proc_ftpd+0x67c>)
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f000 fe25 	bl	800b86c <siprintf>
 800ac22:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
					send(sn, (uint8_t *)sendbuf, slen);
 800ac26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac2a:	b29a      	uxth	r2, r3
 800ac2c:	f107 010c 	add.w	r1, r7, #12
 800ac30:	79fb      	ldrb	r3, [r7, #7]
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7fe fa2e 	bl	8009094 <send>
					break;
 800ac38:	e02a      	b.n	800ac90 <proc_ftpd+0x538>

				case 'B':
				case 'b':	/* Binary */
				case 'I':
				case 'i':	/* Image */
					ftp.type = IMAGE_TYPE;
 800ac3a:	4b62      	ldr	r3, [pc, #392]	@ (800adc4 <proc_ftpd+0x66c>)
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	709a      	strb	r2, [r3, #2]
					//fsprintf(CTRL_SOCK, typeok, arg);
					slen = sprintf(sendbuf, "200 Type set to %s\r\n", arg);
 800ac40:	f107 030c 	add.w	r3, r7, #12
 800ac44:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ac48:	4962      	ldr	r1, [pc, #392]	@ (800add4 <proc_ftpd+0x67c>)
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f000 fe0e 	bl	800b86c <siprintf>
 800ac50:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
					send(sn, (uint8_t *)sendbuf, slen);
 800ac54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac58:	b29a      	uxth	r2, r3
 800ac5a:	f107 010c 	add.w	r1, r7, #12
 800ac5e:	79fb      	ldrb	r3, [r7, #7]
 800ac60:	4618      	mov	r0, r3
 800ac62:	f7fe fa17 	bl	8009094 <send>
					break;
 800ac66:	e013      	b.n	800ac90 <proc_ftpd+0x538>

				default:	/* Invalid */
					//fsprintf(CTRL_SOCK, badtype, arg);
					slen = sprintf(sendbuf, "501 Unknown type \"%s\"\r\n", arg);
 800ac68:	f107 030c 	add.w	r3, r7, #12
 800ac6c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ac70:	4959      	ldr	r1, [pc, #356]	@ (800add8 <proc_ftpd+0x680>)
 800ac72:	4618      	mov	r0, r3
 800ac74:	f000 fdfa 	bl	800b86c <siprintf>
 800ac78:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
					send(sn, (uint8_t *)sendbuf, slen);
 800ac7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac80:	b29a      	uxth	r2, r3
 800ac82:	f107 010c 	add.w	r1, r7, #12
 800ac86:	79fb      	ldrb	r3, [r7, #7]
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f7fe fa03 	bl	8009094 <send>
					break;
 800ac8e:	bf00      	nop
			}
			break;
 800ac90:	e361      	b.n	800b356 <proc_ftpd+0xbfe>

		case FEAT_CMD :
			slen = sprintf(sendbuf, "211-Features:\r\n MDTM\r\n REST STREAM\r\n SIZE\r\n MLST size*;type*;create*;modify*;\r\n MLSD\r\n UTF8\r\n CLNT\r\n MFMT\r\n211 END\r\n");
 800ac92:	f107 030c 	add.w	r3, r7, #12
 800ac96:	4951      	ldr	r1, [pc, #324]	@ (800addc <proc_ftpd+0x684>)
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f000 fde7 	bl	800b86c <siprintf>
 800ac9e:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
			send(sn, (uint8_t *)sendbuf, slen);
 800aca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aca6:	b29a      	uxth	r2, r3
 800aca8:	f107 010c 	add.w	r1, r7, #12
 800acac:	79fb      	ldrb	r3, [r7, #7]
 800acae:	4618      	mov	r0, r3
 800acb0:	f7fe f9f0 	bl	8009094 <send>
			break;
 800acb4:	e34f      	b.n	800b356 <proc_ftpd+0xbfe>

		case QUIT_CMD :
#if defined(_FTP_DEBUG_)
			printf("QUIT_CMD\r\n");
 800acb6:	484a      	ldr	r0, [pc, #296]	@ (800ade0 <proc_ftpd+0x688>)
 800acb8:	f000 fdd0 	bl	800b85c <puts>
#endif
			//fsprintf(CTRL_SOCK, bye);
			slen = sprintf(sendbuf, "221 Goodbye!\r\n");
 800acbc:	f107 030c 	add.w	r3, r7, #12
 800acc0:	4948      	ldr	r1, [pc, #288]	@ (800ade4 <proc_ftpd+0x68c>)
 800acc2:	4618      	mov	r0, r3
 800acc4:	f000 fdd2 	bl	800b86c <siprintf>
 800acc8:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
			send(sn, (uint8_t *)sendbuf, slen);
 800accc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800acd0:	b29a      	uxth	r2, r3
 800acd2:	f107 010c 	add.w	r1, r7, #12
 800acd6:	79fb      	ldrb	r3, [r7, #7]
 800acd8:	4618      	mov	r0, r3
 800acda:	f7fe f9db 	bl	8009094 <send>
			disconnect(sn);
 800acde:	79fb      	ldrb	r3, [r7, #7]
 800ace0:	4618      	mov	r0, r3
 800ace2:	f7fe f961 	bl	8008fa8 <disconnect>
			break;
 800ace6:	e336      	b.n	800b356 <proc_ftpd+0xbfe>

		case RETR_CMD :
			slen = strlen(arg);
 800ace8:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800acec:	f7f5 faa2 	bl	8000234 <strlen>
 800acf0:	4603      	mov	r3, r0
 800acf2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
			arg[slen - 1] = 0x00;
 800acf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800acfa:	3b01      	subs	r3, #1
 800acfc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ad00:	4413      	add	r3, r2
 800ad02:	2200      	movs	r2, #0
 800ad04:	701a      	strb	r2, [r3, #0]
			arg[slen - 2] = 0x00;
 800ad06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad0a:	3b02      	subs	r3, #2
 800ad0c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ad10:	4413      	add	r3, r2
 800ad12:	2200      	movs	r2, #0
 800ad14:	701a      	strb	r2, [r3, #0]
#if defined(_FTP_DEBUG_)
			printf("RETR_CMD\r\n");
 800ad16:	4834      	ldr	r0, [pc, #208]	@ (800ade8 <proc_ftpd+0x690>)
 800ad18:	f000 fda0 	bl	800b85c <puts>
#endif
			if(strlen(ftp.workingdir) == 1)
 800ad1c:	4833      	ldr	r0, [pc, #204]	@ (800adec <proc_ftpd+0x694>)
 800ad1e:	f7f5 fa89 	bl	8000234 <strlen>
 800ad22:	4603      	mov	r3, r0
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d106      	bne.n	800ad36 <proc_ftpd+0x5de>
				sprintf(ftp.filename, "/%s", arg);
 800ad28:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ad2c:	4930      	ldr	r1, [pc, #192]	@ (800adf0 <proc_ftpd+0x698>)
 800ad2e:	4831      	ldr	r0, [pc, #196]	@ (800adf4 <proc_ftpd+0x69c>)
 800ad30:	f000 fd9c 	bl	800b86c <siprintf>
 800ad34:	e006      	b.n	800ad44 <proc_ftpd+0x5ec>
			else
				sprintf(ftp.filename, "%s/%s", ftp.workingdir, arg);
 800ad36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad3a:	4a2c      	ldr	r2, [pc, #176]	@ (800adec <proc_ftpd+0x694>)
 800ad3c:	492e      	ldr	r1, [pc, #184]	@ (800adf8 <proc_ftpd+0x6a0>)
 800ad3e:	482d      	ldr	r0, [pc, #180]	@ (800adf4 <proc_ftpd+0x69c>)
 800ad40:	f000 fd94 	bl	800b86c <siprintf>
			slen = sprintf(sendbuf, "150 Opening data channel for file downloand from server of \"%s\"\r\n", ftp.filename);
 800ad44:	f107 030c 	add.w	r3, r7, #12
 800ad48:	4a2a      	ldr	r2, [pc, #168]	@ (800adf4 <proc_ftpd+0x69c>)
 800ad4a:	492c      	ldr	r1, [pc, #176]	@ (800adfc <proc_ftpd+0x6a4>)
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f000 fd8d 	bl	800b86c <siprintf>
 800ad52:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
			send(sn, (uint8_t *)sendbuf, slen);
 800ad56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad5a:	b29a      	uxth	r2, r3
 800ad5c:	f107 010c 	add.w	r1, r7, #12
 800ad60:	79fb      	ldrb	r3, [r7, #7]
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7fe f996 	bl	8009094 <send>
			ftp.current_cmd = RETR_CMD;
 800ad68:	4b16      	ldr	r3, [pc, #88]	@ (800adc4 <proc_ftpd+0x66c>)
 800ad6a:	2209      	movs	r2, #9
 800ad6c:	711a      	strb	r2, [r3, #4]
			break;
 800ad6e:	e2f2      	b.n	800b356 <proc_ftpd+0xbfe>

		case APPE_CMD :
		case STOR_CMD:
			slen = strlen(arg);
 800ad70:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800ad74:	f7f5 fa5e 	bl	8000234 <strlen>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
			arg[slen - 1] = 0x00;
 800ad7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad82:	3b01      	subs	r3, #1
 800ad84:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ad88:	4413      	add	r3, r2
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	701a      	strb	r2, [r3, #0]
			arg[slen - 2] = 0x00;
 800ad8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad92:	3b02      	subs	r3, #2
 800ad94:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ad98:	4413      	add	r3, r2
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	701a      	strb	r2, [r3, #0]
#if defined(_FTP_DEBUG_)
			printf("STOR_CMD\r\n");
 800ad9e:	4818      	ldr	r0, [pc, #96]	@ (800ae00 <proc_ftpd+0x6a8>)
 800ada0:	f000 fd5c 	bl	800b85c <puts>
#endif
			if(strlen(ftp.workingdir) == 1)
 800ada4:	4811      	ldr	r0, [pc, #68]	@ (800adec <proc_ftpd+0x694>)
 800ada6:	f7f5 fa45 	bl	8000234 <strlen>
 800adaa:	4603      	mov	r3, r0
 800adac:	2b01      	cmp	r3, #1
 800adae:	d129      	bne.n	800ae04 <proc_ftpd+0x6ac>
				sprintf(ftp.filename, "/%s", arg);
 800adb0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800adb4:	490e      	ldr	r1, [pc, #56]	@ (800adf0 <proc_ftpd+0x698>)
 800adb6:	480f      	ldr	r0, [pc, #60]	@ (800adf4 <proc_ftpd+0x69c>)
 800adb8:	f000 fd58 	bl	800b86c <siprintf>
 800adbc:	e029      	b.n	800ae12 <proc_ftpd+0x6ba>
 800adbe:	bf00      	nop
 800adc0:	0800d1a0 	.word	0x0800d1a0
 800adc4:	200015fc 	.word	0x200015fc
 800adc8:	20001669 	.word	0x20001669
 800adcc:	0800d1b0 	.word	0x0800d1b0
 800add0:	0800cea8 	.word	0x0800cea8
 800add4:	0800d1c8 	.word	0x0800d1c8
 800add8:	0800d1e0 	.word	0x0800d1e0
 800addc:	0800d1f8 	.word	0x0800d1f8
 800ade0:	0800d270 	.word	0x0800d270
 800ade4:	0800d27c 	.word	0x0800d27c
 800ade8:	0800d28c 	.word	0x0800d28c
 800adec:	200016cd 	.word	0x200016cd
 800adf0:	0800d298 	.word	0x0800d298
 800adf4:	20001731 	.word	0x20001731
 800adf8:	0800d29c 	.word	0x0800d29c
 800adfc:	0800d2a4 	.word	0x0800d2a4
 800ae00:	0800d2e8 	.word	0x0800d2e8
			else
				sprintf(ftp.filename, "%s/%s", ftp.workingdir, arg);
 800ae04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae08:	4ab0      	ldr	r2, [pc, #704]	@ (800b0cc <proc_ftpd+0x974>)
 800ae0a:	49b1      	ldr	r1, [pc, #708]	@ (800b0d0 <proc_ftpd+0x978>)
 800ae0c:	48b1      	ldr	r0, [pc, #708]	@ (800b0d4 <proc_ftpd+0x97c>)
 800ae0e:	f000 fd2d 	bl	800b86c <siprintf>
			slen = sprintf(sendbuf, "150 Opening data channel for file upload to server of \"%s\"\r\n", ftp.filename);
 800ae12:	f107 030c 	add.w	r3, r7, #12
 800ae16:	4aaf      	ldr	r2, [pc, #700]	@ (800b0d4 <proc_ftpd+0x97c>)
 800ae18:	49af      	ldr	r1, [pc, #700]	@ (800b0d8 <proc_ftpd+0x980>)
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f000 fd26 	bl	800b86c <siprintf>
 800ae20:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
			send(sn, (uint8_t *)sendbuf, slen);
 800ae24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae28:	b29a      	uxth	r2, r3
 800ae2a:	f107 010c 	add.w	r1, r7, #12
 800ae2e:	79fb      	ldrb	r3, [r7, #7]
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7fe f92f 	bl	8009094 <send>
			ftp.current_cmd = STOR_CMD;
 800ae36:	4ba9      	ldr	r3, [pc, #676]	@ (800b0dc <proc_ftpd+0x984>)
 800ae38:	220a      	movs	r2, #10
 800ae3a:	711a      	strb	r2, [r3, #4]
			if(ftp.dsock_mode == ACTIVE_MODE)
 800ae3c:	4ba7      	ldr	r3, [pc, #668]	@ (800b0dc <proc_ftpd+0x984>)
 800ae3e:	799b      	ldrb	r3, [r3, #6]
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d115      	bne.n	800ae70 <proc_ftpd+0x718>
			{
				if((ret = connect(DATA_SOCK, remote_ip.cVal, remote_port)) != SOCK_OK){
 800ae44:	4ba6      	ldr	r3, [pc, #664]	@ (800b0e0 <proc_ftpd+0x988>)
 800ae46:	881b      	ldrh	r3, [r3, #0]
 800ae48:	461a      	mov	r2, r3
 800ae4a:	49a6      	ldr	r1, [pc, #664]	@ (800b0e4 <proc_ftpd+0x98c>)
 800ae4c:	2003      	movs	r0, #3
 800ae4e:	f7fd ffcf 	bl	8008df0 <connect>
 800ae52:	4603      	mov	r3, r0
 800ae54:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ae58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d007      	beq.n	800ae70 <proc_ftpd+0x718>
	#if defined(_FTP_DEBUG_)
					printf("%d:Connect error\r\n", DATA_SOCK);
 800ae60:	2103      	movs	r1, #3
 800ae62:	48a1      	ldr	r0, [pc, #644]	@ (800b0e8 <proc_ftpd+0x990>)
 800ae64:	f000 fc8a 	bl	800b77c <iprintf>
	#endif
					return ret;
 800ae68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	e273      	b.n	800b358 <proc_ftpd+0xc00>
				}
			}
   			connect_state_data = 0;
 800ae70:	4b9e      	ldr	r3, [pc, #632]	@ (800b0ec <proc_ftpd+0x994>)
 800ae72:	2200      	movs	r2, #0
 800ae74:	701a      	strb	r2, [r3, #0]
			break;
 800ae76:	e26e      	b.n	800b356 <proc_ftpd+0xbfe>

		case PORT_CMD:
#if defined(_FTP_DEBUG_)
			printf("PORT_CMD\r\n");
 800ae78:	489d      	ldr	r0, [pc, #628]	@ (800b0f0 <proc_ftpd+0x998>)
 800ae7a:	f000 fcef 	bl	800b85c <puts>
#endif
			if (pport(arg) == -1){
 800ae7e:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800ae82:	f000 faad 	bl	800b3e0 <pport>
 800ae86:	4603      	mov	r3, r0
 800ae88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae8c:	d111      	bne.n	800aeb2 <proc_ftpd+0x75a>
				//fsprintf(CTRL_SOCK, badport);
				slen = sprintf(sendbuf, "501 Bad port syntax\r\n");
 800ae8e:	f107 030c 	add.w	r3, r7, #12
 800ae92:	4998      	ldr	r1, [pc, #608]	@ (800b0f4 <proc_ftpd+0x99c>)
 800ae94:	4618      	mov	r0, r3
 800ae96:	f000 fce9 	bl	800b86c <siprintf>
 800ae9a:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
				send(sn, (uint8_t *)sendbuf, slen);
 800ae9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aea2:	b29a      	uxth	r2, r3
 800aea4:	f107 010c 	add.w	r1, r7, #12
 800aea8:	79fb      	ldrb	r3, [r7, #7]
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7fe f8f2 	bl	8009094 <send>
				ftp.dsock_mode = ACTIVE_MODE;
				ftp.dsock_state = DATASOCK_READY;
				slen = sprintf(sendbuf, "200 PORT command successful.\r\n");
				send(sn, (uint8_t *)sendbuf, slen);
			}
			break;
 800aeb0:	e251      	b.n	800b356 <proc_ftpd+0xbfe>
				ftp.dsock_mode = ACTIVE_MODE;
 800aeb2:	4b8a      	ldr	r3, [pc, #552]	@ (800b0dc <proc_ftpd+0x984>)
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	719a      	strb	r2, [r3, #6]
				ftp.dsock_state = DATASOCK_READY;
 800aeb8:	4b88      	ldr	r3, [pc, #544]	@ (800b0dc <proc_ftpd+0x984>)
 800aeba:	2201      	movs	r2, #1
 800aebc:	715a      	strb	r2, [r3, #5]
				slen = sprintf(sendbuf, "200 PORT command successful.\r\n");
 800aebe:	f107 030c 	add.w	r3, r7, #12
 800aec2:	498d      	ldr	r1, [pc, #564]	@ (800b0f8 <proc_ftpd+0x9a0>)
 800aec4:	4618      	mov	r0, r3
 800aec6:	f000 fcd1 	bl	800b86c <siprintf>
 800aeca:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
				send(sn, (uint8_t *)sendbuf, slen);
 800aece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aed2:	b29a      	uxth	r2, r3
 800aed4:	f107 010c 	add.w	r1, r7, #12
 800aed8:	79fb      	ldrb	r3, [r7, #7]
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7fe f8da 	bl	8009094 <send>
			break;
 800aee0:	e239      	b.n	800b356 <proc_ftpd+0xbfe>

		case MLSD_CMD:
#if defined(_FTP_DEBUG_)
			printf("MLSD_CMD\r\n");
 800aee2:	4886      	ldr	r0, [pc, #536]	@ (800b0fc <proc_ftpd+0x9a4>)
 800aee4:	f000 fcba 	bl	800b85c <puts>
#endif
			slen = sprintf(sendbuf, "150 Opening data channel for directory listing of \"%s\"\r\n", ftp.workingdir);
 800aee8:	f107 030c 	add.w	r3, r7, #12
 800aeec:	4a77      	ldr	r2, [pc, #476]	@ (800b0cc <proc_ftpd+0x974>)
 800aeee:	4984      	ldr	r1, [pc, #528]	@ (800b100 <proc_ftpd+0x9a8>)
 800aef0:	4618      	mov	r0, r3
 800aef2:	f000 fcbb 	bl	800b86c <siprintf>
 800aef6:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
			send(sn, (uint8_t *)sendbuf, slen);
 800aefa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aefe:	b29a      	uxth	r2, r3
 800af00:	f107 010c 	add.w	r1, r7, #12
 800af04:	79fb      	ldrb	r3, [r7, #7]
 800af06:	4618      	mov	r0, r3
 800af08:	f7fe f8c4 	bl	8009094 <send>
			ftp.current_cmd = MLSD_CMD;
 800af0c:	4b73      	ldr	r3, [pc, #460]	@ (800b0dc <proc_ftpd+0x984>)
 800af0e:	221b      	movs	r2, #27
 800af10:	711a      	strb	r2, [r3, #4]
			break;
 800af12:	e220      	b.n	800b356 <proc_ftpd+0xbfe>

		case LIST_CMD:
#if defined(_FTP_DEBUG_)
			printf("LIST_CMD\r\n");
 800af14:	487b      	ldr	r0, [pc, #492]	@ (800b104 <proc_ftpd+0x9ac>)
 800af16:	f000 fca1 	bl	800b85c <puts>
#endif
			slen = sprintf(sendbuf, "150 Opening data channel for directory listing of \"%s\"\r\n", ftp.workingdir);
 800af1a:	f107 030c 	add.w	r3, r7, #12
 800af1e:	4a6b      	ldr	r2, [pc, #428]	@ (800b0cc <proc_ftpd+0x974>)
 800af20:	4977      	ldr	r1, [pc, #476]	@ (800b100 <proc_ftpd+0x9a8>)
 800af22:	4618      	mov	r0, r3
 800af24:	f000 fca2 	bl	800b86c <siprintf>
 800af28:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
			send(sn, (uint8_t *)sendbuf, slen);
 800af2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af30:	b29a      	uxth	r2, r3
 800af32:	f107 010c 	add.w	r1, r7, #12
 800af36:	79fb      	ldrb	r3, [r7, #7]
 800af38:	4618      	mov	r0, r3
 800af3a:	f7fe f8ab 	bl	8009094 <send>
			ftp.current_cmd = LIST_CMD;
 800af3e:	4b67      	ldr	r3, [pc, #412]	@ (800b0dc <proc_ftpd+0x984>)
 800af40:	2204      	movs	r2, #4
 800af42:	711a      	strb	r2, [r3, #4]
			break;
 800af44:	e207      	b.n	800b356 <proc_ftpd+0xbfe>

		case NLST_CMD:
#if defined(_FTP_DEBUG_)
			printf("NLST_CMD\r\n");
 800af46:	4870      	ldr	r0, [pc, #448]	@ (800b108 <proc_ftpd+0x9b0>)
 800af48:	f000 fc88 	bl	800b85c <puts>
#endif
			break;
 800af4c:	e203      	b.n	800b356 <proc_ftpd+0xbfe>

		case SYST_CMD:
			slen = sprintf(sendbuf, "215 UNIX emulated by WIZnet\r\n");
 800af4e:	f107 030c 	add.w	r3, r7, #12
 800af52:	496e      	ldr	r1, [pc, #440]	@ (800b10c <proc_ftpd+0x9b4>)
 800af54:	4618      	mov	r0, r3
 800af56:	f000 fc89 	bl	800b86c <siprintf>
 800af5a:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
			send(sn, (uint8_t *)sendbuf, slen);
 800af5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af62:	b29a      	uxth	r2, r3
 800af64:	f107 010c 	add.w	r1, r7, #12
 800af68:	79fb      	ldrb	r3, [r7, #7]
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7fe f892 	bl	8009094 <send>
			break;
 800af70:	e1f1      	b.n	800b356 <proc_ftpd+0xbfe>

		case PWD_CMD:
		case XPWD_CMD:
			slen = sprintf(sendbuf, "257 \"%s\" is current directory.\r\n", ftp.workingdir);
 800af72:	f107 030c 	add.w	r3, r7, #12
 800af76:	4a55      	ldr	r2, [pc, #340]	@ (800b0cc <proc_ftpd+0x974>)
 800af78:	4965      	ldr	r1, [pc, #404]	@ (800b110 <proc_ftpd+0x9b8>)
 800af7a:	4618      	mov	r0, r3
 800af7c:	f000 fc76 	bl	800b86c <siprintf>
 800af80:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
			send(sn, (uint8_t *)sendbuf, slen);
 800af84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af88:	b29a      	uxth	r2, r3
 800af8a:	f107 010c 	add.w	r1, r7, #12
 800af8e:	79fb      	ldrb	r3, [r7, #7]
 800af90:	4618      	mov	r0, r3
 800af92:	f7fe f87f 	bl	8009094 <send>
			break;
 800af96:	e1de      	b.n	800b356 <proc_ftpd+0xbfe>

		case PASV_CMD:
			slen = sprintf(sendbuf, "227 Entering Passive Mode (%d,%d,%d,%d,%d,%d)\r\n", local_ip.cVal[0], local_ip.cVal[1], local_ip.cVal[2], local_ip.cVal[3], local_port >> 8, local_port & 0x00ff);
 800af98:	4b5e      	ldr	r3, [pc, #376]	@ (800b114 <proc_ftpd+0x9bc>)
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	461d      	mov	r5, r3
 800af9e:	4b5d      	ldr	r3, [pc, #372]	@ (800b114 <proc_ftpd+0x9bc>)
 800afa0:	785b      	ldrb	r3, [r3, #1]
 800afa2:	461e      	mov	r6, r3
 800afa4:	4b5b      	ldr	r3, [pc, #364]	@ (800b114 <proc_ftpd+0x9bc>)
 800afa6:	789b      	ldrb	r3, [r3, #2]
 800afa8:	461a      	mov	r2, r3
 800afaa:	4b5a      	ldr	r3, [pc, #360]	@ (800b114 <proc_ftpd+0x9bc>)
 800afac:	78db      	ldrb	r3, [r3, #3]
 800afae:	4619      	mov	r1, r3
 800afb0:	4b59      	ldr	r3, [pc, #356]	@ (800b118 <proc_ftpd+0x9c0>)
 800afb2:	881b      	ldrh	r3, [r3, #0]
 800afb4:	0a1b      	lsrs	r3, r3, #8
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	461c      	mov	r4, r3
 800afba:	4b57      	ldr	r3, [pc, #348]	@ (800b118 <proc_ftpd+0x9c0>)
 800afbc:	881b      	ldrh	r3, [r3, #0]
 800afbe:	b2db      	uxtb	r3, r3
 800afc0:	f107 000c 	add.w	r0, r7, #12
 800afc4:	9303      	str	r3, [sp, #12]
 800afc6:	9402      	str	r4, [sp, #8]
 800afc8:	9101      	str	r1, [sp, #4]
 800afca:	9200      	str	r2, [sp, #0]
 800afcc:	4633      	mov	r3, r6
 800afce:	462a      	mov	r2, r5
 800afd0:	4952      	ldr	r1, [pc, #328]	@ (800b11c <proc_ftpd+0x9c4>)
 800afd2:	f000 fc4b 	bl	800b86c <siprintf>
 800afd6:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
			send(sn, (uint8_t *)sendbuf, slen);
 800afda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afde:	b29a      	uxth	r2, r3
 800afe0:	f107 010c 	add.w	r1, r7, #12
 800afe4:	79fb      	ldrb	r3, [r7, #7]
 800afe6:	4618      	mov	r0, r3
 800afe8:	f7fe f854 	bl	8009094 <send>

			if(getSn_SR(DATA_SOCK) == SOCK_ESTABLISHED) 
 800afec:	f44f 705a 	mov.w	r0, #872	@ 0x368
 800aff0:	f7fd fa82 	bl	80084f8 <WIZCHIP_READ>
 800aff4:	4603      	mov	r3, r0
 800aff6:	2b17      	cmp	r3, #23
 800aff8:	d106      	bne.n	800b008 <proc_ftpd+0x8b0>
			{
#if defined(_FTP_DEBUG_)
				printf("data disconnect: %d\r\n", DATA_SOCK);
 800affa:	2103      	movs	r1, #3
 800affc:	4848      	ldr	r0, [pc, #288]	@ (800b120 <proc_ftpd+0x9c8>)
 800affe:	f000 fbbd 	bl	800b77c <iprintf>
#endif			
				disconnect(DATA_SOCK);
 800b002:	2003      	movs	r0, #3
 800b004:	f7fd ffd0 	bl	8008fa8 <disconnect>
			}
			ftp.dsock_mode = PASSIVE_MODE;
 800b008:	4b34      	ldr	r3, [pc, #208]	@ (800b0dc <proc_ftpd+0x984>)
 800b00a:	2200      	movs	r2, #0
 800b00c:	719a      	strb	r2, [r3, #6]
			ftp.dsock_state = DATASOCK_READY;
 800b00e:	4b33      	ldr	r3, [pc, #204]	@ (800b0dc <proc_ftpd+0x984>)
 800b010:	2201      	movs	r2, #1
 800b012:	715a      	strb	r2, [r3, #5]
			cur_sn = sn;
 800b014:	4a43      	ldr	r2, [pc, #268]	@ (800b124 <proc_ftpd+0x9cc>)
 800b016:	79fb      	ldrb	r3, [r7, #7]
 800b018:	7013      	strb	r3, [r2, #0]
#if defined(_FTP_DEBUG_)
			printf("PASV port: %d\r\n", local_port);
 800b01a:	4b3f      	ldr	r3, [pc, #252]	@ (800b118 <proc_ftpd+0x9c0>)
 800b01c:	881b      	ldrh	r3, [r3, #0]
 800b01e:	4619      	mov	r1, r3
 800b020:	4841      	ldr	r0, [pc, #260]	@ (800b128 <proc_ftpd+0x9d0>)
 800b022:	f000 fbab 	bl	800b77c <iprintf>
#endif
		break;
 800b026:	e196      	b.n	800b356 <proc_ftpd+0xbfe>

		case SIZE_CMD:
			slen = strlen(arg);
 800b028:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800b02c:	f7f5 f902 	bl	8000234 <strlen>
 800b030:	4603      	mov	r3, r0
 800b032:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
			arg[slen - 1] = 0x00;
 800b036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b03a:	3b01      	subs	r3, #1
 800b03c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b040:	4413      	add	r3, r2
 800b042:	2200      	movs	r2, #0
 800b044:	701a      	strb	r2, [r3, #0]
			arg[slen - 2] = 0x00;
 800b046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b04a:	3b02      	subs	r3, #2
 800b04c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b050:	4413      	add	r3, r2
 800b052:	2200      	movs	r2, #0
 800b054:	701a      	strb	r2, [r3, #0]
			if(slen > 3)
 800b056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b05a:	2b03      	cmp	r3, #3
 800b05c:	dd24      	ble.n	800b0a8 <proc_ftpd+0x950>
			{
				tmpstr = strrchr(arg, '/');
 800b05e:	212f      	movs	r1, #47	@ 0x2f
 800b060:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800b064:	f000 fd14 	bl	800ba90 <strrchr>
 800b068:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
//============================================================================================================================================MOD
				//*tmpstr = 0;
#if defined(F_FILESYSTEM)
				slen = (int) get_filesize(arg);
 800b06c:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800b070:	f7fe fc74 	bl	800995c <get_filesize>
 800b074:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
#else
				slen = _MAX_SS;
#endif
				if(slen > 0)
 800b078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	dd0a      	ble.n	800b096 <proc_ftpd+0x93e>
					slen = sprintf(sendbuf, "213 %d\r\n", slen);
 800b080:	f107 030c 	add.w	r3, r7, #12
 800b084:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b088:	4928      	ldr	r1, [pc, #160]	@ (800b12c <proc_ftpd+0x9d4>)
 800b08a:	4618      	mov	r0, r3
 800b08c:	f000 fbee 	bl	800b86c <siprintf>
 800b090:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
 800b094:	e010      	b.n	800b0b8 <proc_ftpd+0x960>
				else
					slen = sprintf(sendbuf, "550 File not Found\r\n");
 800b096:	f107 030c 	add.w	r3, r7, #12
 800b09a:	4925      	ldr	r1, [pc, #148]	@ (800b130 <proc_ftpd+0x9d8>)
 800b09c:	4618      	mov	r0, r3
 800b09e:	f000 fbe5 	bl	800b86c <siprintf>
 800b0a2:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
 800b0a6:	e007      	b.n	800b0b8 <proc_ftpd+0x960>
			}
			else
			{
				slen = sprintf(sendbuf, "550 File not Found\r\n");
 800b0a8:	f107 030c 	add.w	r3, r7, #12
 800b0ac:	4920      	ldr	r1, [pc, #128]	@ (800b130 <proc_ftpd+0x9d8>)
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f000 fbdc 	bl	800b86c <siprintf>
 800b0b4:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
			}
			send(sn, (uint8_t *)sendbuf, slen);
 800b0b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0bc:	b29a      	uxth	r2, r3
 800b0be:	f107 010c 	add.w	r1, r7, #12
 800b0c2:	79fb      	ldrb	r3, [r7, #7]
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f7fd ffe5 	bl	8009094 <send>
			break;
 800b0ca:	e144      	b.n	800b356 <proc_ftpd+0xbfe>
 800b0cc:	200016cd 	.word	0x200016cd
 800b0d0:	0800d29c 	.word	0x0800d29c
 800b0d4:	20001731 	.word	0x20001731
 800b0d8:	0800d2f4 	.word	0x0800d2f4
 800b0dc:	200015fc 	.word	0x200015fc
 800b0e0:	200015e4 	.word	0x200015e4
 800b0e4:	200015e0 	.word	0x200015e0
 800b0e8:	0800d104 	.word	0x0800d104
 800b0ec:	200015f0 	.word	0x200015f0
 800b0f0:	0800d334 	.word	0x0800d334
 800b0f4:	0800d340 	.word	0x0800d340
 800b0f8:	0800d358 	.word	0x0800d358
 800b0fc:	0800d378 	.word	0x0800d378
 800b100:	0800d384 	.word	0x0800d384
 800b104:	0800d3c0 	.word	0x0800d3c0
 800b108:	0800d3cc 	.word	0x0800d3cc
 800b10c:	0800d3d8 	.word	0x0800d3d8
 800b110:	0800d3f8 	.word	0x0800d3f8
 800b114:	200015e8 	.word	0x200015e8
 800b118:	200015ec 	.word	0x200015ec
 800b11c:	0800d41c 	.word	0x0800d41c
 800b120:	0800d44c 	.word	0x0800d44c
 800b124:	200000e0 	.word	0x200000e0
 800b128:	0800d464 	.word	0x0800d464
 800b12c:	0800d474 	.word	0x0800d474
 800b130:	0800d480 	.word	0x0800d480

		case CWD_CMD:
			slen = strlen(arg);
 800b134:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800b138:	f7f5 f87c 	bl	8000234 <strlen>
 800b13c:	4603      	mov	r3, r0
 800b13e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
			arg[slen - 1] = 0x00;
 800b142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b146:	3b01      	subs	r3, #1
 800b148:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b14c:	4413      	add	r3, r2
 800b14e:	2200      	movs	r2, #0
 800b150:	701a      	strb	r2, [r3, #0]
			arg[slen - 2] = 0x00;
 800b152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b156:	3b02      	subs	r3, #2
 800b158:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b15c:	4413      	add	r3, r2
 800b15e:	2200      	movs	r2, #0
 800b160:	701a      	strb	r2, [r3, #0]
			if(slen > 3)
 800b162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b166:	2b03      	cmp	r3, #3
 800b168:	dd38      	ble.n	800b1dc <proc_ftpd+0xa84>
			{
//============================================================================================================================================MOD
				//arg[slen - 3] = 0x00;
				tmpstr = strrchr(arg, '/');
 800b16a:	212f      	movs	r1, #47	@ 0x2f
 800b16c:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800b170:	f000 fc8e 	bl	800ba90 <strrchr>
 800b174:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
				//*tmpstr = 0;
#if defined(F_FILESYSTEM)
				slen = get_filesize(arg);			/* FATFS Cannot get DIR size; return 0*/
 800b178:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800b17c:	f7fe fbee 	bl	800995c <get_filesize>
 800b180:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
#else
				slen = 0;
#endif
				*tmpstr = '/';
 800b184:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b188:	222f      	movs	r2, #47	@ 0x2f
 800b18a:	701a      	strb	r2, [r3, #0]
				if(slen == 0){
 800b18c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b190:	2b00      	cmp	r3, #0
 800b192:	d118      	bne.n	800b1c6 <proc_ftpd+0xa6e>
					slen = sprintf(sendbuf, "213 %d\r\n", slen);
 800b194:	f107 030c 	add.w	r3, r7, #12
 800b198:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b19c:	4970      	ldr	r1, [pc, #448]	@ (800b360 <proc_ftpd+0xc08>)
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f000 fb64 	bl	800b86c <siprintf>
 800b1a4:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
					strcpy(ftp.workingdir, arg);
 800b1a8:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 800b1ac:	486d      	ldr	r0, [pc, #436]	@ (800b364 <proc_ftpd+0xc0c>)
 800b1ae:	f000 fd54 	bl	800bc5a <strcpy>
					slen = sprintf(sendbuf, "250 CWD successful. \"%s\" is current directory.\r\n", ftp.workingdir);
 800b1b2:	f107 030c 	add.w	r3, r7, #12
 800b1b6:	4a6b      	ldr	r2, [pc, #428]	@ (800b364 <proc_ftpd+0xc0c>)
 800b1b8:	496b      	ldr	r1, [pc, #428]	@ (800b368 <proc_ftpd+0xc10>)
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f000 fb56 	bl	800b86c <siprintf>
 800b1c0:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
 800b1c4:	e018      	b.n	800b1f8 <proc_ftpd+0xaa0>
				}
				else
				{
					slen = sprintf(sendbuf, "550 CWD failed. \"%s\"\r\n", arg);
 800b1c6:	f107 030c 	add.w	r3, r7, #12
 800b1ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b1ce:	4967      	ldr	r1, [pc, #412]	@ (800b36c <proc_ftpd+0xc14>)
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f000 fb4b 	bl	800b86c <siprintf>
 800b1d6:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
 800b1da:	e00d      	b.n	800b1f8 <proc_ftpd+0xaa0>
				}
			}
			else
			{
				strcpy(ftp.workingdir, arg);
 800b1dc:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 800b1e0:	4860      	ldr	r0, [pc, #384]	@ (800b364 <proc_ftpd+0xc0c>)
 800b1e2:	f000 fd3a 	bl	800bc5a <strcpy>
				slen = sprintf(sendbuf, "250 CWD successful. \"%s\" is current directory.\r\n", ftp.workingdir);
 800b1e6:	f107 030c 	add.w	r3, r7, #12
 800b1ea:	4a5e      	ldr	r2, [pc, #376]	@ (800b364 <proc_ftpd+0xc0c>)
 800b1ec:	495e      	ldr	r1, [pc, #376]	@ (800b368 <proc_ftpd+0xc10>)
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f000 fb3c 	bl	800b86c <siprintf>
 800b1f4:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
			}
			send(sn, (uint8_t *)sendbuf, slen);
 800b1f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1fc:	b29a      	uxth	r2, r3
 800b1fe:	f107 010c 	add.w	r1, r7, #12
 800b202:	79fb      	ldrb	r3, [r7, #7]
 800b204:	4618      	mov	r0, r3
 800b206:	f7fd ff45 	bl	8009094 <send>
			break;
 800b20a:	e0a4      	b.n	800b356 <proc_ftpd+0xbfe>

		case MKD_CMD:
		case XMKD_CMD:
			slen = strlen(arg);
 800b20c:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800b210:	f7f5 f810 	bl	8000234 <strlen>
 800b214:	4603      	mov	r3, r0
 800b216:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
			arg[slen - 1] = 0x00;
 800b21a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b21e:	3b01      	subs	r3, #1
 800b220:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b224:	4413      	add	r3, r2
 800b226:	2200      	movs	r2, #0
 800b228:	701a      	strb	r2, [r3, #0]
			arg[slen - 2] = 0x00;
 800b22a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b22e:	3b02      	subs	r3, #2
 800b230:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b234:	4413      	add	r3, r2
 800b236:	2200      	movs	r2, #0
 800b238:	701a      	strb	r2, [r3, #0]
#if defined(F_FILESYSTEM)
			if (f_mkdir(arg) != 0)
 800b23a:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800b23e:	f7fc ff2b 	bl	8008098 <f_mkdir>
 800b242:	4603      	mov	r3, r0
 800b244:	2b00      	cmp	r3, #0
 800b246:	d00a      	beq.n	800b25e <proc_ftpd+0xb06>
			{
				slen = sprintf(sendbuf, "550 Can't create directory. \"%s\"\r\n", arg);
 800b248:	f107 030c 	add.w	r3, r7, #12
 800b24c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b250:	4947      	ldr	r1, [pc, #284]	@ (800b370 <proc_ftpd+0xc18>)
 800b252:	4618      	mov	r0, r3
 800b254:	f000 fb0a 	bl	800b86c <siprintf>
 800b258:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
 800b25c:	e009      	b.n	800b272 <proc_ftpd+0xb1a>
			}
			else
			{
				slen = sprintf(sendbuf, "257 MKD command successful. \"%s\"\r\n", arg);
 800b25e:	f107 030c 	add.w	r3, r7, #12
 800b262:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b266:	4943      	ldr	r1, [pc, #268]	@ (800b374 <proc_ftpd+0xc1c>)
 800b268:	4618      	mov	r0, r3
 800b26a:	f000 faff 	bl	800b86c <siprintf>
 800b26e:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
				//strcpy(ftp.workingdir, arg);
			}
#else
			slen = sprintf(sendbuf, "550 Can't create directory. Permission denied\r\n");
#endif
			send(sn, (uint8_t *)sendbuf, slen);
 800b272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b276:	b29a      	uxth	r2, r3
 800b278:	f107 010c 	add.w	r1, r7, #12
 800b27c:	79fb      	ldrb	r3, [r7, #7]
 800b27e:	4618      	mov	r0, r3
 800b280:	f7fd ff08 	bl	8009094 <send>
			break;
 800b284:	e067      	b.n	800b356 <proc_ftpd+0xbfe>

		case DELE_CMD:
			slen = strlen(arg);
 800b286:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800b28a:	f7f4 ffd3 	bl	8000234 <strlen>
 800b28e:	4603      	mov	r3, r0
 800b290:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
			arg[slen - 1] = 0x00;
 800b294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b298:	3b01      	subs	r3, #1
 800b29a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b29e:	4413      	add	r3, r2
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	701a      	strb	r2, [r3, #0]
			arg[slen - 2] = 0x00;
 800b2a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2a8:	3b02      	subs	r3, #2
 800b2aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b2ae:	4413      	add	r3, r2
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	701a      	strb	r2, [r3, #0]
#if defined(F_FILESYSTEM)
			if (f_unlink(arg) != 0)
 800b2b4:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800b2b8:	f7fc fe43 	bl	8007f42 <f_unlink>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d00a      	beq.n	800b2d8 <proc_ftpd+0xb80>
			{
				slen = sprintf(sendbuf, "550 Could not delete. \"%s\"\r\n", arg);
 800b2c2:	f107 030c 	add.w	r3, r7, #12
 800b2c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b2ca:	492b      	ldr	r1, [pc, #172]	@ (800b378 <proc_ftpd+0xc20>)
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f000 facd 	bl	800b86c <siprintf>
 800b2d2:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
 800b2d6:	e009      	b.n	800b2ec <proc_ftpd+0xb94>
			}
			else
			{
				slen = sprintf(sendbuf, "250 Deleted. \"%s\"\r\n", arg);
 800b2d8:	f107 030c 	add.w	r3, r7, #12
 800b2dc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b2e0:	4926      	ldr	r1, [pc, #152]	@ (800b37c <proc_ftpd+0xc24>)
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f000 fac2 	bl	800b86c <siprintf>
 800b2e8:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
			}
#else
			slen = sprintf(sendbuf, "550 Could not delete. Permission denied\r\n");
#endif
			send(sn, (uint8_t *)sendbuf, slen);
 800b2ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2f0:	b29a      	uxth	r2, r3
 800b2f2:	f107 010c 	add.w	r1, r7, #12
 800b2f6:	79fb      	ldrb	r3, [r7, #7]
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f7fd fecb 	bl	8009094 <send>
			break;
 800b2fe:	e02a      	b.n	800b356 <proc_ftpd+0xbfe>
		case RMD_CMD:
		case STRU_CMD:
		case MODE_CMD:
		case XMD5_CMD:
			//fsprintf(CTRL_SOCK, unimp);
			slen = sprintf(sendbuf, "502 Command does not implemented yet.\r\n");
 800b300:	f107 030c 	add.w	r3, r7, #12
 800b304:	491e      	ldr	r1, [pc, #120]	@ (800b380 <proc_ftpd+0xc28>)
 800b306:	4618      	mov	r0, r3
 800b308:	f000 fab0 	bl	800b86c <siprintf>
 800b30c:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
			send(sn, (uint8_t *)sendbuf, slen);
 800b310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b314:	b29a      	uxth	r2, r3
 800b316:	f107 010c 	add.w	r1, r7, #12
 800b31a:	79fb      	ldrb	r3, [r7, #7]
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7fd feb9 	bl	8009094 <send>
			break;
 800b322:	e018      	b.n	800b356 <proc_ftpd+0xbfe>

		default:	/* Invalid */
			//fsprintf(CTRL_SOCK, badcmd, arg);
			slen = sprintf(sendbuf, "500 Unknown command \'%s\'\r\n", arg);
 800b324:	f107 030c 	add.w	r3, r7, #12
 800b328:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b32c:	4915      	ldr	r1, [pc, #84]	@ (800b384 <proc_ftpd+0xc2c>)
 800b32e:	4618      	mov	r0, r3
 800b330:	f000 fa9c 	bl	800b86c <siprintf>
 800b334:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
			send(sn, (uint8_t *)sendbuf, slen);
 800b338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b33c:	b29a      	uxth	r2, r3
 800b33e:	f107 010c 	add.w	r1, r7, #12
 800b342:	79fb      	ldrb	r3, [r7, #7]
 800b344:	4618      	mov	r0, r3
 800b346:	f7fd fea5 	bl	8009094 <send>
			break;
 800b34a:	e004      	b.n	800b356 <proc_ftpd+0xbfe>
					break;
 800b34c:	bf00      	nop
 800b34e:	e002      	b.n	800b356 <proc_ftpd+0xbfe>
			break;
 800b350:	bf00      	nop
 800b352:	e000      	b.n	800b356 <proc_ftpd+0xbfe>
					break;
 800b354:	bf00      	nop
	}
	
	return 1;
 800b356:	2301      	movs	r3, #1
}
 800b358:	4618      	mov	r0, r3
 800b35a:	37f4      	adds	r7, #244	@ 0xf4
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b360:	0800d474 	.word	0x0800d474
 800b364:	200016cd 	.word	0x200016cd
 800b368:	0800d498 	.word	0x0800d498
 800b36c:	0800d4cc 	.word	0x0800d4cc
 800b370:	0800d4e4 	.word	0x0800d4e4
 800b374:	0800d508 	.word	0x0800d508
 800b378:	0800d52c 	.word	0x0800d52c
 800b37c:	0800d54c 	.word	0x0800d54c
 800b380:	0800d560 	.word	0x0800d560
 800b384:	0800d118 	.word	0x0800d118

0800b388 <ftplogin>:


char ftplogin(uint8_t sn, char * pass)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b09c      	sub	sp, #112	@ 0x70
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	4603      	mov	r3, r0
 800b390:	6039      	str	r1, [r7, #0]
 800b392:	71fb      	strb	r3, [r7, #7]
	char sendbuf[100];
	int slen = 0;
 800b394:	2300      	movs	r3, #0
 800b396:	66fb      	str	r3, [r7, #108]	@ 0x6c
	
	//memset(sendbuf, 0, DATA_BUF_SIZE);
	
#if defined(_FTP_DEBUG_)
	printf("%s logged in\r\n", ftp.username);
 800b398:	490d      	ldr	r1, [pc, #52]	@ (800b3d0 <ftplogin+0x48>)
 800b39a:	480e      	ldr	r0, [pc, #56]	@ (800b3d4 <ftplogin+0x4c>)
 800b39c:	f000 f9ee 	bl	800b77c <iprintf>
#endif
	//fsprintf(CTRL_SOCK, logged);
	slen = sprintf(sendbuf, "230 Logged on\r\n");
 800b3a0:	f107 0308 	add.w	r3, r7, #8
 800b3a4:	490c      	ldr	r1, [pc, #48]	@ (800b3d8 <ftplogin+0x50>)
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f000 fa60 	bl	800b86c <siprintf>
 800b3ac:	66f8      	str	r0, [r7, #108]	@ 0x6c
	send(sn, (uint8_t *)sendbuf, slen);
 800b3ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3b0:	b29a      	uxth	r2, r3
 800b3b2:	f107 0108 	add.w	r1, r7, #8
 800b3b6:	79fb      	ldrb	r3, [r7, #7]
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f7fd fe6b 	bl	8009094 <send>
	ftp.state = FTPS_LOGIN;
 800b3be:	4b07      	ldr	r3, [pc, #28]	@ (800b3dc <ftplogin+0x54>)
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	70da      	strb	r2, [r3, #3]
	
	return 1;
 800b3c4:	2301      	movs	r3, #1
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3770      	adds	r7, #112	@ 0x70
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	20001605 	.word	0x20001605
 800b3d4:	0800d588 	.word	0x0800d588
 800b3d8:	0800d598 	.word	0x0800d598
 800b3dc:	200015fc 	.word	0x200015fc

0800b3e0 <pport>:

int pport(char * arg)
{
 800b3e0:	b590      	push	{r4, r7, lr}
 800b3e2:	b087      	sub	sp, #28
 800b3e4:	af02      	add	r7, sp, #8
 800b3e6:	6078      	str	r0, [r7, #4]
	int i;
	char* tok=0;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < 4; i++)
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	60fb      	str	r3, [r7, #12]
 800b3f0:	e024      	b.n	800b43c <pport+0x5c>
	{
		if(i==0) tok = strtok(arg,",\r\n");
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d105      	bne.n	800b404 <pport+0x24>
 800b3f8:	4935      	ldr	r1, [pc, #212]	@ (800b4d0 <pport+0xf0>)
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f000 fb5e 	bl	800babc <strtok>
 800b400:	60b8      	str	r0, [r7, #8]
 800b402:	e004      	b.n	800b40e <pport+0x2e>
		else	 tok = strtok(NULL,",");
 800b404:	4933      	ldr	r1, [pc, #204]	@ (800b4d4 <pport+0xf4>)
 800b406:	2000      	movs	r0, #0
 800b408:	f000 fb58 	bl	800babc <strtok>
 800b40c:	60b8      	str	r0, [r7, #8]
		remote_ip.cVal[i] = (uint8_t)atoi(tok);
 800b40e:	68b8      	ldr	r0, [r7, #8]
 800b410:	f000 f86a 	bl	800b4e8 <atoi>
 800b414:	4603      	mov	r3, r0
 800b416:	b2d9      	uxtb	r1, r3
 800b418:	4a2f      	ldr	r2, [pc, #188]	@ (800b4d8 <pport+0xf8>)
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	4413      	add	r3, r2
 800b41e:	460a      	mov	r2, r1
 800b420:	701a      	strb	r2, [r3, #0]
		if (!tok)
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d106      	bne.n	800b436 <pport+0x56>
		{
#if defined(_FTP_DEBUG_)
			printf("bad pport : %s\r\n", arg);
 800b428:	6879      	ldr	r1, [r7, #4]
 800b42a:	482c      	ldr	r0, [pc, #176]	@ (800b4dc <pport+0xfc>)
 800b42c:	f000 f9a6 	bl	800b77c <iprintf>
#endif
			return -1;
 800b430:	f04f 33ff 	mov.w	r3, #4294967295
 800b434:	e047      	b.n	800b4c6 <pport+0xe6>
	for (i = 0; i < 4; i++)
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	3301      	adds	r3, #1
 800b43a:	60fb      	str	r3, [r7, #12]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2b03      	cmp	r3, #3
 800b440:	ddd7      	ble.n	800b3f2 <pport+0x12>
		}
	}
	remote_port = 0;
 800b442:	4b27      	ldr	r3, [pc, #156]	@ (800b4e0 <pport+0x100>)
 800b444:	2200      	movs	r2, #0
 800b446:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < 2; i++)
 800b448:	2300      	movs	r3, #0
 800b44a:	60fb      	str	r3, [r7, #12]
 800b44c:	e022      	b.n	800b494 <pport+0xb4>
	{
		tok = strtok(NULL,",\r\n");
 800b44e:	4920      	ldr	r1, [pc, #128]	@ (800b4d0 <pport+0xf0>)
 800b450:	2000      	movs	r0, #0
 800b452:	f000 fb33 	bl	800babc <strtok>
 800b456:	60b8      	str	r0, [r7, #8]
		remote_port <<= 8;
 800b458:	4b21      	ldr	r3, [pc, #132]	@ (800b4e0 <pport+0x100>)
 800b45a:	881b      	ldrh	r3, [r3, #0]
 800b45c:	021b      	lsls	r3, r3, #8
 800b45e:	b29a      	uxth	r2, r3
 800b460:	4b1f      	ldr	r3, [pc, #124]	@ (800b4e0 <pport+0x100>)
 800b462:	801a      	strh	r2, [r3, #0]
		remote_port += atoi(tok);
 800b464:	68b8      	ldr	r0, [r7, #8]
 800b466:	f000 f83f 	bl	800b4e8 <atoi>
 800b46a:	4603      	mov	r3, r0
 800b46c:	b29a      	uxth	r2, r3
 800b46e:	4b1c      	ldr	r3, [pc, #112]	@ (800b4e0 <pport+0x100>)
 800b470:	881b      	ldrh	r3, [r3, #0]
 800b472:	4413      	add	r3, r2
 800b474:	b29a      	uxth	r2, r3
 800b476:	4b1a      	ldr	r3, [pc, #104]	@ (800b4e0 <pport+0x100>)
 800b478:	801a      	strh	r2, [r3, #0]
		if (!tok)
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d106      	bne.n	800b48e <pport+0xae>
		{
#if defined(_FTP_DEBUG_)
			printf("bad pport : %s\r\n", arg);
 800b480:	6879      	ldr	r1, [r7, #4]
 800b482:	4816      	ldr	r0, [pc, #88]	@ (800b4dc <pport+0xfc>)
 800b484:	f000 f97a 	bl	800b77c <iprintf>
#endif
			return -1;
 800b488:	f04f 33ff 	mov.w	r3, #4294967295
 800b48c:	e01b      	b.n	800b4c6 <pport+0xe6>
	for (i = 0; i < 2; i++)
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	3301      	adds	r3, #1
 800b492:	60fb      	str	r3, [r7, #12]
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2b01      	cmp	r3, #1
 800b498:	ddd9      	ble.n	800b44e <pport+0x6e>
		}
	}
#if defined(_FTP_DEBUG_)
	printf("ip : %d.%d.%d.%d, port : %d\r\n", remote_ip.cVal[0], remote_ip.cVal[1], remote_ip.cVal[2], remote_ip.cVal[3], remote_port);
 800b49a:	4b0f      	ldr	r3, [pc, #60]	@ (800b4d8 <pport+0xf8>)
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	4619      	mov	r1, r3
 800b4a0:	4b0d      	ldr	r3, [pc, #52]	@ (800b4d8 <pport+0xf8>)
 800b4a2:	785b      	ldrb	r3, [r3, #1]
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	4b0c      	ldr	r3, [pc, #48]	@ (800b4d8 <pport+0xf8>)
 800b4a8:	789b      	ldrb	r3, [r3, #2]
 800b4aa:	461c      	mov	r4, r3
 800b4ac:	4b0a      	ldr	r3, [pc, #40]	@ (800b4d8 <pport+0xf8>)
 800b4ae:	78db      	ldrb	r3, [r3, #3]
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	4b0b      	ldr	r3, [pc, #44]	@ (800b4e0 <pport+0x100>)
 800b4b4:	881b      	ldrh	r3, [r3, #0]
 800b4b6:	9301      	str	r3, [sp, #4]
 800b4b8:	9200      	str	r2, [sp, #0]
 800b4ba:	4623      	mov	r3, r4
 800b4bc:	4602      	mov	r2, r0
 800b4be:	4809      	ldr	r0, [pc, #36]	@ (800b4e4 <pport+0x104>)
 800b4c0:	f000 f95c 	bl	800b77c <iprintf>
#endif

	return 0;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3714      	adds	r7, #20
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd90      	pop	{r4, r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	0800d5a8 	.word	0x0800d5a8
 800b4d4:	0800d5ac 	.word	0x0800d5ac
 800b4d8:	200015e0 	.word	0x200015e0
 800b4dc:	0800d5b0 	.word	0x0800d5b0
 800b4e0:	200015e4 	.word	0x200015e4
 800b4e4:	0800d5c4 	.word	0x0800d5c4

0800b4e8 <atoi>:
 800b4e8:	220a      	movs	r2, #10
 800b4ea:	2100      	movs	r1, #0
 800b4ec:	f000 b87a 	b.w	800b5e4 <strtol>

0800b4f0 <_strtol_l.constprop.0>:
 800b4f0:	2b24      	cmp	r3, #36	@ 0x24
 800b4f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4f6:	4686      	mov	lr, r0
 800b4f8:	4690      	mov	r8, r2
 800b4fa:	d801      	bhi.n	800b500 <_strtol_l.constprop.0+0x10>
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d106      	bne.n	800b50e <_strtol_l.constprop.0+0x1e>
 800b500:	f000 fb7e 	bl	800bc00 <__errno>
 800b504:	2316      	movs	r3, #22
 800b506:	6003      	str	r3, [r0, #0]
 800b508:	2000      	movs	r0, #0
 800b50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b50e:	4834      	ldr	r0, [pc, #208]	@ (800b5e0 <_strtol_l.constprop.0+0xf0>)
 800b510:	460d      	mov	r5, r1
 800b512:	462a      	mov	r2, r5
 800b514:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b518:	5d06      	ldrb	r6, [r0, r4]
 800b51a:	f016 0608 	ands.w	r6, r6, #8
 800b51e:	d1f8      	bne.n	800b512 <_strtol_l.constprop.0+0x22>
 800b520:	2c2d      	cmp	r4, #45	@ 0x2d
 800b522:	d12d      	bne.n	800b580 <_strtol_l.constprop.0+0x90>
 800b524:	782c      	ldrb	r4, [r5, #0]
 800b526:	2601      	movs	r6, #1
 800b528:	1c95      	adds	r5, r2, #2
 800b52a:	f033 0210 	bics.w	r2, r3, #16
 800b52e:	d109      	bne.n	800b544 <_strtol_l.constprop.0+0x54>
 800b530:	2c30      	cmp	r4, #48	@ 0x30
 800b532:	d12a      	bne.n	800b58a <_strtol_l.constprop.0+0x9a>
 800b534:	782a      	ldrb	r2, [r5, #0]
 800b536:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b53a:	2a58      	cmp	r2, #88	@ 0x58
 800b53c:	d125      	bne.n	800b58a <_strtol_l.constprop.0+0x9a>
 800b53e:	786c      	ldrb	r4, [r5, #1]
 800b540:	2310      	movs	r3, #16
 800b542:	3502      	adds	r5, #2
 800b544:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b548:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b54c:	2200      	movs	r2, #0
 800b54e:	fbbc f9f3 	udiv	r9, ip, r3
 800b552:	4610      	mov	r0, r2
 800b554:	fb03 ca19 	mls	sl, r3, r9, ip
 800b558:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b55c:	2f09      	cmp	r7, #9
 800b55e:	d81b      	bhi.n	800b598 <_strtol_l.constprop.0+0xa8>
 800b560:	463c      	mov	r4, r7
 800b562:	42a3      	cmp	r3, r4
 800b564:	dd27      	ble.n	800b5b6 <_strtol_l.constprop.0+0xc6>
 800b566:	1c57      	adds	r7, r2, #1
 800b568:	d007      	beq.n	800b57a <_strtol_l.constprop.0+0x8a>
 800b56a:	4581      	cmp	r9, r0
 800b56c:	d320      	bcc.n	800b5b0 <_strtol_l.constprop.0+0xc0>
 800b56e:	d101      	bne.n	800b574 <_strtol_l.constprop.0+0x84>
 800b570:	45a2      	cmp	sl, r4
 800b572:	db1d      	blt.n	800b5b0 <_strtol_l.constprop.0+0xc0>
 800b574:	fb00 4003 	mla	r0, r0, r3, r4
 800b578:	2201      	movs	r2, #1
 800b57a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b57e:	e7eb      	b.n	800b558 <_strtol_l.constprop.0+0x68>
 800b580:	2c2b      	cmp	r4, #43	@ 0x2b
 800b582:	bf04      	itt	eq
 800b584:	782c      	ldrbeq	r4, [r5, #0]
 800b586:	1c95      	addeq	r5, r2, #2
 800b588:	e7cf      	b.n	800b52a <_strtol_l.constprop.0+0x3a>
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d1da      	bne.n	800b544 <_strtol_l.constprop.0+0x54>
 800b58e:	2c30      	cmp	r4, #48	@ 0x30
 800b590:	bf0c      	ite	eq
 800b592:	2308      	moveq	r3, #8
 800b594:	230a      	movne	r3, #10
 800b596:	e7d5      	b.n	800b544 <_strtol_l.constprop.0+0x54>
 800b598:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b59c:	2f19      	cmp	r7, #25
 800b59e:	d801      	bhi.n	800b5a4 <_strtol_l.constprop.0+0xb4>
 800b5a0:	3c37      	subs	r4, #55	@ 0x37
 800b5a2:	e7de      	b.n	800b562 <_strtol_l.constprop.0+0x72>
 800b5a4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b5a8:	2f19      	cmp	r7, #25
 800b5aa:	d804      	bhi.n	800b5b6 <_strtol_l.constprop.0+0xc6>
 800b5ac:	3c57      	subs	r4, #87	@ 0x57
 800b5ae:	e7d8      	b.n	800b562 <_strtol_l.constprop.0+0x72>
 800b5b0:	f04f 32ff 	mov.w	r2, #4294967295
 800b5b4:	e7e1      	b.n	800b57a <_strtol_l.constprop.0+0x8a>
 800b5b6:	1c53      	adds	r3, r2, #1
 800b5b8:	d108      	bne.n	800b5cc <_strtol_l.constprop.0+0xdc>
 800b5ba:	2322      	movs	r3, #34	@ 0x22
 800b5bc:	f8ce 3000 	str.w	r3, [lr]
 800b5c0:	4660      	mov	r0, ip
 800b5c2:	f1b8 0f00 	cmp.w	r8, #0
 800b5c6:	d0a0      	beq.n	800b50a <_strtol_l.constprop.0+0x1a>
 800b5c8:	1e69      	subs	r1, r5, #1
 800b5ca:	e006      	b.n	800b5da <_strtol_l.constprop.0+0xea>
 800b5cc:	b106      	cbz	r6, 800b5d0 <_strtol_l.constprop.0+0xe0>
 800b5ce:	4240      	negs	r0, r0
 800b5d0:	f1b8 0f00 	cmp.w	r8, #0
 800b5d4:	d099      	beq.n	800b50a <_strtol_l.constprop.0+0x1a>
 800b5d6:	2a00      	cmp	r2, #0
 800b5d8:	d1f6      	bne.n	800b5c8 <_strtol_l.constprop.0+0xd8>
 800b5da:	f8c8 1000 	str.w	r1, [r8]
 800b5de:	e794      	b.n	800b50a <_strtol_l.constprop.0+0x1a>
 800b5e0:	0800db95 	.word	0x0800db95

0800b5e4 <strtol>:
 800b5e4:	4613      	mov	r3, r2
 800b5e6:	460a      	mov	r2, r1
 800b5e8:	4601      	mov	r1, r0
 800b5ea:	4802      	ldr	r0, [pc, #8]	@ (800b5f4 <strtol+0x10>)
 800b5ec:	6800      	ldr	r0, [r0, #0]
 800b5ee:	f7ff bf7f 	b.w	800b4f0 <_strtol_l.constprop.0>
 800b5f2:	bf00      	nop
 800b5f4:	200000f0 	.word	0x200000f0

0800b5f8 <std>:
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	b510      	push	{r4, lr}
 800b5fc:	4604      	mov	r4, r0
 800b5fe:	e9c0 3300 	strd	r3, r3, [r0]
 800b602:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b606:	6083      	str	r3, [r0, #8]
 800b608:	8181      	strh	r1, [r0, #12]
 800b60a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b60c:	81c2      	strh	r2, [r0, #14]
 800b60e:	6183      	str	r3, [r0, #24]
 800b610:	4619      	mov	r1, r3
 800b612:	2208      	movs	r2, #8
 800b614:	305c      	adds	r0, #92	@ 0x5c
 800b616:	f000 fa21 	bl	800ba5c <memset>
 800b61a:	4b0d      	ldr	r3, [pc, #52]	@ (800b650 <std+0x58>)
 800b61c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b61e:	4b0d      	ldr	r3, [pc, #52]	@ (800b654 <std+0x5c>)
 800b620:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b622:	4b0d      	ldr	r3, [pc, #52]	@ (800b658 <std+0x60>)
 800b624:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b626:	4b0d      	ldr	r3, [pc, #52]	@ (800b65c <std+0x64>)
 800b628:	6323      	str	r3, [r4, #48]	@ 0x30
 800b62a:	4b0d      	ldr	r3, [pc, #52]	@ (800b660 <std+0x68>)
 800b62c:	6224      	str	r4, [r4, #32]
 800b62e:	429c      	cmp	r4, r3
 800b630:	d006      	beq.n	800b640 <std+0x48>
 800b632:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b636:	4294      	cmp	r4, r2
 800b638:	d002      	beq.n	800b640 <std+0x48>
 800b63a:	33d0      	adds	r3, #208	@ 0xd0
 800b63c:	429c      	cmp	r4, r3
 800b63e:	d105      	bne.n	800b64c <std+0x54>
 800b640:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b648:	f000 bb04 	b.w	800bc54 <__retarget_lock_init_recursive>
 800b64c:	bd10      	pop	{r4, pc}
 800b64e:	bf00      	nop
 800b650:	0800b8ad 	.word	0x0800b8ad
 800b654:	0800b8cf 	.word	0x0800b8cf
 800b658:	0800b907 	.word	0x0800b907
 800b65c:	0800b92b 	.word	0x0800b92b
 800b660:	200028e4 	.word	0x200028e4

0800b664 <stdio_exit_handler>:
 800b664:	4a02      	ldr	r2, [pc, #8]	@ (800b670 <stdio_exit_handler+0xc>)
 800b666:	4903      	ldr	r1, [pc, #12]	@ (800b674 <stdio_exit_handler+0x10>)
 800b668:	4803      	ldr	r0, [pc, #12]	@ (800b678 <stdio_exit_handler+0x14>)
 800b66a:	f000 b869 	b.w	800b740 <_fwalk_sglue>
 800b66e:	bf00      	nop
 800b670:	200000e4 	.word	0x200000e4
 800b674:	0800c801 	.word	0x0800c801
 800b678:	200000f4 	.word	0x200000f4

0800b67c <cleanup_stdio>:
 800b67c:	6841      	ldr	r1, [r0, #4]
 800b67e:	4b0c      	ldr	r3, [pc, #48]	@ (800b6b0 <cleanup_stdio+0x34>)
 800b680:	4299      	cmp	r1, r3
 800b682:	b510      	push	{r4, lr}
 800b684:	4604      	mov	r4, r0
 800b686:	d001      	beq.n	800b68c <cleanup_stdio+0x10>
 800b688:	f001 f8ba 	bl	800c800 <_fflush_r>
 800b68c:	68a1      	ldr	r1, [r4, #8]
 800b68e:	4b09      	ldr	r3, [pc, #36]	@ (800b6b4 <cleanup_stdio+0x38>)
 800b690:	4299      	cmp	r1, r3
 800b692:	d002      	beq.n	800b69a <cleanup_stdio+0x1e>
 800b694:	4620      	mov	r0, r4
 800b696:	f001 f8b3 	bl	800c800 <_fflush_r>
 800b69a:	68e1      	ldr	r1, [r4, #12]
 800b69c:	4b06      	ldr	r3, [pc, #24]	@ (800b6b8 <cleanup_stdio+0x3c>)
 800b69e:	4299      	cmp	r1, r3
 800b6a0:	d004      	beq.n	800b6ac <cleanup_stdio+0x30>
 800b6a2:	4620      	mov	r0, r4
 800b6a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6a8:	f001 b8aa 	b.w	800c800 <_fflush_r>
 800b6ac:	bd10      	pop	{r4, pc}
 800b6ae:	bf00      	nop
 800b6b0:	200028e4 	.word	0x200028e4
 800b6b4:	2000294c 	.word	0x2000294c
 800b6b8:	200029b4 	.word	0x200029b4

0800b6bc <global_stdio_init.part.0>:
 800b6bc:	b510      	push	{r4, lr}
 800b6be:	4b0b      	ldr	r3, [pc, #44]	@ (800b6ec <global_stdio_init.part.0+0x30>)
 800b6c0:	4c0b      	ldr	r4, [pc, #44]	@ (800b6f0 <global_stdio_init.part.0+0x34>)
 800b6c2:	4a0c      	ldr	r2, [pc, #48]	@ (800b6f4 <global_stdio_init.part.0+0x38>)
 800b6c4:	601a      	str	r2, [r3, #0]
 800b6c6:	4620      	mov	r0, r4
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	2104      	movs	r1, #4
 800b6cc:	f7ff ff94 	bl	800b5f8 <std>
 800b6d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b6d4:	2201      	movs	r2, #1
 800b6d6:	2109      	movs	r1, #9
 800b6d8:	f7ff ff8e 	bl	800b5f8 <std>
 800b6dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b6e0:	2202      	movs	r2, #2
 800b6e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6e6:	2112      	movs	r1, #18
 800b6e8:	f7ff bf86 	b.w	800b5f8 <std>
 800b6ec:	20002a1c 	.word	0x20002a1c
 800b6f0:	200028e4 	.word	0x200028e4
 800b6f4:	0800b665 	.word	0x0800b665

0800b6f8 <__sfp_lock_acquire>:
 800b6f8:	4801      	ldr	r0, [pc, #4]	@ (800b700 <__sfp_lock_acquire+0x8>)
 800b6fa:	f000 baac 	b.w	800bc56 <__retarget_lock_acquire_recursive>
 800b6fe:	bf00      	nop
 800b700:	20002a25 	.word	0x20002a25

0800b704 <__sfp_lock_release>:
 800b704:	4801      	ldr	r0, [pc, #4]	@ (800b70c <__sfp_lock_release+0x8>)
 800b706:	f000 baa7 	b.w	800bc58 <__retarget_lock_release_recursive>
 800b70a:	bf00      	nop
 800b70c:	20002a25 	.word	0x20002a25

0800b710 <__sinit>:
 800b710:	b510      	push	{r4, lr}
 800b712:	4604      	mov	r4, r0
 800b714:	f7ff fff0 	bl	800b6f8 <__sfp_lock_acquire>
 800b718:	6a23      	ldr	r3, [r4, #32]
 800b71a:	b11b      	cbz	r3, 800b724 <__sinit+0x14>
 800b71c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b720:	f7ff bff0 	b.w	800b704 <__sfp_lock_release>
 800b724:	4b04      	ldr	r3, [pc, #16]	@ (800b738 <__sinit+0x28>)
 800b726:	6223      	str	r3, [r4, #32]
 800b728:	4b04      	ldr	r3, [pc, #16]	@ (800b73c <__sinit+0x2c>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d1f5      	bne.n	800b71c <__sinit+0xc>
 800b730:	f7ff ffc4 	bl	800b6bc <global_stdio_init.part.0>
 800b734:	e7f2      	b.n	800b71c <__sinit+0xc>
 800b736:	bf00      	nop
 800b738:	0800b67d 	.word	0x0800b67d
 800b73c:	20002a1c 	.word	0x20002a1c

0800b740 <_fwalk_sglue>:
 800b740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b744:	4607      	mov	r7, r0
 800b746:	4688      	mov	r8, r1
 800b748:	4614      	mov	r4, r2
 800b74a:	2600      	movs	r6, #0
 800b74c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b750:	f1b9 0901 	subs.w	r9, r9, #1
 800b754:	d505      	bpl.n	800b762 <_fwalk_sglue+0x22>
 800b756:	6824      	ldr	r4, [r4, #0]
 800b758:	2c00      	cmp	r4, #0
 800b75a:	d1f7      	bne.n	800b74c <_fwalk_sglue+0xc>
 800b75c:	4630      	mov	r0, r6
 800b75e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b762:	89ab      	ldrh	r3, [r5, #12]
 800b764:	2b01      	cmp	r3, #1
 800b766:	d907      	bls.n	800b778 <_fwalk_sglue+0x38>
 800b768:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b76c:	3301      	adds	r3, #1
 800b76e:	d003      	beq.n	800b778 <_fwalk_sglue+0x38>
 800b770:	4629      	mov	r1, r5
 800b772:	4638      	mov	r0, r7
 800b774:	47c0      	blx	r8
 800b776:	4306      	orrs	r6, r0
 800b778:	3568      	adds	r5, #104	@ 0x68
 800b77a:	e7e9      	b.n	800b750 <_fwalk_sglue+0x10>

0800b77c <iprintf>:
 800b77c:	b40f      	push	{r0, r1, r2, r3}
 800b77e:	b507      	push	{r0, r1, r2, lr}
 800b780:	4906      	ldr	r1, [pc, #24]	@ (800b79c <iprintf+0x20>)
 800b782:	ab04      	add	r3, sp, #16
 800b784:	6808      	ldr	r0, [r1, #0]
 800b786:	f853 2b04 	ldr.w	r2, [r3], #4
 800b78a:	6881      	ldr	r1, [r0, #8]
 800b78c:	9301      	str	r3, [sp, #4]
 800b78e:	f000 fd0d 	bl	800c1ac <_vfiprintf_r>
 800b792:	b003      	add	sp, #12
 800b794:	f85d eb04 	ldr.w	lr, [sp], #4
 800b798:	b004      	add	sp, #16
 800b79a:	4770      	bx	lr
 800b79c:	200000f0 	.word	0x200000f0

0800b7a0 <putchar>:
 800b7a0:	4b02      	ldr	r3, [pc, #8]	@ (800b7ac <putchar+0xc>)
 800b7a2:	4601      	mov	r1, r0
 800b7a4:	6818      	ldr	r0, [r3, #0]
 800b7a6:	6882      	ldr	r2, [r0, #8]
 800b7a8:	f001 b8c6 	b.w	800c938 <_putc_r>
 800b7ac:	200000f0 	.word	0x200000f0

0800b7b0 <_puts_r>:
 800b7b0:	6a03      	ldr	r3, [r0, #32]
 800b7b2:	b570      	push	{r4, r5, r6, lr}
 800b7b4:	6884      	ldr	r4, [r0, #8]
 800b7b6:	4605      	mov	r5, r0
 800b7b8:	460e      	mov	r6, r1
 800b7ba:	b90b      	cbnz	r3, 800b7c0 <_puts_r+0x10>
 800b7bc:	f7ff ffa8 	bl	800b710 <__sinit>
 800b7c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b7c2:	07db      	lsls	r3, r3, #31
 800b7c4:	d405      	bmi.n	800b7d2 <_puts_r+0x22>
 800b7c6:	89a3      	ldrh	r3, [r4, #12]
 800b7c8:	0598      	lsls	r0, r3, #22
 800b7ca:	d402      	bmi.n	800b7d2 <_puts_r+0x22>
 800b7cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7ce:	f000 fa42 	bl	800bc56 <__retarget_lock_acquire_recursive>
 800b7d2:	89a3      	ldrh	r3, [r4, #12]
 800b7d4:	0719      	lsls	r1, r3, #28
 800b7d6:	d502      	bpl.n	800b7de <_puts_r+0x2e>
 800b7d8:	6923      	ldr	r3, [r4, #16]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d135      	bne.n	800b84a <_puts_r+0x9a>
 800b7de:	4621      	mov	r1, r4
 800b7e0:	4628      	mov	r0, r5
 800b7e2:	f000 f8e5 	bl	800b9b0 <__swsetup_r>
 800b7e6:	b380      	cbz	r0, 800b84a <_puts_r+0x9a>
 800b7e8:	f04f 35ff 	mov.w	r5, #4294967295
 800b7ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b7ee:	07da      	lsls	r2, r3, #31
 800b7f0:	d405      	bmi.n	800b7fe <_puts_r+0x4e>
 800b7f2:	89a3      	ldrh	r3, [r4, #12]
 800b7f4:	059b      	lsls	r3, r3, #22
 800b7f6:	d402      	bmi.n	800b7fe <_puts_r+0x4e>
 800b7f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7fa:	f000 fa2d 	bl	800bc58 <__retarget_lock_release_recursive>
 800b7fe:	4628      	mov	r0, r5
 800b800:	bd70      	pop	{r4, r5, r6, pc}
 800b802:	2b00      	cmp	r3, #0
 800b804:	da04      	bge.n	800b810 <_puts_r+0x60>
 800b806:	69a2      	ldr	r2, [r4, #24]
 800b808:	429a      	cmp	r2, r3
 800b80a:	dc17      	bgt.n	800b83c <_puts_r+0x8c>
 800b80c:	290a      	cmp	r1, #10
 800b80e:	d015      	beq.n	800b83c <_puts_r+0x8c>
 800b810:	6823      	ldr	r3, [r4, #0]
 800b812:	1c5a      	adds	r2, r3, #1
 800b814:	6022      	str	r2, [r4, #0]
 800b816:	7019      	strb	r1, [r3, #0]
 800b818:	68a3      	ldr	r3, [r4, #8]
 800b81a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b81e:	3b01      	subs	r3, #1
 800b820:	60a3      	str	r3, [r4, #8]
 800b822:	2900      	cmp	r1, #0
 800b824:	d1ed      	bne.n	800b802 <_puts_r+0x52>
 800b826:	2b00      	cmp	r3, #0
 800b828:	da11      	bge.n	800b84e <_puts_r+0x9e>
 800b82a:	4622      	mov	r2, r4
 800b82c:	210a      	movs	r1, #10
 800b82e:	4628      	mov	r0, r5
 800b830:	f000 f87f 	bl	800b932 <__swbuf_r>
 800b834:	3001      	adds	r0, #1
 800b836:	d0d7      	beq.n	800b7e8 <_puts_r+0x38>
 800b838:	250a      	movs	r5, #10
 800b83a:	e7d7      	b.n	800b7ec <_puts_r+0x3c>
 800b83c:	4622      	mov	r2, r4
 800b83e:	4628      	mov	r0, r5
 800b840:	f000 f877 	bl	800b932 <__swbuf_r>
 800b844:	3001      	adds	r0, #1
 800b846:	d1e7      	bne.n	800b818 <_puts_r+0x68>
 800b848:	e7ce      	b.n	800b7e8 <_puts_r+0x38>
 800b84a:	3e01      	subs	r6, #1
 800b84c:	e7e4      	b.n	800b818 <_puts_r+0x68>
 800b84e:	6823      	ldr	r3, [r4, #0]
 800b850:	1c5a      	adds	r2, r3, #1
 800b852:	6022      	str	r2, [r4, #0]
 800b854:	220a      	movs	r2, #10
 800b856:	701a      	strb	r2, [r3, #0]
 800b858:	e7ee      	b.n	800b838 <_puts_r+0x88>
	...

0800b85c <puts>:
 800b85c:	4b02      	ldr	r3, [pc, #8]	@ (800b868 <puts+0xc>)
 800b85e:	4601      	mov	r1, r0
 800b860:	6818      	ldr	r0, [r3, #0]
 800b862:	f7ff bfa5 	b.w	800b7b0 <_puts_r>
 800b866:	bf00      	nop
 800b868:	200000f0 	.word	0x200000f0

0800b86c <siprintf>:
 800b86c:	b40e      	push	{r1, r2, r3}
 800b86e:	b500      	push	{lr}
 800b870:	b09c      	sub	sp, #112	@ 0x70
 800b872:	ab1d      	add	r3, sp, #116	@ 0x74
 800b874:	9002      	str	r0, [sp, #8]
 800b876:	9006      	str	r0, [sp, #24]
 800b878:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b87c:	4809      	ldr	r0, [pc, #36]	@ (800b8a4 <siprintf+0x38>)
 800b87e:	9107      	str	r1, [sp, #28]
 800b880:	9104      	str	r1, [sp, #16]
 800b882:	4909      	ldr	r1, [pc, #36]	@ (800b8a8 <siprintf+0x3c>)
 800b884:	f853 2b04 	ldr.w	r2, [r3], #4
 800b888:	9105      	str	r1, [sp, #20]
 800b88a:	6800      	ldr	r0, [r0, #0]
 800b88c:	9301      	str	r3, [sp, #4]
 800b88e:	a902      	add	r1, sp, #8
 800b890:	f000 fb66 	bl	800bf60 <_svfiprintf_r>
 800b894:	9b02      	ldr	r3, [sp, #8]
 800b896:	2200      	movs	r2, #0
 800b898:	701a      	strb	r2, [r3, #0]
 800b89a:	b01c      	add	sp, #112	@ 0x70
 800b89c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8a0:	b003      	add	sp, #12
 800b8a2:	4770      	bx	lr
 800b8a4:	200000f0 	.word	0x200000f0
 800b8a8:	ffff0208 	.word	0xffff0208

0800b8ac <__sread>:
 800b8ac:	b510      	push	{r4, lr}
 800b8ae:	460c      	mov	r4, r1
 800b8b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8b4:	f000 f980 	bl	800bbb8 <_read_r>
 800b8b8:	2800      	cmp	r0, #0
 800b8ba:	bfab      	itete	ge
 800b8bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b8be:	89a3      	ldrhlt	r3, [r4, #12]
 800b8c0:	181b      	addge	r3, r3, r0
 800b8c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b8c6:	bfac      	ite	ge
 800b8c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b8ca:	81a3      	strhlt	r3, [r4, #12]
 800b8cc:	bd10      	pop	{r4, pc}

0800b8ce <__swrite>:
 800b8ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8d2:	461f      	mov	r7, r3
 800b8d4:	898b      	ldrh	r3, [r1, #12]
 800b8d6:	05db      	lsls	r3, r3, #23
 800b8d8:	4605      	mov	r5, r0
 800b8da:	460c      	mov	r4, r1
 800b8dc:	4616      	mov	r6, r2
 800b8de:	d505      	bpl.n	800b8ec <__swrite+0x1e>
 800b8e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8e4:	2302      	movs	r3, #2
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	f000 f954 	bl	800bb94 <_lseek_r>
 800b8ec:	89a3      	ldrh	r3, [r4, #12]
 800b8ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b8f6:	81a3      	strh	r3, [r4, #12]
 800b8f8:	4632      	mov	r2, r6
 800b8fa:	463b      	mov	r3, r7
 800b8fc:	4628      	mov	r0, r5
 800b8fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b902:	f000 b96b 	b.w	800bbdc <_write_r>

0800b906 <__sseek>:
 800b906:	b510      	push	{r4, lr}
 800b908:	460c      	mov	r4, r1
 800b90a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b90e:	f000 f941 	bl	800bb94 <_lseek_r>
 800b912:	1c43      	adds	r3, r0, #1
 800b914:	89a3      	ldrh	r3, [r4, #12]
 800b916:	bf15      	itete	ne
 800b918:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b91a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b91e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b922:	81a3      	strheq	r3, [r4, #12]
 800b924:	bf18      	it	ne
 800b926:	81a3      	strhne	r3, [r4, #12]
 800b928:	bd10      	pop	{r4, pc}

0800b92a <__sclose>:
 800b92a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b92e:	f000 b921 	b.w	800bb74 <_close_r>

0800b932 <__swbuf_r>:
 800b932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b934:	460e      	mov	r6, r1
 800b936:	4614      	mov	r4, r2
 800b938:	4605      	mov	r5, r0
 800b93a:	b118      	cbz	r0, 800b944 <__swbuf_r+0x12>
 800b93c:	6a03      	ldr	r3, [r0, #32]
 800b93e:	b90b      	cbnz	r3, 800b944 <__swbuf_r+0x12>
 800b940:	f7ff fee6 	bl	800b710 <__sinit>
 800b944:	69a3      	ldr	r3, [r4, #24]
 800b946:	60a3      	str	r3, [r4, #8]
 800b948:	89a3      	ldrh	r3, [r4, #12]
 800b94a:	071a      	lsls	r2, r3, #28
 800b94c:	d501      	bpl.n	800b952 <__swbuf_r+0x20>
 800b94e:	6923      	ldr	r3, [r4, #16]
 800b950:	b943      	cbnz	r3, 800b964 <__swbuf_r+0x32>
 800b952:	4621      	mov	r1, r4
 800b954:	4628      	mov	r0, r5
 800b956:	f000 f82b 	bl	800b9b0 <__swsetup_r>
 800b95a:	b118      	cbz	r0, 800b964 <__swbuf_r+0x32>
 800b95c:	f04f 37ff 	mov.w	r7, #4294967295
 800b960:	4638      	mov	r0, r7
 800b962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b964:	6823      	ldr	r3, [r4, #0]
 800b966:	6922      	ldr	r2, [r4, #16]
 800b968:	1a98      	subs	r0, r3, r2
 800b96a:	6963      	ldr	r3, [r4, #20]
 800b96c:	b2f6      	uxtb	r6, r6
 800b96e:	4283      	cmp	r3, r0
 800b970:	4637      	mov	r7, r6
 800b972:	dc05      	bgt.n	800b980 <__swbuf_r+0x4e>
 800b974:	4621      	mov	r1, r4
 800b976:	4628      	mov	r0, r5
 800b978:	f000 ff42 	bl	800c800 <_fflush_r>
 800b97c:	2800      	cmp	r0, #0
 800b97e:	d1ed      	bne.n	800b95c <__swbuf_r+0x2a>
 800b980:	68a3      	ldr	r3, [r4, #8]
 800b982:	3b01      	subs	r3, #1
 800b984:	60a3      	str	r3, [r4, #8]
 800b986:	6823      	ldr	r3, [r4, #0]
 800b988:	1c5a      	adds	r2, r3, #1
 800b98a:	6022      	str	r2, [r4, #0]
 800b98c:	701e      	strb	r6, [r3, #0]
 800b98e:	6962      	ldr	r2, [r4, #20]
 800b990:	1c43      	adds	r3, r0, #1
 800b992:	429a      	cmp	r2, r3
 800b994:	d004      	beq.n	800b9a0 <__swbuf_r+0x6e>
 800b996:	89a3      	ldrh	r3, [r4, #12]
 800b998:	07db      	lsls	r3, r3, #31
 800b99a:	d5e1      	bpl.n	800b960 <__swbuf_r+0x2e>
 800b99c:	2e0a      	cmp	r6, #10
 800b99e:	d1df      	bne.n	800b960 <__swbuf_r+0x2e>
 800b9a0:	4621      	mov	r1, r4
 800b9a2:	4628      	mov	r0, r5
 800b9a4:	f000 ff2c 	bl	800c800 <_fflush_r>
 800b9a8:	2800      	cmp	r0, #0
 800b9aa:	d0d9      	beq.n	800b960 <__swbuf_r+0x2e>
 800b9ac:	e7d6      	b.n	800b95c <__swbuf_r+0x2a>
	...

0800b9b0 <__swsetup_r>:
 800b9b0:	b538      	push	{r3, r4, r5, lr}
 800b9b2:	4b29      	ldr	r3, [pc, #164]	@ (800ba58 <__swsetup_r+0xa8>)
 800b9b4:	4605      	mov	r5, r0
 800b9b6:	6818      	ldr	r0, [r3, #0]
 800b9b8:	460c      	mov	r4, r1
 800b9ba:	b118      	cbz	r0, 800b9c4 <__swsetup_r+0x14>
 800b9bc:	6a03      	ldr	r3, [r0, #32]
 800b9be:	b90b      	cbnz	r3, 800b9c4 <__swsetup_r+0x14>
 800b9c0:	f7ff fea6 	bl	800b710 <__sinit>
 800b9c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9c8:	0719      	lsls	r1, r3, #28
 800b9ca:	d422      	bmi.n	800ba12 <__swsetup_r+0x62>
 800b9cc:	06da      	lsls	r2, r3, #27
 800b9ce:	d407      	bmi.n	800b9e0 <__swsetup_r+0x30>
 800b9d0:	2209      	movs	r2, #9
 800b9d2:	602a      	str	r2, [r5, #0]
 800b9d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9d8:	81a3      	strh	r3, [r4, #12]
 800b9da:	f04f 30ff 	mov.w	r0, #4294967295
 800b9de:	e033      	b.n	800ba48 <__swsetup_r+0x98>
 800b9e0:	0758      	lsls	r0, r3, #29
 800b9e2:	d512      	bpl.n	800ba0a <__swsetup_r+0x5a>
 800b9e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b9e6:	b141      	cbz	r1, 800b9fa <__swsetup_r+0x4a>
 800b9e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b9ec:	4299      	cmp	r1, r3
 800b9ee:	d002      	beq.n	800b9f6 <__swsetup_r+0x46>
 800b9f0:	4628      	mov	r0, r5
 800b9f2:	f000 f959 	bl	800bca8 <_free_r>
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b9fa:	89a3      	ldrh	r3, [r4, #12]
 800b9fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ba00:	81a3      	strh	r3, [r4, #12]
 800ba02:	2300      	movs	r3, #0
 800ba04:	6063      	str	r3, [r4, #4]
 800ba06:	6923      	ldr	r3, [r4, #16]
 800ba08:	6023      	str	r3, [r4, #0]
 800ba0a:	89a3      	ldrh	r3, [r4, #12]
 800ba0c:	f043 0308 	orr.w	r3, r3, #8
 800ba10:	81a3      	strh	r3, [r4, #12]
 800ba12:	6923      	ldr	r3, [r4, #16]
 800ba14:	b94b      	cbnz	r3, 800ba2a <__swsetup_r+0x7a>
 800ba16:	89a3      	ldrh	r3, [r4, #12]
 800ba18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ba1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba20:	d003      	beq.n	800ba2a <__swsetup_r+0x7a>
 800ba22:	4621      	mov	r1, r4
 800ba24:	4628      	mov	r0, r5
 800ba26:	f000 ff4b 	bl	800c8c0 <__smakebuf_r>
 800ba2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba2e:	f013 0201 	ands.w	r2, r3, #1
 800ba32:	d00a      	beq.n	800ba4a <__swsetup_r+0x9a>
 800ba34:	2200      	movs	r2, #0
 800ba36:	60a2      	str	r2, [r4, #8]
 800ba38:	6962      	ldr	r2, [r4, #20]
 800ba3a:	4252      	negs	r2, r2
 800ba3c:	61a2      	str	r2, [r4, #24]
 800ba3e:	6922      	ldr	r2, [r4, #16]
 800ba40:	b942      	cbnz	r2, 800ba54 <__swsetup_r+0xa4>
 800ba42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ba46:	d1c5      	bne.n	800b9d4 <__swsetup_r+0x24>
 800ba48:	bd38      	pop	{r3, r4, r5, pc}
 800ba4a:	0799      	lsls	r1, r3, #30
 800ba4c:	bf58      	it	pl
 800ba4e:	6962      	ldrpl	r2, [r4, #20]
 800ba50:	60a2      	str	r2, [r4, #8]
 800ba52:	e7f4      	b.n	800ba3e <__swsetup_r+0x8e>
 800ba54:	2000      	movs	r0, #0
 800ba56:	e7f7      	b.n	800ba48 <__swsetup_r+0x98>
 800ba58:	200000f0 	.word	0x200000f0

0800ba5c <memset>:
 800ba5c:	4402      	add	r2, r0
 800ba5e:	4603      	mov	r3, r0
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d100      	bne.n	800ba66 <memset+0xa>
 800ba64:	4770      	bx	lr
 800ba66:	f803 1b01 	strb.w	r1, [r3], #1
 800ba6a:	e7f9      	b.n	800ba60 <memset+0x4>

0800ba6c <strncmp>:
 800ba6c:	b510      	push	{r4, lr}
 800ba6e:	b16a      	cbz	r2, 800ba8c <strncmp+0x20>
 800ba70:	3901      	subs	r1, #1
 800ba72:	1884      	adds	r4, r0, r2
 800ba74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba78:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d103      	bne.n	800ba88 <strncmp+0x1c>
 800ba80:	42a0      	cmp	r0, r4
 800ba82:	d001      	beq.n	800ba88 <strncmp+0x1c>
 800ba84:	2a00      	cmp	r2, #0
 800ba86:	d1f5      	bne.n	800ba74 <strncmp+0x8>
 800ba88:	1ad0      	subs	r0, r2, r3
 800ba8a:	bd10      	pop	{r4, pc}
 800ba8c:	4610      	mov	r0, r2
 800ba8e:	e7fc      	b.n	800ba8a <strncmp+0x1e>

0800ba90 <strrchr>:
 800ba90:	b538      	push	{r3, r4, r5, lr}
 800ba92:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 800ba96:	4603      	mov	r3, r0
 800ba98:	d10e      	bne.n	800bab8 <strrchr+0x28>
 800ba9a:	4621      	mov	r1, r4
 800ba9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800baa0:	f000 bf98 	b.w	800c9d4 <strchr>
 800baa4:	1c43      	adds	r3, r0, #1
 800baa6:	4605      	mov	r5, r0
 800baa8:	4621      	mov	r1, r4
 800baaa:	4618      	mov	r0, r3
 800baac:	f000 ff92 	bl	800c9d4 <strchr>
 800bab0:	2800      	cmp	r0, #0
 800bab2:	d1f7      	bne.n	800baa4 <strrchr+0x14>
 800bab4:	4628      	mov	r0, r5
 800bab6:	bd38      	pop	{r3, r4, r5, pc}
 800bab8:	2500      	movs	r5, #0
 800baba:	e7f5      	b.n	800baa8 <strrchr+0x18>

0800babc <strtok>:
 800babc:	4b16      	ldr	r3, [pc, #88]	@ (800bb18 <strtok+0x5c>)
 800babe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bac2:	681f      	ldr	r7, [r3, #0]
 800bac4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800bac6:	4605      	mov	r5, r0
 800bac8:	460e      	mov	r6, r1
 800baca:	b9ec      	cbnz	r4, 800bb08 <strtok+0x4c>
 800bacc:	2050      	movs	r0, #80	@ 0x50
 800bace:	f000 f935 	bl	800bd3c <malloc>
 800bad2:	4602      	mov	r2, r0
 800bad4:	6478      	str	r0, [r7, #68]	@ 0x44
 800bad6:	b920      	cbnz	r0, 800bae2 <strtok+0x26>
 800bad8:	4b10      	ldr	r3, [pc, #64]	@ (800bb1c <strtok+0x60>)
 800bada:	4811      	ldr	r0, [pc, #68]	@ (800bb20 <strtok+0x64>)
 800badc:	215b      	movs	r1, #91	@ 0x5b
 800bade:	f000 f8c5 	bl	800bc6c <__assert_func>
 800bae2:	e9c0 4400 	strd	r4, r4, [r0]
 800bae6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800baea:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800baee:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800baf2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800baf6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800bafa:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800bafe:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800bb02:	6184      	str	r4, [r0, #24]
 800bb04:	7704      	strb	r4, [r0, #28]
 800bb06:	6244      	str	r4, [r0, #36]	@ 0x24
 800bb08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bb0a:	4631      	mov	r1, r6
 800bb0c:	4628      	mov	r0, r5
 800bb0e:	2301      	movs	r3, #1
 800bb10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb14:	f000 b806 	b.w	800bb24 <__strtok_r>
 800bb18:	200000f0 	.word	0x200000f0
 800bb1c:	0800dc95 	.word	0x0800dc95
 800bb20:	0800dcac 	.word	0x0800dcac

0800bb24 <__strtok_r>:
 800bb24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb26:	4604      	mov	r4, r0
 800bb28:	b908      	cbnz	r0, 800bb2e <__strtok_r+0xa>
 800bb2a:	6814      	ldr	r4, [r2, #0]
 800bb2c:	b144      	cbz	r4, 800bb40 <__strtok_r+0x1c>
 800bb2e:	4620      	mov	r0, r4
 800bb30:	f814 5b01 	ldrb.w	r5, [r4], #1
 800bb34:	460f      	mov	r7, r1
 800bb36:	f817 6b01 	ldrb.w	r6, [r7], #1
 800bb3a:	b91e      	cbnz	r6, 800bb44 <__strtok_r+0x20>
 800bb3c:	b965      	cbnz	r5, 800bb58 <__strtok_r+0x34>
 800bb3e:	6015      	str	r5, [r2, #0]
 800bb40:	2000      	movs	r0, #0
 800bb42:	e005      	b.n	800bb50 <__strtok_r+0x2c>
 800bb44:	42b5      	cmp	r5, r6
 800bb46:	d1f6      	bne.n	800bb36 <__strtok_r+0x12>
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d1f0      	bne.n	800bb2e <__strtok_r+0xa>
 800bb4c:	6014      	str	r4, [r2, #0]
 800bb4e:	7003      	strb	r3, [r0, #0]
 800bb50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb52:	461c      	mov	r4, r3
 800bb54:	e00c      	b.n	800bb70 <__strtok_r+0x4c>
 800bb56:	b915      	cbnz	r5, 800bb5e <__strtok_r+0x3a>
 800bb58:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bb5c:	460e      	mov	r6, r1
 800bb5e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800bb62:	42ab      	cmp	r3, r5
 800bb64:	d1f7      	bne.n	800bb56 <__strtok_r+0x32>
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d0f3      	beq.n	800bb52 <__strtok_r+0x2e>
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800bb70:	6014      	str	r4, [r2, #0]
 800bb72:	e7ed      	b.n	800bb50 <__strtok_r+0x2c>

0800bb74 <_close_r>:
 800bb74:	b538      	push	{r3, r4, r5, lr}
 800bb76:	4d06      	ldr	r5, [pc, #24]	@ (800bb90 <_close_r+0x1c>)
 800bb78:	2300      	movs	r3, #0
 800bb7a:	4604      	mov	r4, r0
 800bb7c:	4608      	mov	r0, r1
 800bb7e:	602b      	str	r3, [r5, #0]
 800bb80:	f7f5 f91b 	bl	8000dba <_close>
 800bb84:	1c43      	adds	r3, r0, #1
 800bb86:	d102      	bne.n	800bb8e <_close_r+0x1a>
 800bb88:	682b      	ldr	r3, [r5, #0]
 800bb8a:	b103      	cbz	r3, 800bb8e <_close_r+0x1a>
 800bb8c:	6023      	str	r3, [r4, #0]
 800bb8e:	bd38      	pop	{r3, r4, r5, pc}
 800bb90:	20002a20 	.word	0x20002a20

0800bb94 <_lseek_r>:
 800bb94:	b538      	push	{r3, r4, r5, lr}
 800bb96:	4d07      	ldr	r5, [pc, #28]	@ (800bbb4 <_lseek_r+0x20>)
 800bb98:	4604      	mov	r4, r0
 800bb9a:	4608      	mov	r0, r1
 800bb9c:	4611      	mov	r1, r2
 800bb9e:	2200      	movs	r2, #0
 800bba0:	602a      	str	r2, [r5, #0]
 800bba2:	461a      	mov	r2, r3
 800bba4:	f7f5 f930 	bl	8000e08 <_lseek>
 800bba8:	1c43      	adds	r3, r0, #1
 800bbaa:	d102      	bne.n	800bbb2 <_lseek_r+0x1e>
 800bbac:	682b      	ldr	r3, [r5, #0]
 800bbae:	b103      	cbz	r3, 800bbb2 <_lseek_r+0x1e>
 800bbb0:	6023      	str	r3, [r4, #0]
 800bbb2:	bd38      	pop	{r3, r4, r5, pc}
 800bbb4:	20002a20 	.word	0x20002a20

0800bbb8 <_read_r>:
 800bbb8:	b538      	push	{r3, r4, r5, lr}
 800bbba:	4d07      	ldr	r5, [pc, #28]	@ (800bbd8 <_read_r+0x20>)
 800bbbc:	4604      	mov	r4, r0
 800bbbe:	4608      	mov	r0, r1
 800bbc0:	4611      	mov	r1, r2
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	602a      	str	r2, [r5, #0]
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	f7f5 f8be 	bl	8000d48 <_read>
 800bbcc:	1c43      	adds	r3, r0, #1
 800bbce:	d102      	bne.n	800bbd6 <_read_r+0x1e>
 800bbd0:	682b      	ldr	r3, [r5, #0]
 800bbd2:	b103      	cbz	r3, 800bbd6 <_read_r+0x1e>
 800bbd4:	6023      	str	r3, [r4, #0]
 800bbd6:	bd38      	pop	{r3, r4, r5, pc}
 800bbd8:	20002a20 	.word	0x20002a20

0800bbdc <_write_r>:
 800bbdc:	b538      	push	{r3, r4, r5, lr}
 800bbde:	4d07      	ldr	r5, [pc, #28]	@ (800bbfc <_write_r+0x20>)
 800bbe0:	4604      	mov	r4, r0
 800bbe2:	4608      	mov	r0, r1
 800bbe4:	4611      	mov	r1, r2
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	602a      	str	r2, [r5, #0]
 800bbea:	461a      	mov	r2, r3
 800bbec:	f7f5 f8c9 	bl	8000d82 <_write>
 800bbf0:	1c43      	adds	r3, r0, #1
 800bbf2:	d102      	bne.n	800bbfa <_write_r+0x1e>
 800bbf4:	682b      	ldr	r3, [r5, #0]
 800bbf6:	b103      	cbz	r3, 800bbfa <_write_r+0x1e>
 800bbf8:	6023      	str	r3, [r4, #0]
 800bbfa:	bd38      	pop	{r3, r4, r5, pc}
 800bbfc:	20002a20 	.word	0x20002a20

0800bc00 <__errno>:
 800bc00:	4b01      	ldr	r3, [pc, #4]	@ (800bc08 <__errno+0x8>)
 800bc02:	6818      	ldr	r0, [r3, #0]
 800bc04:	4770      	bx	lr
 800bc06:	bf00      	nop
 800bc08:	200000f0 	.word	0x200000f0

0800bc0c <__libc_init_array>:
 800bc0c:	b570      	push	{r4, r5, r6, lr}
 800bc0e:	4d0d      	ldr	r5, [pc, #52]	@ (800bc44 <__libc_init_array+0x38>)
 800bc10:	4c0d      	ldr	r4, [pc, #52]	@ (800bc48 <__libc_init_array+0x3c>)
 800bc12:	1b64      	subs	r4, r4, r5
 800bc14:	10a4      	asrs	r4, r4, #2
 800bc16:	2600      	movs	r6, #0
 800bc18:	42a6      	cmp	r6, r4
 800bc1a:	d109      	bne.n	800bc30 <__libc_init_array+0x24>
 800bc1c:	4d0b      	ldr	r5, [pc, #44]	@ (800bc4c <__libc_init_array+0x40>)
 800bc1e:	4c0c      	ldr	r4, [pc, #48]	@ (800bc50 <__libc_init_array+0x44>)
 800bc20:	f000 ffa8 	bl	800cb74 <_init>
 800bc24:	1b64      	subs	r4, r4, r5
 800bc26:	10a4      	asrs	r4, r4, #2
 800bc28:	2600      	movs	r6, #0
 800bc2a:	42a6      	cmp	r6, r4
 800bc2c:	d105      	bne.n	800bc3a <__libc_init_array+0x2e>
 800bc2e:	bd70      	pop	{r4, r5, r6, pc}
 800bc30:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc34:	4798      	blx	r3
 800bc36:	3601      	adds	r6, #1
 800bc38:	e7ee      	b.n	800bc18 <__libc_init_array+0xc>
 800bc3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc3e:	4798      	blx	r3
 800bc40:	3601      	adds	r6, #1
 800bc42:	e7f2      	b.n	800bc2a <__libc_init_array+0x1e>
 800bc44:	0800dd80 	.word	0x0800dd80
 800bc48:	0800dd80 	.word	0x0800dd80
 800bc4c:	0800dd80 	.word	0x0800dd80
 800bc50:	0800dd84 	.word	0x0800dd84

0800bc54 <__retarget_lock_init_recursive>:
 800bc54:	4770      	bx	lr

0800bc56 <__retarget_lock_acquire_recursive>:
 800bc56:	4770      	bx	lr

0800bc58 <__retarget_lock_release_recursive>:
 800bc58:	4770      	bx	lr

0800bc5a <strcpy>:
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc60:	f803 2b01 	strb.w	r2, [r3], #1
 800bc64:	2a00      	cmp	r2, #0
 800bc66:	d1f9      	bne.n	800bc5c <strcpy+0x2>
 800bc68:	4770      	bx	lr
	...

0800bc6c <__assert_func>:
 800bc6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc6e:	4614      	mov	r4, r2
 800bc70:	461a      	mov	r2, r3
 800bc72:	4b09      	ldr	r3, [pc, #36]	@ (800bc98 <__assert_func+0x2c>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	4605      	mov	r5, r0
 800bc78:	68d8      	ldr	r0, [r3, #12]
 800bc7a:	b954      	cbnz	r4, 800bc92 <__assert_func+0x26>
 800bc7c:	4b07      	ldr	r3, [pc, #28]	@ (800bc9c <__assert_func+0x30>)
 800bc7e:	461c      	mov	r4, r3
 800bc80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc84:	9100      	str	r1, [sp, #0]
 800bc86:	462b      	mov	r3, r5
 800bc88:	4905      	ldr	r1, [pc, #20]	@ (800bca0 <__assert_func+0x34>)
 800bc8a:	f000 fde1 	bl	800c850 <fiprintf>
 800bc8e:	f000 feef 	bl	800ca70 <abort>
 800bc92:	4b04      	ldr	r3, [pc, #16]	@ (800bca4 <__assert_func+0x38>)
 800bc94:	e7f4      	b.n	800bc80 <__assert_func+0x14>
 800bc96:	bf00      	nop
 800bc98:	200000f0 	.word	0x200000f0
 800bc9c:	0800dd41 	.word	0x0800dd41
 800bca0:	0800dd13 	.word	0x0800dd13
 800bca4:	0800dd06 	.word	0x0800dd06

0800bca8 <_free_r>:
 800bca8:	b538      	push	{r3, r4, r5, lr}
 800bcaa:	4605      	mov	r5, r0
 800bcac:	2900      	cmp	r1, #0
 800bcae:	d041      	beq.n	800bd34 <_free_r+0x8c>
 800bcb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcb4:	1f0c      	subs	r4, r1, #4
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	bfb8      	it	lt
 800bcba:	18e4      	addlt	r4, r4, r3
 800bcbc:	f000 f8e8 	bl	800be90 <__malloc_lock>
 800bcc0:	4a1d      	ldr	r2, [pc, #116]	@ (800bd38 <_free_r+0x90>)
 800bcc2:	6813      	ldr	r3, [r2, #0]
 800bcc4:	b933      	cbnz	r3, 800bcd4 <_free_r+0x2c>
 800bcc6:	6063      	str	r3, [r4, #4]
 800bcc8:	6014      	str	r4, [r2, #0]
 800bcca:	4628      	mov	r0, r5
 800bccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcd0:	f000 b8e4 	b.w	800be9c <__malloc_unlock>
 800bcd4:	42a3      	cmp	r3, r4
 800bcd6:	d908      	bls.n	800bcea <_free_r+0x42>
 800bcd8:	6820      	ldr	r0, [r4, #0]
 800bcda:	1821      	adds	r1, r4, r0
 800bcdc:	428b      	cmp	r3, r1
 800bcde:	bf01      	itttt	eq
 800bce0:	6819      	ldreq	r1, [r3, #0]
 800bce2:	685b      	ldreq	r3, [r3, #4]
 800bce4:	1809      	addeq	r1, r1, r0
 800bce6:	6021      	streq	r1, [r4, #0]
 800bce8:	e7ed      	b.n	800bcc6 <_free_r+0x1e>
 800bcea:	461a      	mov	r2, r3
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	b10b      	cbz	r3, 800bcf4 <_free_r+0x4c>
 800bcf0:	42a3      	cmp	r3, r4
 800bcf2:	d9fa      	bls.n	800bcea <_free_r+0x42>
 800bcf4:	6811      	ldr	r1, [r2, #0]
 800bcf6:	1850      	adds	r0, r2, r1
 800bcf8:	42a0      	cmp	r0, r4
 800bcfa:	d10b      	bne.n	800bd14 <_free_r+0x6c>
 800bcfc:	6820      	ldr	r0, [r4, #0]
 800bcfe:	4401      	add	r1, r0
 800bd00:	1850      	adds	r0, r2, r1
 800bd02:	4283      	cmp	r3, r0
 800bd04:	6011      	str	r1, [r2, #0]
 800bd06:	d1e0      	bne.n	800bcca <_free_r+0x22>
 800bd08:	6818      	ldr	r0, [r3, #0]
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	6053      	str	r3, [r2, #4]
 800bd0e:	4408      	add	r0, r1
 800bd10:	6010      	str	r0, [r2, #0]
 800bd12:	e7da      	b.n	800bcca <_free_r+0x22>
 800bd14:	d902      	bls.n	800bd1c <_free_r+0x74>
 800bd16:	230c      	movs	r3, #12
 800bd18:	602b      	str	r3, [r5, #0]
 800bd1a:	e7d6      	b.n	800bcca <_free_r+0x22>
 800bd1c:	6820      	ldr	r0, [r4, #0]
 800bd1e:	1821      	adds	r1, r4, r0
 800bd20:	428b      	cmp	r3, r1
 800bd22:	bf04      	itt	eq
 800bd24:	6819      	ldreq	r1, [r3, #0]
 800bd26:	685b      	ldreq	r3, [r3, #4]
 800bd28:	6063      	str	r3, [r4, #4]
 800bd2a:	bf04      	itt	eq
 800bd2c:	1809      	addeq	r1, r1, r0
 800bd2e:	6021      	streq	r1, [r4, #0]
 800bd30:	6054      	str	r4, [r2, #4]
 800bd32:	e7ca      	b.n	800bcca <_free_r+0x22>
 800bd34:	bd38      	pop	{r3, r4, r5, pc}
 800bd36:	bf00      	nop
 800bd38:	20002a2c 	.word	0x20002a2c

0800bd3c <malloc>:
 800bd3c:	4b02      	ldr	r3, [pc, #8]	@ (800bd48 <malloc+0xc>)
 800bd3e:	4601      	mov	r1, r0
 800bd40:	6818      	ldr	r0, [r3, #0]
 800bd42:	f000 b825 	b.w	800bd90 <_malloc_r>
 800bd46:	bf00      	nop
 800bd48:	200000f0 	.word	0x200000f0

0800bd4c <sbrk_aligned>:
 800bd4c:	b570      	push	{r4, r5, r6, lr}
 800bd4e:	4e0f      	ldr	r6, [pc, #60]	@ (800bd8c <sbrk_aligned+0x40>)
 800bd50:	460c      	mov	r4, r1
 800bd52:	6831      	ldr	r1, [r6, #0]
 800bd54:	4605      	mov	r5, r0
 800bd56:	b911      	cbnz	r1, 800bd5e <sbrk_aligned+0x12>
 800bd58:	f000 fe6c 	bl	800ca34 <_sbrk_r>
 800bd5c:	6030      	str	r0, [r6, #0]
 800bd5e:	4621      	mov	r1, r4
 800bd60:	4628      	mov	r0, r5
 800bd62:	f000 fe67 	bl	800ca34 <_sbrk_r>
 800bd66:	1c43      	adds	r3, r0, #1
 800bd68:	d103      	bne.n	800bd72 <sbrk_aligned+0x26>
 800bd6a:	f04f 34ff 	mov.w	r4, #4294967295
 800bd6e:	4620      	mov	r0, r4
 800bd70:	bd70      	pop	{r4, r5, r6, pc}
 800bd72:	1cc4      	adds	r4, r0, #3
 800bd74:	f024 0403 	bic.w	r4, r4, #3
 800bd78:	42a0      	cmp	r0, r4
 800bd7a:	d0f8      	beq.n	800bd6e <sbrk_aligned+0x22>
 800bd7c:	1a21      	subs	r1, r4, r0
 800bd7e:	4628      	mov	r0, r5
 800bd80:	f000 fe58 	bl	800ca34 <_sbrk_r>
 800bd84:	3001      	adds	r0, #1
 800bd86:	d1f2      	bne.n	800bd6e <sbrk_aligned+0x22>
 800bd88:	e7ef      	b.n	800bd6a <sbrk_aligned+0x1e>
 800bd8a:	bf00      	nop
 800bd8c:	20002a28 	.word	0x20002a28

0800bd90 <_malloc_r>:
 800bd90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd94:	1ccd      	adds	r5, r1, #3
 800bd96:	f025 0503 	bic.w	r5, r5, #3
 800bd9a:	3508      	adds	r5, #8
 800bd9c:	2d0c      	cmp	r5, #12
 800bd9e:	bf38      	it	cc
 800bda0:	250c      	movcc	r5, #12
 800bda2:	2d00      	cmp	r5, #0
 800bda4:	4606      	mov	r6, r0
 800bda6:	db01      	blt.n	800bdac <_malloc_r+0x1c>
 800bda8:	42a9      	cmp	r1, r5
 800bdaa:	d904      	bls.n	800bdb6 <_malloc_r+0x26>
 800bdac:	230c      	movs	r3, #12
 800bdae:	6033      	str	r3, [r6, #0]
 800bdb0:	2000      	movs	r0, #0
 800bdb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800be8c <_malloc_r+0xfc>
 800bdba:	f000 f869 	bl	800be90 <__malloc_lock>
 800bdbe:	f8d8 3000 	ldr.w	r3, [r8]
 800bdc2:	461c      	mov	r4, r3
 800bdc4:	bb44      	cbnz	r4, 800be18 <_malloc_r+0x88>
 800bdc6:	4629      	mov	r1, r5
 800bdc8:	4630      	mov	r0, r6
 800bdca:	f7ff ffbf 	bl	800bd4c <sbrk_aligned>
 800bdce:	1c43      	adds	r3, r0, #1
 800bdd0:	4604      	mov	r4, r0
 800bdd2:	d158      	bne.n	800be86 <_malloc_r+0xf6>
 800bdd4:	f8d8 4000 	ldr.w	r4, [r8]
 800bdd8:	4627      	mov	r7, r4
 800bdda:	2f00      	cmp	r7, #0
 800bddc:	d143      	bne.n	800be66 <_malloc_r+0xd6>
 800bdde:	2c00      	cmp	r4, #0
 800bde0:	d04b      	beq.n	800be7a <_malloc_r+0xea>
 800bde2:	6823      	ldr	r3, [r4, #0]
 800bde4:	4639      	mov	r1, r7
 800bde6:	4630      	mov	r0, r6
 800bde8:	eb04 0903 	add.w	r9, r4, r3
 800bdec:	f000 fe22 	bl	800ca34 <_sbrk_r>
 800bdf0:	4581      	cmp	r9, r0
 800bdf2:	d142      	bne.n	800be7a <_malloc_r+0xea>
 800bdf4:	6821      	ldr	r1, [r4, #0]
 800bdf6:	1a6d      	subs	r5, r5, r1
 800bdf8:	4629      	mov	r1, r5
 800bdfa:	4630      	mov	r0, r6
 800bdfc:	f7ff ffa6 	bl	800bd4c <sbrk_aligned>
 800be00:	3001      	adds	r0, #1
 800be02:	d03a      	beq.n	800be7a <_malloc_r+0xea>
 800be04:	6823      	ldr	r3, [r4, #0]
 800be06:	442b      	add	r3, r5
 800be08:	6023      	str	r3, [r4, #0]
 800be0a:	f8d8 3000 	ldr.w	r3, [r8]
 800be0e:	685a      	ldr	r2, [r3, #4]
 800be10:	bb62      	cbnz	r2, 800be6c <_malloc_r+0xdc>
 800be12:	f8c8 7000 	str.w	r7, [r8]
 800be16:	e00f      	b.n	800be38 <_malloc_r+0xa8>
 800be18:	6822      	ldr	r2, [r4, #0]
 800be1a:	1b52      	subs	r2, r2, r5
 800be1c:	d420      	bmi.n	800be60 <_malloc_r+0xd0>
 800be1e:	2a0b      	cmp	r2, #11
 800be20:	d917      	bls.n	800be52 <_malloc_r+0xc2>
 800be22:	1961      	adds	r1, r4, r5
 800be24:	42a3      	cmp	r3, r4
 800be26:	6025      	str	r5, [r4, #0]
 800be28:	bf18      	it	ne
 800be2a:	6059      	strne	r1, [r3, #4]
 800be2c:	6863      	ldr	r3, [r4, #4]
 800be2e:	bf08      	it	eq
 800be30:	f8c8 1000 	streq.w	r1, [r8]
 800be34:	5162      	str	r2, [r4, r5]
 800be36:	604b      	str	r3, [r1, #4]
 800be38:	4630      	mov	r0, r6
 800be3a:	f000 f82f 	bl	800be9c <__malloc_unlock>
 800be3e:	f104 000b 	add.w	r0, r4, #11
 800be42:	1d23      	adds	r3, r4, #4
 800be44:	f020 0007 	bic.w	r0, r0, #7
 800be48:	1ac2      	subs	r2, r0, r3
 800be4a:	bf1c      	itt	ne
 800be4c:	1a1b      	subne	r3, r3, r0
 800be4e:	50a3      	strne	r3, [r4, r2]
 800be50:	e7af      	b.n	800bdb2 <_malloc_r+0x22>
 800be52:	6862      	ldr	r2, [r4, #4]
 800be54:	42a3      	cmp	r3, r4
 800be56:	bf0c      	ite	eq
 800be58:	f8c8 2000 	streq.w	r2, [r8]
 800be5c:	605a      	strne	r2, [r3, #4]
 800be5e:	e7eb      	b.n	800be38 <_malloc_r+0xa8>
 800be60:	4623      	mov	r3, r4
 800be62:	6864      	ldr	r4, [r4, #4]
 800be64:	e7ae      	b.n	800bdc4 <_malloc_r+0x34>
 800be66:	463c      	mov	r4, r7
 800be68:	687f      	ldr	r7, [r7, #4]
 800be6a:	e7b6      	b.n	800bdda <_malloc_r+0x4a>
 800be6c:	461a      	mov	r2, r3
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	42a3      	cmp	r3, r4
 800be72:	d1fb      	bne.n	800be6c <_malloc_r+0xdc>
 800be74:	2300      	movs	r3, #0
 800be76:	6053      	str	r3, [r2, #4]
 800be78:	e7de      	b.n	800be38 <_malloc_r+0xa8>
 800be7a:	230c      	movs	r3, #12
 800be7c:	6033      	str	r3, [r6, #0]
 800be7e:	4630      	mov	r0, r6
 800be80:	f000 f80c 	bl	800be9c <__malloc_unlock>
 800be84:	e794      	b.n	800bdb0 <_malloc_r+0x20>
 800be86:	6005      	str	r5, [r0, #0]
 800be88:	e7d6      	b.n	800be38 <_malloc_r+0xa8>
 800be8a:	bf00      	nop
 800be8c:	20002a2c 	.word	0x20002a2c

0800be90 <__malloc_lock>:
 800be90:	4801      	ldr	r0, [pc, #4]	@ (800be98 <__malloc_lock+0x8>)
 800be92:	f7ff bee0 	b.w	800bc56 <__retarget_lock_acquire_recursive>
 800be96:	bf00      	nop
 800be98:	20002a24 	.word	0x20002a24

0800be9c <__malloc_unlock>:
 800be9c:	4801      	ldr	r0, [pc, #4]	@ (800bea4 <__malloc_unlock+0x8>)
 800be9e:	f7ff bedb 	b.w	800bc58 <__retarget_lock_release_recursive>
 800bea2:	bf00      	nop
 800bea4:	20002a24 	.word	0x20002a24

0800bea8 <__ssputs_r>:
 800bea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800beac:	688e      	ldr	r6, [r1, #8]
 800beae:	461f      	mov	r7, r3
 800beb0:	42be      	cmp	r6, r7
 800beb2:	680b      	ldr	r3, [r1, #0]
 800beb4:	4682      	mov	sl, r0
 800beb6:	460c      	mov	r4, r1
 800beb8:	4690      	mov	r8, r2
 800beba:	d82d      	bhi.n	800bf18 <__ssputs_r+0x70>
 800bebc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bec0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bec4:	d026      	beq.n	800bf14 <__ssputs_r+0x6c>
 800bec6:	6965      	ldr	r5, [r4, #20]
 800bec8:	6909      	ldr	r1, [r1, #16]
 800beca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bece:	eba3 0901 	sub.w	r9, r3, r1
 800bed2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bed6:	1c7b      	adds	r3, r7, #1
 800bed8:	444b      	add	r3, r9
 800beda:	106d      	asrs	r5, r5, #1
 800bedc:	429d      	cmp	r5, r3
 800bede:	bf38      	it	cc
 800bee0:	461d      	movcc	r5, r3
 800bee2:	0553      	lsls	r3, r2, #21
 800bee4:	d527      	bpl.n	800bf36 <__ssputs_r+0x8e>
 800bee6:	4629      	mov	r1, r5
 800bee8:	f7ff ff52 	bl	800bd90 <_malloc_r>
 800beec:	4606      	mov	r6, r0
 800beee:	b360      	cbz	r0, 800bf4a <__ssputs_r+0xa2>
 800bef0:	6921      	ldr	r1, [r4, #16]
 800bef2:	464a      	mov	r2, r9
 800bef4:	f000 fdae 	bl	800ca54 <memcpy>
 800bef8:	89a3      	ldrh	r3, [r4, #12]
 800befa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800befe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf02:	81a3      	strh	r3, [r4, #12]
 800bf04:	6126      	str	r6, [r4, #16]
 800bf06:	6165      	str	r5, [r4, #20]
 800bf08:	444e      	add	r6, r9
 800bf0a:	eba5 0509 	sub.w	r5, r5, r9
 800bf0e:	6026      	str	r6, [r4, #0]
 800bf10:	60a5      	str	r5, [r4, #8]
 800bf12:	463e      	mov	r6, r7
 800bf14:	42be      	cmp	r6, r7
 800bf16:	d900      	bls.n	800bf1a <__ssputs_r+0x72>
 800bf18:	463e      	mov	r6, r7
 800bf1a:	6820      	ldr	r0, [r4, #0]
 800bf1c:	4632      	mov	r2, r6
 800bf1e:	4641      	mov	r1, r8
 800bf20:	f000 fd3e 	bl	800c9a0 <memmove>
 800bf24:	68a3      	ldr	r3, [r4, #8]
 800bf26:	1b9b      	subs	r3, r3, r6
 800bf28:	60a3      	str	r3, [r4, #8]
 800bf2a:	6823      	ldr	r3, [r4, #0]
 800bf2c:	4433      	add	r3, r6
 800bf2e:	6023      	str	r3, [r4, #0]
 800bf30:	2000      	movs	r0, #0
 800bf32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf36:	462a      	mov	r2, r5
 800bf38:	f000 fda1 	bl	800ca7e <_realloc_r>
 800bf3c:	4606      	mov	r6, r0
 800bf3e:	2800      	cmp	r0, #0
 800bf40:	d1e0      	bne.n	800bf04 <__ssputs_r+0x5c>
 800bf42:	6921      	ldr	r1, [r4, #16]
 800bf44:	4650      	mov	r0, sl
 800bf46:	f7ff feaf 	bl	800bca8 <_free_r>
 800bf4a:	230c      	movs	r3, #12
 800bf4c:	f8ca 3000 	str.w	r3, [sl]
 800bf50:	89a3      	ldrh	r3, [r4, #12]
 800bf52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf56:	81a3      	strh	r3, [r4, #12]
 800bf58:	f04f 30ff 	mov.w	r0, #4294967295
 800bf5c:	e7e9      	b.n	800bf32 <__ssputs_r+0x8a>
	...

0800bf60 <_svfiprintf_r>:
 800bf60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf64:	4698      	mov	r8, r3
 800bf66:	898b      	ldrh	r3, [r1, #12]
 800bf68:	061b      	lsls	r3, r3, #24
 800bf6a:	b09d      	sub	sp, #116	@ 0x74
 800bf6c:	4607      	mov	r7, r0
 800bf6e:	460d      	mov	r5, r1
 800bf70:	4614      	mov	r4, r2
 800bf72:	d510      	bpl.n	800bf96 <_svfiprintf_r+0x36>
 800bf74:	690b      	ldr	r3, [r1, #16]
 800bf76:	b973      	cbnz	r3, 800bf96 <_svfiprintf_r+0x36>
 800bf78:	2140      	movs	r1, #64	@ 0x40
 800bf7a:	f7ff ff09 	bl	800bd90 <_malloc_r>
 800bf7e:	6028      	str	r0, [r5, #0]
 800bf80:	6128      	str	r0, [r5, #16]
 800bf82:	b930      	cbnz	r0, 800bf92 <_svfiprintf_r+0x32>
 800bf84:	230c      	movs	r3, #12
 800bf86:	603b      	str	r3, [r7, #0]
 800bf88:	f04f 30ff 	mov.w	r0, #4294967295
 800bf8c:	b01d      	add	sp, #116	@ 0x74
 800bf8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf92:	2340      	movs	r3, #64	@ 0x40
 800bf94:	616b      	str	r3, [r5, #20]
 800bf96:	2300      	movs	r3, #0
 800bf98:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf9a:	2320      	movs	r3, #32
 800bf9c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bfa0:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfa4:	2330      	movs	r3, #48	@ 0x30
 800bfa6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c144 <_svfiprintf_r+0x1e4>
 800bfaa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bfae:	f04f 0901 	mov.w	r9, #1
 800bfb2:	4623      	mov	r3, r4
 800bfb4:	469a      	mov	sl, r3
 800bfb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfba:	b10a      	cbz	r2, 800bfc0 <_svfiprintf_r+0x60>
 800bfbc:	2a25      	cmp	r2, #37	@ 0x25
 800bfbe:	d1f9      	bne.n	800bfb4 <_svfiprintf_r+0x54>
 800bfc0:	ebba 0b04 	subs.w	fp, sl, r4
 800bfc4:	d00b      	beq.n	800bfde <_svfiprintf_r+0x7e>
 800bfc6:	465b      	mov	r3, fp
 800bfc8:	4622      	mov	r2, r4
 800bfca:	4629      	mov	r1, r5
 800bfcc:	4638      	mov	r0, r7
 800bfce:	f7ff ff6b 	bl	800bea8 <__ssputs_r>
 800bfd2:	3001      	adds	r0, #1
 800bfd4:	f000 80a7 	beq.w	800c126 <_svfiprintf_r+0x1c6>
 800bfd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bfda:	445a      	add	r2, fp
 800bfdc:	9209      	str	r2, [sp, #36]	@ 0x24
 800bfde:	f89a 3000 	ldrb.w	r3, [sl]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	f000 809f 	beq.w	800c126 <_svfiprintf_r+0x1c6>
 800bfe8:	2300      	movs	r3, #0
 800bfea:	f04f 32ff 	mov.w	r2, #4294967295
 800bfee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bff2:	f10a 0a01 	add.w	sl, sl, #1
 800bff6:	9304      	str	r3, [sp, #16]
 800bff8:	9307      	str	r3, [sp, #28]
 800bffa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bffe:	931a      	str	r3, [sp, #104]	@ 0x68
 800c000:	4654      	mov	r4, sl
 800c002:	2205      	movs	r2, #5
 800c004:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c008:	484e      	ldr	r0, [pc, #312]	@ (800c144 <_svfiprintf_r+0x1e4>)
 800c00a:	f7f4 f921 	bl	8000250 <memchr>
 800c00e:	9a04      	ldr	r2, [sp, #16]
 800c010:	b9d8      	cbnz	r0, 800c04a <_svfiprintf_r+0xea>
 800c012:	06d0      	lsls	r0, r2, #27
 800c014:	bf44      	itt	mi
 800c016:	2320      	movmi	r3, #32
 800c018:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c01c:	0711      	lsls	r1, r2, #28
 800c01e:	bf44      	itt	mi
 800c020:	232b      	movmi	r3, #43	@ 0x2b
 800c022:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c026:	f89a 3000 	ldrb.w	r3, [sl]
 800c02a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c02c:	d015      	beq.n	800c05a <_svfiprintf_r+0xfa>
 800c02e:	9a07      	ldr	r2, [sp, #28]
 800c030:	4654      	mov	r4, sl
 800c032:	2000      	movs	r0, #0
 800c034:	f04f 0c0a 	mov.w	ip, #10
 800c038:	4621      	mov	r1, r4
 800c03a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c03e:	3b30      	subs	r3, #48	@ 0x30
 800c040:	2b09      	cmp	r3, #9
 800c042:	d94b      	bls.n	800c0dc <_svfiprintf_r+0x17c>
 800c044:	b1b0      	cbz	r0, 800c074 <_svfiprintf_r+0x114>
 800c046:	9207      	str	r2, [sp, #28]
 800c048:	e014      	b.n	800c074 <_svfiprintf_r+0x114>
 800c04a:	eba0 0308 	sub.w	r3, r0, r8
 800c04e:	fa09 f303 	lsl.w	r3, r9, r3
 800c052:	4313      	orrs	r3, r2
 800c054:	9304      	str	r3, [sp, #16]
 800c056:	46a2      	mov	sl, r4
 800c058:	e7d2      	b.n	800c000 <_svfiprintf_r+0xa0>
 800c05a:	9b03      	ldr	r3, [sp, #12]
 800c05c:	1d19      	adds	r1, r3, #4
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	9103      	str	r1, [sp, #12]
 800c062:	2b00      	cmp	r3, #0
 800c064:	bfbb      	ittet	lt
 800c066:	425b      	neglt	r3, r3
 800c068:	f042 0202 	orrlt.w	r2, r2, #2
 800c06c:	9307      	strge	r3, [sp, #28]
 800c06e:	9307      	strlt	r3, [sp, #28]
 800c070:	bfb8      	it	lt
 800c072:	9204      	strlt	r2, [sp, #16]
 800c074:	7823      	ldrb	r3, [r4, #0]
 800c076:	2b2e      	cmp	r3, #46	@ 0x2e
 800c078:	d10a      	bne.n	800c090 <_svfiprintf_r+0x130>
 800c07a:	7863      	ldrb	r3, [r4, #1]
 800c07c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c07e:	d132      	bne.n	800c0e6 <_svfiprintf_r+0x186>
 800c080:	9b03      	ldr	r3, [sp, #12]
 800c082:	1d1a      	adds	r2, r3, #4
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	9203      	str	r2, [sp, #12]
 800c088:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c08c:	3402      	adds	r4, #2
 800c08e:	9305      	str	r3, [sp, #20]
 800c090:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c154 <_svfiprintf_r+0x1f4>
 800c094:	7821      	ldrb	r1, [r4, #0]
 800c096:	2203      	movs	r2, #3
 800c098:	4650      	mov	r0, sl
 800c09a:	f7f4 f8d9 	bl	8000250 <memchr>
 800c09e:	b138      	cbz	r0, 800c0b0 <_svfiprintf_r+0x150>
 800c0a0:	9b04      	ldr	r3, [sp, #16]
 800c0a2:	eba0 000a 	sub.w	r0, r0, sl
 800c0a6:	2240      	movs	r2, #64	@ 0x40
 800c0a8:	4082      	lsls	r2, r0
 800c0aa:	4313      	orrs	r3, r2
 800c0ac:	3401      	adds	r4, #1
 800c0ae:	9304      	str	r3, [sp, #16]
 800c0b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0b4:	4824      	ldr	r0, [pc, #144]	@ (800c148 <_svfiprintf_r+0x1e8>)
 800c0b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c0ba:	2206      	movs	r2, #6
 800c0bc:	f7f4 f8c8 	bl	8000250 <memchr>
 800c0c0:	2800      	cmp	r0, #0
 800c0c2:	d036      	beq.n	800c132 <_svfiprintf_r+0x1d2>
 800c0c4:	4b21      	ldr	r3, [pc, #132]	@ (800c14c <_svfiprintf_r+0x1ec>)
 800c0c6:	bb1b      	cbnz	r3, 800c110 <_svfiprintf_r+0x1b0>
 800c0c8:	9b03      	ldr	r3, [sp, #12]
 800c0ca:	3307      	adds	r3, #7
 800c0cc:	f023 0307 	bic.w	r3, r3, #7
 800c0d0:	3308      	adds	r3, #8
 800c0d2:	9303      	str	r3, [sp, #12]
 800c0d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0d6:	4433      	add	r3, r6
 800c0d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0da:	e76a      	b.n	800bfb2 <_svfiprintf_r+0x52>
 800c0dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0e0:	460c      	mov	r4, r1
 800c0e2:	2001      	movs	r0, #1
 800c0e4:	e7a8      	b.n	800c038 <_svfiprintf_r+0xd8>
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	3401      	adds	r4, #1
 800c0ea:	9305      	str	r3, [sp, #20]
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	f04f 0c0a 	mov.w	ip, #10
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0f8:	3a30      	subs	r2, #48	@ 0x30
 800c0fa:	2a09      	cmp	r2, #9
 800c0fc:	d903      	bls.n	800c106 <_svfiprintf_r+0x1a6>
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d0c6      	beq.n	800c090 <_svfiprintf_r+0x130>
 800c102:	9105      	str	r1, [sp, #20]
 800c104:	e7c4      	b.n	800c090 <_svfiprintf_r+0x130>
 800c106:	fb0c 2101 	mla	r1, ip, r1, r2
 800c10a:	4604      	mov	r4, r0
 800c10c:	2301      	movs	r3, #1
 800c10e:	e7f0      	b.n	800c0f2 <_svfiprintf_r+0x192>
 800c110:	ab03      	add	r3, sp, #12
 800c112:	9300      	str	r3, [sp, #0]
 800c114:	462a      	mov	r2, r5
 800c116:	4b0e      	ldr	r3, [pc, #56]	@ (800c150 <_svfiprintf_r+0x1f0>)
 800c118:	a904      	add	r1, sp, #16
 800c11a:	4638      	mov	r0, r7
 800c11c:	f3af 8000 	nop.w
 800c120:	1c42      	adds	r2, r0, #1
 800c122:	4606      	mov	r6, r0
 800c124:	d1d6      	bne.n	800c0d4 <_svfiprintf_r+0x174>
 800c126:	89ab      	ldrh	r3, [r5, #12]
 800c128:	065b      	lsls	r3, r3, #25
 800c12a:	f53f af2d 	bmi.w	800bf88 <_svfiprintf_r+0x28>
 800c12e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c130:	e72c      	b.n	800bf8c <_svfiprintf_r+0x2c>
 800c132:	ab03      	add	r3, sp, #12
 800c134:	9300      	str	r3, [sp, #0]
 800c136:	462a      	mov	r2, r5
 800c138:	4b05      	ldr	r3, [pc, #20]	@ (800c150 <_svfiprintf_r+0x1f0>)
 800c13a:	a904      	add	r1, sp, #16
 800c13c:	4638      	mov	r0, r7
 800c13e:	f000 f9bb 	bl	800c4b8 <_printf_i>
 800c142:	e7ed      	b.n	800c120 <_svfiprintf_r+0x1c0>
 800c144:	0800dd42 	.word	0x0800dd42
 800c148:	0800dd4c 	.word	0x0800dd4c
 800c14c:	00000000 	.word	0x00000000
 800c150:	0800bea9 	.word	0x0800bea9
 800c154:	0800dd48 	.word	0x0800dd48

0800c158 <__sfputc_r>:
 800c158:	6893      	ldr	r3, [r2, #8]
 800c15a:	3b01      	subs	r3, #1
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	b410      	push	{r4}
 800c160:	6093      	str	r3, [r2, #8]
 800c162:	da08      	bge.n	800c176 <__sfputc_r+0x1e>
 800c164:	6994      	ldr	r4, [r2, #24]
 800c166:	42a3      	cmp	r3, r4
 800c168:	db01      	blt.n	800c16e <__sfputc_r+0x16>
 800c16a:	290a      	cmp	r1, #10
 800c16c:	d103      	bne.n	800c176 <__sfputc_r+0x1e>
 800c16e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c172:	f7ff bbde 	b.w	800b932 <__swbuf_r>
 800c176:	6813      	ldr	r3, [r2, #0]
 800c178:	1c58      	adds	r0, r3, #1
 800c17a:	6010      	str	r0, [r2, #0]
 800c17c:	7019      	strb	r1, [r3, #0]
 800c17e:	4608      	mov	r0, r1
 800c180:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c184:	4770      	bx	lr

0800c186 <__sfputs_r>:
 800c186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c188:	4606      	mov	r6, r0
 800c18a:	460f      	mov	r7, r1
 800c18c:	4614      	mov	r4, r2
 800c18e:	18d5      	adds	r5, r2, r3
 800c190:	42ac      	cmp	r4, r5
 800c192:	d101      	bne.n	800c198 <__sfputs_r+0x12>
 800c194:	2000      	movs	r0, #0
 800c196:	e007      	b.n	800c1a8 <__sfputs_r+0x22>
 800c198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c19c:	463a      	mov	r2, r7
 800c19e:	4630      	mov	r0, r6
 800c1a0:	f7ff ffda 	bl	800c158 <__sfputc_r>
 800c1a4:	1c43      	adds	r3, r0, #1
 800c1a6:	d1f3      	bne.n	800c190 <__sfputs_r+0xa>
 800c1a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c1ac <_vfiprintf_r>:
 800c1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b0:	460d      	mov	r5, r1
 800c1b2:	b09d      	sub	sp, #116	@ 0x74
 800c1b4:	4614      	mov	r4, r2
 800c1b6:	4698      	mov	r8, r3
 800c1b8:	4606      	mov	r6, r0
 800c1ba:	b118      	cbz	r0, 800c1c4 <_vfiprintf_r+0x18>
 800c1bc:	6a03      	ldr	r3, [r0, #32]
 800c1be:	b90b      	cbnz	r3, 800c1c4 <_vfiprintf_r+0x18>
 800c1c0:	f7ff faa6 	bl	800b710 <__sinit>
 800c1c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c1c6:	07d9      	lsls	r1, r3, #31
 800c1c8:	d405      	bmi.n	800c1d6 <_vfiprintf_r+0x2a>
 800c1ca:	89ab      	ldrh	r3, [r5, #12]
 800c1cc:	059a      	lsls	r2, r3, #22
 800c1ce:	d402      	bmi.n	800c1d6 <_vfiprintf_r+0x2a>
 800c1d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c1d2:	f7ff fd40 	bl	800bc56 <__retarget_lock_acquire_recursive>
 800c1d6:	89ab      	ldrh	r3, [r5, #12]
 800c1d8:	071b      	lsls	r3, r3, #28
 800c1da:	d501      	bpl.n	800c1e0 <_vfiprintf_r+0x34>
 800c1dc:	692b      	ldr	r3, [r5, #16]
 800c1de:	b99b      	cbnz	r3, 800c208 <_vfiprintf_r+0x5c>
 800c1e0:	4629      	mov	r1, r5
 800c1e2:	4630      	mov	r0, r6
 800c1e4:	f7ff fbe4 	bl	800b9b0 <__swsetup_r>
 800c1e8:	b170      	cbz	r0, 800c208 <_vfiprintf_r+0x5c>
 800c1ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c1ec:	07dc      	lsls	r4, r3, #31
 800c1ee:	d504      	bpl.n	800c1fa <_vfiprintf_r+0x4e>
 800c1f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1f4:	b01d      	add	sp, #116	@ 0x74
 800c1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1fa:	89ab      	ldrh	r3, [r5, #12]
 800c1fc:	0598      	lsls	r0, r3, #22
 800c1fe:	d4f7      	bmi.n	800c1f0 <_vfiprintf_r+0x44>
 800c200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c202:	f7ff fd29 	bl	800bc58 <__retarget_lock_release_recursive>
 800c206:	e7f3      	b.n	800c1f0 <_vfiprintf_r+0x44>
 800c208:	2300      	movs	r3, #0
 800c20a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c20c:	2320      	movs	r3, #32
 800c20e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c212:	f8cd 800c 	str.w	r8, [sp, #12]
 800c216:	2330      	movs	r3, #48	@ 0x30
 800c218:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c3c8 <_vfiprintf_r+0x21c>
 800c21c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c220:	f04f 0901 	mov.w	r9, #1
 800c224:	4623      	mov	r3, r4
 800c226:	469a      	mov	sl, r3
 800c228:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c22c:	b10a      	cbz	r2, 800c232 <_vfiprintf_r+0x86>
 800c22e:	2a25      	cmp	r2, #37	@ 0x25
 800c230:	d1f9      	bne.n	800c226 <_vfiprintf_r+0x7a>
 800c232:	ebba 0b04 	subs.w	fp, sl, r4
 800c236:	d00b      	beq.n	800c250 <_vfiprintf_r+0xa4>
 800c238:	465b      	mov	r3, fp
 800c23a:	4622      	mov	r2, r4
 800c23c:	4629      	mov	r1, r5
 800c23e:	4630      	mov	r0, r6
 800c240:	f7ff ffa1 	bl	800c186 <__sfputs_r>
 800c244:	3001      	adds	r0, #1
 800c246:	f000 80a7 	beq.w	800c398 <_vfiprintf_r+0x1ec>
 800c24a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c24c:	445a      	add	r2, fp
 800c24e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c250:	f89a 3000 	ldrb.w	r3, [sl]
 800c254:	2b00      	cmp	r3, #0
 800c256:	f000 809f 	beq.w	800c398 <_vfiprintf_r+0x1ec>
 800c25a:	2300      	movs	r3, #0
 800c25c:	f04f 32ff 	mov.w	r2, #4294967295
 800c260:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c264:	f10a 0a01 	add.w	sl, sl, #1
 800c268:	9304      	str	r3, [sp, #16]
 800c26a:	9307      	str	r3, [sp, #28]
 800c26c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c270:	931a      	str	r3, [sp, #104]	@ 0x68
 800c272:	4654      	mov	r4, sl
 800c274:	2205      	movs	r2, #5
 800c276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c27a:	4853      	ldr	r0, [pc, #332]	@ (800c3c8 <_vfiprintf_r+0x21c>)
 800c27c:	f7f3 ffe8 	bl	8000250 <memchr>
 800c280:	9a04      	ldr	r2, [sp, #16]
 800c282:	b9d8      	cbnz	r0, 800c2bc <_vfiprintf_r+0x110>
 800c284:	06d1      	lsls	r1, r2, #27
 800c286:	bf44      	itt	mi
 800c288:	2320      	movmi	r3, #32
 800c28a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c28e:	0713      	lsls	r3, r2, #28
 800c290:	bf44      	itt	mi
 800c292:	232b      	movmi	r3, #43	@ 0x2b
 800c294:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c298:	f89a 3000 	ldrb.w	r3, [sl]
 800c29c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c29e:	d015      	beq.n	800c2cc <_vfiprintf_r+0x120>
 800c2a0:	9a07      	ldr	r2, [sp, #28]
 800c2a2:	4654      	mov	r4, sl
 800c2a4:	2000      	movs	r0, #0
 800c2a6:	f04f 0c0a 	mov.w	ip, #10
 800c2aa:	4621      	mov	r1, r4
 800c2ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2b0:	3b30      	subs	r3, #48	@ 0x30
 800c2b2:	2b09      	cmp	r3, #9
 800c2b4:	d94b      	bls.n	800c34e <_vfiprintf_r+0x1a2>
 800c2b6:	b1b0      	cbz	r0, 800c2e6 <_vfiprintf_r+0x13a>
 800c2b8:	9207      	str	r2, [sp, #28]
 800c2ba:	e014      	b.n	800c2e6 <_vfiprintf_r+0x13a>
 800c2bc:	eba0 0308 	sub.w	r3, r0, r8
 800c2c0:	fa09 f303 	lsl.w	r3, r9, r3
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	9304      	str	r3, [sp, #16]
 800c2c8:	46a2      	mov	sl, r4
 800c2ca:	e7d2      	b.n	800c272 <_vfiprintf_r+0xc6>
 800c2cc:	9b03      	ldr	r3, [sp, #12]
 800c2ce:	1d19      	adds	r1, r3, #4
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	9103      	str	r1, [sp, #12]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	bfbb      	ittet	lt
 800c2d8:	425b      	neglt	r3, r3
 800c2da:	f042 0202 	orrlt.w	r2, r2, #2
 800c2de:	9307      	strge	r3, [sp, #28]
 800c2e0:	9307      	strlt	r3, [sp, #28]
 800c2e2:	bfb8      	it	lt
 800c2e4:	9204      	strlt	r2, [sp, #16]
 800c2e6:	7823      	ldrb	r3, [r4, #0]
 800c2e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2ea:	d10a      	bne.n	800c302 <_vfiprintf_r+0x156>
 800c2ec:	7863      	ldrb	r3, [r4, #1]
 800c2ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2f0:	d132      	bne.n	800c358 <_vfiprintf_r+0x1ac>
 800c2f2:	9b03      	ldr	r3, [sp, #12]
 800c2f4:	1d1a      	adds	r2, r3, #4
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	9203      	str	r2, [sp, #12]
 800c2fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c2fe:	3402      	adds	r4, #2
 800c300:	9305      	str	r3, [sp, #20]
 800c302:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c3d8 <_vfiprintf_r+0x22c>
 800c306:	7821      	ldrb	r1, [r4, #0]
 800c308:	2203      	movs	r2, #3
 800c30a:	4650      	mov	r0, sl
 800c30c:	f7f3 ffa0 	bl	8000250 <memchr>
 800c310:	b138      	cbz	r0, 800c322 <_vfiprintf_r+0x176>
 800c312:	9b04      	ldr	r3, [sp, #16]
 800c314:	eba0 000a 	sub.w	r0, r0, sl
 800c318:	2240      	movs	r2, #64	@ 0x40
 800c31a:	4082      	lsls	r2, r0
 800c31c:	4313      	orrs	r3, r2
 800c31e:	3401      	adds	r4, #1
 800c320:	9304      	str	r3, [sp, #16]
 800c322:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c326:	4829      	ldr	r0, [pc, #164]	@ (800c3cc <_vfiprintf_r+0x220>)
 800c328:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c32c:	2206      	movs	r2, #6
 800c32e:	f7f3 ff8f 	bl	8000250 <memchr>
 800c332:	2800      	cmp	r0, #0
 800c334:	d03f      	beq.n	800c3b6 <_vfiprintf_r+0x20a>
 800c336:	4b26      	ldr	r3, [pc, #152]	@ (800c3d0 <_vfiprintf_r+0x224>)
 800c338:	bb1b      	cbnz	r3, 800c382 <_vfiprintf_r+0x1d6>
 800c33a:	9b03      	ldr	r3, [sp, #12]
 800c33c:	3307      	adds	r3, #7
 800c33e:	f023 0307 	bic.w	r3, r3, #7
 800c342:	3308      	adds	r3, #8
 800c344:	9303      	str	r3, [sp, #12]
 800c346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c348:	443b      	add	r3, r7
 800c34a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c34c:	e76a      	b.n	800c224 <_vfiprintf_r+0x78>
 800c34e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c352:	460c      	mov	r4, r1
 800c354:	2001      	movs	r0, #1
 800c356:	e7a8      	b.n	800c2aa <_vfiprintf_r+0xfe>
 800c358:	2300      	movs	r3, #0
 800c35a:	3401      	adds	r4, #1
 800c35c:	9305      	str	r3, [sp, #20]
 800c35e:	4619      	mov	r1, r3
 800c360:	f04f 0c0a 	mov.w	ip, #10
 800c364:	4620      	mov	r0, r4
 800c366:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c36a:	3a30      	subs	r2, #48	@ 0x30
 800c36c:	2a09      	cmp	r2, #9
 800c36e:	d903      	bls.n	800c378 <_vfiprintf_r+0x1cc>
 800c370:	2b00      	cmp	r3, #0
 800c372:	d0c6      	beq.n	800c302 <_vfiprintf_r+0x156>
 800c374:	9105      	str	r1, [sp, #20]
 800c376:	e7c4      	b.n	800c302 <_vfiprintf_r+0x156>
 800c378:	fb0c 2101 	mla	r1, ip, r1, r2
 800c37c:	4604      	mov	r4, r0
 800c37e:	2301      	movs	r3, #1
 800c380:	e7f0      	b.n	800c364 <_vfiprintf_r+0x1b8>
 800c382:	ab03      	add	r3, sp, #12
 800c384:	9300      	str	r3, [sp, #0]
 800c386:	462a      	mov	r2, r5
 800c388:	4b12      	ldr	r3, [pc, #72]	@ (800c3d4 <_vfiprintf_r+0x228>)
 800c38a:	a904      	add	r1, sp, #16
 800c38c:	4630      	mov	r0, r6
 800c38e:	f3af 8000 	nop.w
 800c392:	4607      	mov	r7, r0
 800c394:	1c78      	adds	r0, r7, #1
 800c396:	d1d6      	bne.n	800c346 <_vfiprintf_r+0x19a>
 800c398:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c39a:	07d9      	lsls	r1, r3, #31
 800c39c:	d405      	bmi.n	800c3aa <_vfiprintf_r+0x1fe>
 800c39e:	89ab      	ldrh	r3, [r5, #12]
 800c3a0:	059a      	lsls	r2, r3, #22
 800c3a2:	d402      	bmi.n	800c3aa <_vfiprintf_r+0x1fe>
 800c3a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c3a6:	f7ff fc57 	bl	800bc58 <__retarget_lock_release_recursive>
 800c3aa:	89ab      	ldrh	r3, [r5, #12]
 800c3ac:	065b      	lsls	r3, r3, #25
 800c3ae:	f53f af1f 	bmi.w	800c1f0 <_vfiprintf_r+0x44>
 800c3b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c3b4:	e71e      	b.n	800c1f4 <_vfiprintf_r+0x48>
 800c3b6:	ab03      	add	r3, sp, #12
 800c3b8:	9300      	str	r3, [sp, #0]
 800c3ba:	462a      	mov	r2, r5
 800c3bc:	4b05      	ldr	r3, [pc, #20]	@ (800c3d4 <_vfiprintf_r+0x228>)
 800c3be:	a904      	add	r1, sp, #16
 800c3c0:	4630      	mov	r0, r6
 800c3c2:	f000 f879 	bl	800c4b8 <_printf_i>
 800c3c6:	e7e4      	b.n	800c392 <_vfiprintf_r+0x1e6>
 800c3c8:	0800dd42 	.word	0x0800dd42
 800c3cc:	0800dd4c 	.word	0x0800dd4c
 800c3d0:	00000000 	.word	0x00000000
 800c3d4:	0800c187 	.word	0x0800c187
 800c3d8:	0800dd48 	.word	0x0800dd48

0800c3dc <_printf_common>:
 800c3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3e0:	4616      	mov	r6, r2
 800c3e2:	4698      	mov	r8, r3
 800c3e4:	688a      	ldr	r2, [r1, #8]
 800c3e6:	690b      	ldr	r3, [r1, #16]
 800c3e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	bfb8      	it	lt
 800c3f0:	4613      	movlt	r3, r2
 800c3f2:	6033      	str	r3, [r6, #0]
 800c3f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c3f8:	4607      	mov	r7, r0
 800c3fa:	460c      	mov	r4, r1
 800c3fc:	b10a      	cbz	r2, 800c402 <_printf_common+0x26>
 800c3fe:	3301      	adds	r3, #1
 800c400:	6033      	str	r3, [r6, #0]
 800c402:	6823      	ldr	r3, [r4, #0]
 800c404:	0699      	lsls	r1, r3, #26
 800c406:	bf42      	ittt	mi
 800c408:	6833      	ldrmi	r3, [r6, #0]
 800c40a:	3302      	addmi	r3, #2
 800c40c:	6033      	strmi	r3, [r6, #0]
 800c40e:	6825      	ldr	r5, [r4, #0]
 800c410:	f015 0506 	ands.w	r5, r5, #6
 800c414:	d106      	bne.n	800c424 <_printf_common+0x48>
 800c416:	f104 0a19 	add.w	sl, r4, #25
 800c41a:	68e3      	ldr	r3, [r4, #12]
 800c41c:	6832      	ldr	r2, [r6, #0]
 800c41e:	1a9b      	subs	r3, r3, r2
 800c420:	42ab      	cmp	r3, r5
 800c422:	dc26      	bgt.n	800c472 <_printf_common+0x96>
 800c424:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c428:	6822      	ldr	r2, [r4, #0]
 800c42a:	3b00      	subs	r3, #0
 800c42c:	bf18      	it	ne
 800c42e:	2301      	movne	r3, #1
 800c430:	0692      	lsls	r2, r2, #26
 800c432:	d42b      	bmi.n	800c48c <_printf_common+0xb0>
 800c434:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c438:	4641      	mov	r1, r8
 800c43a:	4638      	mov	r0, r7
 800c43c:	47c8      	blx	r9
 800c43e:	3001      	adds	r0, #1
 800c440:	d01e      	beq.n	800c480 <_printf_common+0xa4>
 800c442:	6823      	ldr	r3, [r4, #0]
 800c444:	6922      	ldr	r2, [r4, #16]
 800c446:	f003 0306 	and.w	r3, r3, #6
 800c44a:	2b04      	cmp	r3, #4
 800c44c:	bf02      	ittt	eq
 800c44e:	68e5      	ldreq	r5, [r4, #12]
 800c450:	6833      	ldreq	r3, [r6, #0]
 800c452:	1aed      	subeq	r5, r5, r3
 800c454:	68a3      	ldr	r3, [r4, #8]
 800c456:	bf0c      	ite	eq
 800c458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c45c:	2500      	movne	r5, #0
 800c45e:	4293      	cmp	r3, r2
 800c460:	bfc4      	itt	gt
 800c462:	1a9b      	subgt	r3, r3, r2
 800c464:	18ed      	addgt	r5, r5, r3
 800c466:	2600      	movs	r6, #0
 800c468:	341a      	adds	r4, #26
 800c46a:	42b5      	cmp	r5, r6
 800c46c:	d11a      	bne.n	800c4a4 <_printf_common+0xc8>
 800c46e:	2000      	movs	r0, #0
 800c470:	e008      	b.n	800c484 <_printf_common+0xa8>
 800c472:	2301      	movs	r3, #1
 800c474:	4652      	mov	r2, sl
 800c476:	4641      	mov	r1, r8
 800c478:	4638      	mov	r0, r7
 800c47a:	47c8      	blx	r9
 800c47c:	3001      	adds	r0, #1
 800c47e:	d103      	bne.n	800c488 <_printf_common+0xac>
 800c480:	f04f 30ff 	mov.w	r0, #4294967295
 800c484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c488:	3501      	adds	r5, #1
 800c48a:	e7c6      	b.n	800c41a <_printf_common+0x3e>
 800c48c:	18e1      	adds	r1, r4, r3
 800c48e:	1c5a      	adds	r2, r3, #1
 800c490:	2030      	movs	r0, #48	@ 0x30
 800c492:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c496:	4422      	add	r2, r4
 800c498:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c49c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c4a0:	3302      	adds	r3, #2
 800c4a2:	e7c7      	b.n	800c434 <_printf_common+0x58>
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	4622      	mov	r2, r4
 800c4a8:	4641      	mov	r1, r8
 800c4aa:	4638      	mov	r0, r7
 800c4ac:	47c8      	blx	r9
 800c4ae:	3001      	adds	r0, #1
 800c4b0:	d0e6      	beq.n	800c480 <_printf_common+0xa4>
 800c4b2:	3601      	adds	r6, #1
 800c4b4:	e7d9      	b.n	800c46a <_printf_common+0x8e>
	...

0800c4b8 <_printf_i>:
 800c4b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c4bc:	7e0f      	ldrb	r7, [r1, #24]
 800c4be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c4c0:	2f78      	cmp	r7, #120	@ 0x78
 800c4c2:	4691      	mov	r9, r2
 800c4c4:	4680      	mov	r8, r0
 800c4c6:	460c      	mov	r4, r1
 800c4c8:	469a      	mov	sl, r3
 800c4ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c4ce:	d807      	bhi.n	800c4e0 <_printf_i+0x28>
 800c4d0:	2f62      	cmp	r7, #98	@ 0x62
 800c4d2:	d80a      	bhi.n	800c4ea <_printf_i+0x32>
 800c4d4:	2f00      	cmp	r7, #0
 800c4d6:	f000 80d2 	beq.w	800c67e <_printf_i+0x1c6>
 800c4da:	2f58      	cmp	r7, #88	@ 0x58
 800c4dc:	f000 80b9 	beq.w	800c652 <_printf_i+0x19a>
 800c4e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c4e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c4e8:	e03a      	b.n	800c560 <_printf_i+0xa8>
 800c4ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c4ee:	2b15      	cmp	r3, #21
 800c4f0:	d8f6      	bhi.n	800c4e0 <_printf_i+0x28>
 800c4f2:	a101      	add	r1, pc, #4	@ (adr r1, 800c4f8 <_printf_i+0x40>)
 800c4f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c4f8:	0800c551 	.word	0x0800c551
 800c4fc:	0800c565 	.word	0x0800c565
 800c500:	0800c4e1 	.word	0x0800c4e1
 800c504:	0800c4e1 	.word	0x0800c4e1
 800c508:	0800c4e1 	.word	0x0800c4e1
 800c50c:	0800c4e1 	.word	0x0800c4e1
 800c510:	0800c565 	.word	0x0800c565
 800c514:	0800c4e1 	.word	0x0800c4e1
 800c518:	0800c4e1 	.word	0x0800c4e1
 800c51c:	0800c4e1 	.word	0x0800c4e1
 800c520:	0800c4e1 	.word	0x0800c4e1
 800c524:	0800c665 	.word	0x0800c665
 800c528:	0800c58f 	.word	0x0800c58f
 800c52c:	0800c61f 	.word	0x0800c61f
 800c530:	0800c4e1 	.word	0x0800c4e1
 800c534:	0800c4e1 	.word	0x0800c4e1
 800c538:	0800c687 	.word	0x0800c687
 800c53c:	0800c4e1 	.word	0x0800c4e1
 800c540:	0800c58f 	.word	0x0800c58f
 800c544:	0800c4e1 	.word	0x0800c4e1
 800c548:	0800c4e1 	.word	0x0800c4e1
 800c54c:	0800c627 	.word	0x0800c627
 800c550:	6833      	ldr	r3, [r6, #0]
 800c552:	1d1a      	adds	r2, r3, #4
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	6032      	str	r2, [r6, #0]
 800c558:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c55c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c560:	2301      	movs	r3, #1
 800c562:	e09d      	b.n	800c6a0 <_printf_i+0x1e8>
 800c564:	6833      	ldr	r3, [r6, #0]
 800c566:	6820      	ldr	r0, [r4, #0]
 800c568:	1d19      	adds	r1, r3, #4
 800c56a:	6031      	str	r1, [r6, #0]
 800c56c:	0606      	lsls	r6, r0, #24
 800c56e:	d501      	bpl.n	800c574 <_printf_i+0xbc>
 800c570:	681d      	ldr	r5, [r3, #0]
 800c572:	e003      	b.n	800c57c <_printf_i+0xc4>
 800c574:	0645      	lsls	r5, r0, #25
 800c576:	d5fb      	bpl.n	800c570 <_printf_i+0xb8>
 800c578:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c57c:	2d00      	cmp	r5, #0
 800c57e:	da03      	bge.n	800c588 <_printf_i+0xd0>
 800c580:	232d      	movs	r3, #45	@ 0x2d
 800c582:	426d      	negs	r5, r5
 800c584:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c588:	4859      	ldr	r0, [pc, #356]	@ (800c6f0 <_printf_i+0x238>)
 800c58a:	230a      	movs	r3, #10
 800c58c:	e011      	b.n	800c5b2 <_printf_i+0xfa>
 800c58e:	6821      	ldr	r1, [r4, #0]
 800c590:	6833      	ldr	r3, [r6, #0]
 800c592:	0608      	lsls	r0, r1, #24
 800c594:	f853 5b04 	ldr.w	r5, [r3], #4
 800c598:	d402      	bmi.n	800c5a0 <_printf_i+0xe8>
 800c59a:	0649      	lsls	r1, r1, #25
 800c59c:	bf48      	it	mi
 800c59e:	b2ad      	uxthmi	r5, r5
 800c5a0:	2f6f      	cmp	r7, #111	@ 0x6f
 800c5a2:	4853      	ldr	r0, [pc, #332]	@ (800c6f0 <_printf_i+0x238>)
 800c5a4:	6033      	str	r3, [r6, #0]
 800c5a6:	bf14      	ite	ne
 800c5a8:	230a      	movne	r3, #10
 800c5aa:	2308      	moveq	r3, #8
 800c5ac:	2100      	movs	r1, #0
 800c5ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c5b2:	6866      	ldr	r6, [r4, #4]
 800c5b4:	60a6      	str	r6, [r4, #8]
 800c5b6:	2e00      	cmp	r6, #0
 800c5b8:	bfa2      	ittt	ge
 800c5ba:	6821      	ldrge	r1, [r4, #0]
 800c5bc:	f021 0104 	bicge.w	r1, r1, #4
 800c5c0:	6021      	strge	r1, [r4, #0]
 800c5c2:	b90d      	cbnz	r5, 800c5c8 <_printf_i+0x110>
 800c5c4:	2e00      	cmp	r6, #0
 800c5c6:	d04b      	beq.n	800c660 <_printf_i+0x1a8>
 800c5c8:	4616      	mov	r6, r2
 800c5ca:	fbb5 f1f3 	udiv	r1, r5, r3
 800c5ce:	fb03 5711 	mls	r7, r3, r1, r5
 800c5d2:	5dc7      	ldrb	r7, [r0, r7]
 800c5d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c5d8:	462f      	mov	r7, r5
 800c5da:	42bb      	cmp	r3, r7
 800c5dc:	460d      	mov	r5, r1
 800c5de:	d9f4      	bls.n	800c5ca <_printf_i+0x112>
 800c5e0:	2b08      	cmp	r3, #8
 800c5e2:	d10b      	bne.n	800c5fc <_printf_i+0x144>
 800c5e4:	6823      	ldr	r3, [r4, #0]
 800c5e6:	07df      	lsls	r7, r3, #31
 800c5e8:	d508      	bpl.n	800c5fc <_printf_i+0x144>
 800c5ea:	6923      	ldr	r3, [r4, #16]
 800c5ec:	6861      	ldr	r1, [r4, #4]
 800c5ee:	4299      	cmp	r1, r3
 800c5f0:	bfde      	ittt	le
 800c5f2:	2330      	movle	r3, #48	@ 0x30
 800c5f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c5f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c5fc:	1b92      	subs	r2, r2, r6
 800c5fe:	6122      	str	r2, [r4, #16]
 800c600:	f8cd a000 	str.w	sl, [sp]
 800c604:	464b      	mov	r3, r9
 800c606:	aa03      	add	r2, sp, #12
 800c608:	4621      	mov	r1, r4
 800c60a:	4640      	mov	r0, r8
 800c60c:	f7ff fee6 	bl	800c3dc <_printf_common>
 800c610:	3001      	adds	r0, #1
 800c612:	d14a      	bne.n	800c6aa <_printf_i+0x1f2>
 800c614:	f04f 30ff 	mov.w	r0, #4294967295
 800c618:	b004      	add	sp, #16
 800c61a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c61e:	6823      	ldr	r3, [r4, #0]
 800c620:	f043 0320 	orr.w	r3, r3, #32
 800c624:	6023      	str	r3, [r4, #0]
 800c626:	4833      	ldr	r0, [pc, #204]	@ (800c6f4 <_printf_i+0x23c>)
 800c628:	2778      	movs	r7, #120	@ 0x78
 800c62a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c62e:	6823      	ldr	r3, [r4, #0]
 800c630:	6831      	ldr	r1, [r6, #0]
 800c632:	061f      	lsls	r7, r3, #24
 800c634:	f851 5b04 	ldr.w	r5, [r1], #4
 800c638:	d402      	bmi.n	800c640 <_printf_i+0x188>
 800c63a:	065f      	lsls	r7, r3, #25
 800c63c:	bf48      	it	mi
 800c63e:	b2ad      	uxthmi	r5, r5
 800c640:	6031      	str	r1, [r6, #0]
 800c642:	07d9      	lsls	r1, r3, #31
 800c644:	bf44      	itt	mi
 800c646:	f043 0320 	orrmi.w	r3, r3, #32
 800c64a:	6023      	strmi	r3, [r4, #0]
 800c64c:	b11d      	cbz	r5, 800c656 <_printf_i+0x19e>
 800c64e:	2310      	movs	r3, #16
 800c650:	e7ac      	b.n	800c5ac <_printf_i+0xf4>
 800c652:	4827      	ldr	r0, [pc, #156]	@ (800c6f0 <_printf_i+0x238>)
 800c654:	e7e9      	b.n	800c62a <_printf_i+0x172>
 800c656:	6823      	ldr	r3, [r4, #0]
 800c658:	f023 0320 	bic.w	r3, r3, #32
 800c65c:	6023      	str	r3, [r4, #0]
 800c65e:	e7f6      	b.n	800c64e <_printf_i+0x196>
 800c660:	4616      	mov	r6, r2
 800c662:	e7bd      	b.n	800c5e0 <_printf_i+0x128>
 800c664:	6833      	ldr	r3, [r6, #0]
 800c666:	6825      	ldr	r5, [r4, #0]
 800c668:	6961      	ldr	r1, [r4, #20]
 800c66a:	1d18      	adds	r0, r3, #4
 800c66c:	6030      	str	r0, [r6, #0]
 800c66e:	062e      	lsls	r6, r5, #24
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	d501      	bpl.n	800c678 <_printf_i+0x1c0>
 800c674:	6019      	str	r1, [r3, #0]
 800c676:	e002      	b.n	800c67e <_printf_i+0x1c6>
 800c678:	0668      	lsls	r0, r5, #25
 800c67a:	d5fb      	bpl.n	800c674 <_printf_i+0x1bc>
 800c67c:	8019      	strh	r1, [r3, #0]
 800c67e:	2300      	movs	r3, #0
 800c680:	6123      	str	r3, [r4, #16]
 800c682:	4616      	mov	r6, r2
 800c684:	e7bc      	b.n	800c600 <_printf_i+0x148>
 800c686:	6833      	ldr	r3, [r6, #0]
 800c688:	1d1a      	adds	r2, r3, #4
 800c68a:	6032      	str	r2, [r6, #0]
 800c68c:	681e      	ldr	r6, [r3, #0]
 800c68e:	6862      	ldr	r2, [r4, #4]
 800c690:	2100      	movs	r1, #0
 800c692:	4630      	mov	r0, r6
 800c694:	f7f3 fddc 	bl	8000250 <memchr>
 800c698:	b108      	cbz	r0, 800c69e <_printf_i+0x1e6>
 800c69a:	1b80      	subs	r0, r0, r6
 800c69c:	6060      	str	r0, [r4, #4]
 800c69e:	6863      	ldr	r3, [r4, #4]
 800c6a0:	6123      	str	r3, [r4, #16]
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c6a8:	e7aa      	b.n	800c600 <_printf_i+0x148>
 800c6aa:	6923      	ldr	r3, [r4, #16]
 800c6ac:	4632      	mov	r2, r6
 800c6ae:	4649      	mov	r1, r9
 800c6b0:	4640      	mov	r0, r8
 800c6b2:	47d0      	blx	sl
 800c6b4:	3001      	adds	r0, #1
 800c6b6:	d0ad      	beq.n	800c614 <_printf_i+0x15c>
 800c6b8:	6823      	ldr	r3, [r4, #0]
 800c6ba:	079b      	lsls	r3, r3, #30
 800c6bc:	d413      	bmi.n	800c6e6 <_printf_i+0x22e>
 800c6be:	68e0      	ldr	r0, [r4, #12]
 800c6c0:	9b03      	ldr	r3, [sp, #12]
 800c6c2:	4298      	cmp	r0, r3
 800c6c4:	bfb8      	it	lt
 800c6c6:	4618      	movlt	r0, r3
 800c6c8:	e7a6      	b.n	800c618 <_printf_i+0x160>
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	4632      	mov	r2, r6
 800c6ce:	4649      	mov	r1, r9
 800c6d0:	4640      	mov	r0, r8
 800c6d2:	47d0      	blx	sl
 800c6d4:	3001      	adds	r0, #1
 800c6d6:	d09d      	beq.n	800c614 <_printf_i+0x15c>
 800c6d8:	3501      	adds	r5, #1
 800c6da:	68e3      	ldr	r3, [r4, #12]
 800c6dc:	9903      	ldr	r1, [sp, #12]
 800c6de:	1a5b      	subs	r3, r3, r1
 800c6e0:	42ab      	cmp	r3, r5
 800c6e2:	dcf2      	bgt.n	800c6ca <_printf_i+0x212>
 800c6e4:	e7eb      	b.n	800c6be <_printf_i+0x206>
 800c6e6:	2500      	movs	r5, #0
 800c6e8:	f104 0619 	add.w	r6, r4, #25
 800c6ec:	e7f5      	b.n	800c6da <_printf_i+0x222>
 800c6ee:	bf00      	nop
 800c6f0:	0800dd53 	.word	0x0800dd53
 800c6f4:	0800dd64 	.word	0x0800dd64

0800c6f8 <__sflush_r>:
 800c6f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c700:	0716      	lsls	r6, r2, #28
 800c702:	4605      	mov	r5, r0
 800c704:	460c      	mov	r4, r1
 800c706:	d454      	bmi.n	800c7b2 <__sflush_r+0xba>
 800c708:	684b      	ldr	r3, [r1, #4]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	dc02      	bgt.n	800c714 <__sflush_r+0x1c>
 800c70e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c710:	2b00      	cmp	r3, #0
 800c712:	dd48      	ble.n	800c7a6 <__sflush_r+0xae>
 800c714:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c716:	2e00      	cmp	r6, #0
 800c718:	d045      	beq.n	800c7a6 <__sflush_r+0xae>
 800c71a:	2300      	movs	r3, #0
 800c71c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c720:	682f      	ldr	r7, [r5, #0]
 800c722:	6a21      	ldr	r1, [r4, #32]
 800c724:	602b      	str	r3, [r5, #0]
 800c726:	d030      	beq.n	800c78a <__sflush_r+0x92>
 800c728:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c72a:	89a3      	ldrh	r3, [r4, #12]
 800c72c:	0759      	lsls	r1, r3, #29
 800c72e:	d505      	bpl.n	800c73c <__sflush_r+0x44>
 800c730:	6863      	ldr	r3, [r4, #4]
 800c732:	1ad2      	subs	r2, r2, r3
 800c734:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c736:	b10b      	cbz	r3, 800c73c <__sflush_r+0x44>
 800c738:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c73a:	1ad2      	subs	r2, r2, r3
 800c73c:	2300      	movs	r3, #0
 800c73e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c740:	6a21      	ldr	r1, [r4, #32]
 800c742:	4628      	mov	r0, r5
 800c744:	47b0      	blx	r6
 800c746:	1c43      	adds	r3, r0, #1
 800c748:	89a3      	ldrh	r3, [r4, #12]
 800c74a:	d106      	bne.n	800c75a <__sflush_r+0x62>
 800c74c:	6829      	ldr	r1, [r5, #0]
 800c74e:	291d      	cmp	r1, #29
 800c750:	d82b      	bhi.n	800c7aa <__sflush_r+0xb2>
 800c752:	4a2a      	ldr	r2, [pc, #168]	@ (800c7fc <__sflush_r+0x104>)
 800c754:	410a      	asrs	r2, r1
 800c756:	07d6      	lsls	r6, r2, #31
 800c758:	d427      	bmi.n	800c7aa <__sflush_r+0xb2>
 800c75a:	2200      	movs	r2, #0
 800c75c:	6062      	str	r2, [r4, #4]
 800c75e:	04d9      	lsls	r1, r3, #19
 800c760:	6922      	ldr	r2, [r4, #16]
 800c762:	6022      	str	r2, [r4, #0]
 800c764:	d504      	bpl.n	800c770 <__sflush_r+0x78>
 800c766:	1c42      	adds	r2, r0, #1
 800c768:	d101      	bne.n	800c76e <__sflush_r+0x76>
 800c76a:	682b      	ldr	r3, [r5, #0]
 800c76c:	b903      	cbnz	r3, 800c770 <__sflush_r+0x78>
 800c76e:	6560      	str	r0, [r4, #84]	@ 0x54
 800c770:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c772:	602f      	str	r7, [r5, #0]
 800c774:	b1b9      	cbz	r1, 800c7a6 <__sflush_r+0xae>
 800c776:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c77a:	4299      	cmp	r1, r3
 800c77c:	d002      	beq.n	800c784 <__sflush_r+0x8c>
 800c77e:	4628      	mov	r0, r5
 800c780:	f7ff fa92 	bl	800bca8 <_free_r>
 800c784:	2300      	movs	r3, #0
 800c786:	6363      	str	r3, [r4, #52]	@ 0x34
 800c788:	e00d      	b.n	800c7a6 <__sflush_r+0xae>
 800c78a:	2301      	movs	r3, #1
 800c78c:	4628      	mov	r0, r5
 800c78e:	47b0      	blx	r6
 800c790:	4602      	mov	r2, r0
 800c792:	1c50      	adds	r0, r2, #1
 800c794:	d1c9      	bne.n	800c72a <__sflush_r+0x32>
 800c796:	682b      	ldr	r3, [r5, #0]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d0c6      	beq.n	800c72a <__sflush_r+0x32>
 800c79c:	2b1d      	cmp	r3, #29
 800c79e:	d001      	beq.n	800c7a4 <__sflush_r+0xac>
 800c7a0:	2b16      	cmp	r3, #22
 800c7a2:	d11e      	bne.n	800c7e2 <__sflush_r+0xea>
 800c7a4:	602f      	str	r7, [r5, #0]
 800c7a6:	2000      	movs	r0, #0
 800c7a8:	e022      	b.n	800c7f0 <__sflush_r+0xf8>
 800c7aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7ae:	b21b      	sxth	r3, r3
 800c7b0:	e01b      	b.n	800c7ea <__sflush_r+0xf2>
 800c7b2:	690f      	ldr	r7, [r1, #16]
 800c7b4:	2f00      	cmp	r7, #0
 800c7b6:	d0f6      	beq.n	800c7a6 <__sflush_r+0xae>
 800c7b8:	0793      	lsls	r3, r2, #30
 800c7ba:	680e      	ldr	r6, [r1, #0]
 800c7bc:	bf08      	it	eq
 800c7be:	694b      	ldreq	r3, [r1, #20]
 800c7c0:	600f      	str	r7, [r1, #0]
 800c7c2:	bf18      	it	ne
 800c7c4:	2300      	movne	r3, #0
 800c7c6:	eba6 0807 	sub.w	r8, r6, r7
 800c7ca:	608b      	str	r3, [r1, #8]
 800c7cc:	f1b8 0f00 	cmp.w	r8, #0
 800c7d0:	dde9      	ble.n	800c7a6 <__sflush_r+0xae>
 800c7d2:	6a21      	ldr	r1, [r4, #32]
 800c7d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c7d6:	4643      	mov	r3, r8
 800c7d8:	463a      	mov	r2, r7
 800c7da:	4628      	mov	r0, r5
 800c7dc:	47b0      	blx	r6
 800c7de:	2800      	cmp	r0, #0
 800c7e0:	dc08      	bgt.n	800c7f4 <__sflush_r+0xfc>
 800c7e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7ea:	81a3      	strh	r3, [r4, #12]
 800c7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7f4:	4407      	add	r7, r0
 800c7f6:	eba8 0800 	sub.w	r8, r8, r0
 800c7fa:	e7e7      	b.n	800c7cc <__sflush_r+0xd4>
 800c7fc:	dfbffffe 	.word	0xdfbffffe

0800c800 <_fflush_r>:
 800c800:	b538      	push	{r3, r4, r5, lr}
 800c802:	690b      	ldr	r3, [r1, #16]
 800c804:	4605      	mov	r5, r0
 800c806:	460c      	mov	r4, r1
 800c808:	b913      	cbnz	r3, 800c810 <_fflush_r+0x10>
 800c80a:	2500      	movs	r5, #0
 800c80c:	4628      	mov	r0, r5
 800c80e:	bd38      	pop	{r3, r4, r5, pc}
 800c810:	b118      	cbz	r0, 800c81a <_fflush_r+0x1a>
 800c812:	6a03      	ldr	r3, [r0, #32]
 800c814:	b90b      	cbnz	r3, 800c81a <_fflush_r+0x1a>
 800c816:	f7fe ff7b 	bl	800b710 <__sinit>
 800c81a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d0f3      	beq.n	800c80a <_fflush_r+0xa>
 800c822:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c824:	07d0      	lsls	r0, r2, #31
 800c826:	d404      	bmi.n	800c832 <_fflush_r+0x32>
 800c828:	0599      	lsls	r1, r3, #22
 800c82a:	d402      	bmi.n	800c832 <_fflush_r+0x32>
 800c82c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c82e:	f7ff fa12 	bl	800bc56 <__retarget_lock_acquire_recursive>
 800c832:	4628      	mov	r0, r5
 800c834:	4621      	mov	r1, r4
 800c836:	f7ff ff5f 	bl	800c6f8 <__sflush_r>
 800c83a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c83c:	07da      	lsls	r2, r3, #31
 800c83e:	4605      	mov	r5, r0
 800c840:	d4e4      	bmi.n	800c80c <_fflush_r+0xc>
 800c842:	89a3      	ldrh	r3, [r4, #12]
 800c844:	059b      	lsls	r3, r3, #22
 800c846:	d4e1      	bmi.n	800c80c <_fflush_r+0xc>
 800c848:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c84a:	f7ff fa05 	bl	800bc58 <__retarget_lock_release_recursive>
 800c84e:	e7dd      	b.n	800c80c <_fflush_r+0xc>

0800c850 <fiprintf>:
 800c850:	b40e      	push	{r1, r2, r3}
 800c852:	b503      	push	{r0, r1, lr}
 800c854:	4601      	mov	r1, r0
 800c856:	ab03      	add	r3, sp, #12
 800c858:	4805      	ldr	r0, [pc, #20]	@ (800c870 <fiprintf+0x20>)
 800c85a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c85e:	6800      	ldr	r0, [r0, #0]
 800c860:	9301      	str	r3, [sp, #4]
 800c862:	f7ff fca3 	bl	800c1ac <_vfiprintf_r>
 800c866:	b002      	add	sp, #8
 800c868:	f85d eb04 	ldr.w	lr, [sp], #4
 800c86c:	b003      	add	sp, #12
 800c86e:	4770      	bx	lr
 800c870:	200000f0 	.word	0x200000f0

0800c874 <__swhatbuf_r>:
 800c874:	b570      	push	{r4, r5, r6, lr}
 800c876:	460c      	mov	r4, r1
 800c878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c87c:	2900      	cmp	r1, #0
 800c87e:	b096      	sub	sp, #88	@ 0x58
 800c880:	4615      	mov	r5, r2
 800c882:	461e      	mov	r6, r3
 800c884:	da0d      	bge.n	800c8a2 <__swhatbuf_r+0x2e>
 800c886:	89a3      	ldrh	r3, [r4, #12]
 800c888:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c88c:	f04f 0100 	mov.w	r1, #0
 800c890:	bf14      	ite	ne
 800c892:	2340      	movne	r3, #64	@ 0x40
 800c894:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c898:	2000      	movs	r0, #0
 800c89a:	6031      	str	r1, [r6, #0]
 800c89c:	602b      	str	r3, [r5, #0]
 800c89e:	b016      	add	sp, #88	@ 0x58
 800c8a0:	bd70      	pop	{r4, r5, r6, pc}
 800c8a2:	466a      	mov	r2, sp
 800c8a4:	f000 f8a4 	bl	800c9f0 <_fstat_r>
 800c8a8:	2800      	cmp	r0, #0
 800c8aa:	dbec      	blt.n	800c886 <__swhatbuf_r+0x12>
 800c8ac:	9901      	ldr	r1, [sp, #4]
 800c8ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c8b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c8b6:	4259      	negs	r1, r3
 800c8b8:	4159      	adcs	r1, r3
 800c8ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c8be:	e7eb      	b.n	800c898 <__swhatbuf_r+0x24>

0800c8c0 <__smakebuf_r>:
 800c8c0:	898b      	ldrh	r3, [r1, #12]
 800c8c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8c4:	079d      	lsls	r5, r3, #30
 800c8c6:	4606      	mov	r6, r0
 800c8c8:	460c      	mov	r4, r1
 800c8ca:	d507      	bpl.n	800c8dc <__smakebuf_r+0x1c>
 800c8cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c8d0:	6023      	str	r3, [r4, #0]
 800c8d2:	6123      	str	r3, [r4, #16]
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	6163      	str	r3, [r4, #20]
 800c8d8:	b003      	add	sp, #12
 800c8da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8dc:	ab01      	add	r3, sp, #4
 800c8de:	466a      	mov	r2, sp
 800c8e0:	f7ff ffc8 	bl	800c874 <__swhatbuf_r>
 800c8e4:	9f00      	ldr	r7, [sp, #0]
 800c8e6:	4605      	mov	r5, r0
 800c8e8:	4639      	mov	r1, r7
 800c8ea:	4630      	mov	r0, r6
 800c8ec:	f7ff fa50 	bl	800bd90 <_malloc_r>
 800c8f0:	b948      	cbnz	r0, 800c906 <__smakebuf_r+0x46>
 800c8f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8f6:	059a      	lsls	r2, r3, #22
 800c8f8:	d4ee      	bmi.n	800c8d8 <__smakebuf_r+0x18>
 800c8fa:	f023 0303 	bic.w	r3, r3, #3
 800c8fe:	f043 0302 	orr.w	r3, r3, #2
 800c902:	81a3      	strh	r3, [r4, #12]
 800c904:	e7e2      	b.n	800c8cc <__smakebuf_r+0xc>
 800c906:	89a3      	ldrh	r3, [r4, #12]
 800c908:	6020      	str	r0, [r4, #0]
 800c90a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c90e:	81a3      	strh	r3, [r4, #12]
 800c910:	9b01      	ldr	r3, [sp, #4]
 800c912:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c916:	b15b      	cbz	r3, 800c930 <__smakebuf_r+0x70>
 800c918:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c91c:	4630      	mov	r0, r6
 800c91e:	f000 f879 	bl	800ca14 <_isatty_r>
 800c922:	b128      	cbz	r0, 800c930 <__smakebuf_r+0x70>
 800c924:	89a3      	ldrh	r3, [r4, #12]
 800c926:	f023 0303 	bic.w	r3, r3, #3
 800c92a:	f043 0301 	orr.w	r3, r3, #1
 800c92e:	81a3      	strh	r3, [r4, #12]
 800c930:	89a3      	ldrh	r3, [r4, #12]
 800c932:	431d      	orrs	r5, r3
 800c934:	81a5      	strh	r5, [r4, #12]
 800c936:	e7cf      	b.n	800c8d8 <__smakebuf_r+0x18>

0800c938 <_putc_r>:
 800c938:	b570      	push	{r4, r5, r6, lr}
 800c93a:	460d      	mov	r5, r1
 800c93c:	4614      	mov	r4, r2
 800c93e:	4606      	mov	r6, r0
 800c940:	b118      	cbz	r0, 800c94a <_putc_r+0x12>
 800c942:	6a03      	ldr	r3, [r0, #32]
 800c944:	b90b      	cbnz	r3, 800c94a <_putc_r+0x12>
 800c946:	f7fe fee3 	bl	800b710 <__sinit>
 800c94a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c94c:	07d8      	lsls	r0, r3, #31
 800c94e:	d405      	bmi.n	800c95c <_putc_r+0x24>
 800c950:	89a3      	ldrh	r3, [r4, #12]
 800c952:	0599      	lsls	r1, r3, #22
 800c954:	d402      	bmi.n	800c95c <_putc_r+0x24>
 800c956:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c958:	f7ff f97d 	bl	800bc56 <__retarget_lock_acquire_recursive>
 800c95c:	68a3      	ldr	r3, [r4, #8]
 800c95e:	3b01      	subs	r3, #1
 800c960:	2b00      	cmp	r3, #0
 800c962:	60a3      	str	r3, [r4, #8]
 800c964:	da05      	bge.n	800c972 <_putc_r+0x3a>
 800c966:	69a2      	ldr	r2, [r4, #24]
 800c968:	4293      	cmp	r3, r2
 800c96a:	db12      	blt.n	800c992 <_putc_r+0x5a>
 800c96c:	b2eb      	uxtb	r3, r5
 800c96e:	2b0a      	cmp	r3, #10
 800c970:	d00f      	beq.n	800c992 <_putc_r+0x5a>
 800c972:	6823      	ldr	r3, [r4, #0]
 800c974:	1c5a      	adds	r2, r3, #1
 800c976:	6022      	str	r2, [r4, #0]
 800c978:	701d      	strb	r5, [r3, #0]
 800c97a:	b2ed      	uxtb	r5, r5
 800c97c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c97e:	07da      	lsls	r2, r3, #31
 800c980:	d405      	bmi.n	800c98e <_putc_r+0x56>
 800c982:	89a3      	ldrh	r3, [r4, #12]
 800c984:	059b      	lsls	r3, r3, #22
 800c986:	d402      	bmi.n	800c98e <_putc_r+0x56>
 800c988:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c98a:	f7ff f965 	bl	800bc58 <__retarget_lock_release_recursive>
 800c98e:	4628      	mov	r0, r5
 800c990:	bd70      	pop	{r4, r5, r6, pc}
 800c992:	4629      	mov	r1, r5
 800c994:	4622      	mov	r2, r4
 800c996:	4630      	mov	r0, r6
 800c998:	f7fe ffcb 	bl	800b932 <__swbuf_r>
 800c99c:	4605      	mov	r5, r0
 800c99e:	e7ed      	b.n	800c97c <_putc_r+0x44>

0800c9a0 <memmove>:
 800c9a0:	4288      	cmp	r0, r1
 800c9a2:	b510      	push	{r4, lr}
 800c9a4:	eb01 0402 	add.w	r4, r1, r2
 800c9a8:	d902      	bls.n	800c9b0 <memmove+0x10>
 800c9aa:	4284      	cmp	r4, r0
 800c9ac:	4623      	mov	r3, r4
 800c9ae:	d807      	bhi.n	800c9c0 <memmove+0x20>
 800c9b0:	1e43      	subs	r3, r0, #1
 800c9b2:	42a1      	cmp	r1, r4
 800c9b4:	d008      	beq.n	800c9c8 <memmove+0x28>
 800c9b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c9be:	e7f8      	b.n	800c9b2 <memmove+0x12>
 800c9c0:	4402      	add	r2, r0
 800c9c2:	4601      	mov	r1, r0
 800c9c4:	428a      	cmp	r2, r1
 800c9c6:	d100      	bne.n	800c9ca <memmove+0x2a>
 800c9c8:	bd10      	pop	{r4, pc}
 800c9ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c9ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c9d2:	e7f7      	b.n	800c9c4 <memmove+0x24>

0800c9d4 <strchr>:
 800c9d4:	b2c9      	uxtb	r1, r1
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9de:	b112      	cbz	r2, 800c9e6 <strchr+0x12>
 800c9e0:	428a      	cmp	r2, r1
 800c9e2:	d1f9      	bne.n	800c9d8 <strchr+0x4>
 800c9e4:	4770      	bx	lr
 800c9e6:	2900      	cmp	r1, #0
 800c9e8:	bf18      	it	ne
 800c9ea:	2000      	movne	r0, #0
 800c9ec:	4770      	bx	lr
	...

0800c9f0 <_fstat_r>:
 800c9f0:	b538      	push	{r3, r4, r5, lr}
 800c9f2:	4d07      	ldr	r5, [pc, #28]	@ (800ca10 <_fstat_r+0x20>)
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	4604      	mov	r4, r0
 800c9f8:	4608      	mov	r0, r1
 800c9fa:	4611      	mov	r1, r2
 800c9fc:	602b      	str	r3, [r5, #0]
 800c9fe:	f7f4 f9e8 	bl	8000dd2 <_fstat>
 800ca02:	1c43      	adds	r3, r0, #1
 800ca04:	d102      	bne.n	800ca0c <_fstat_r+0x1c>
 800ca06:	682b      	ldr	r3, [r5, #0]
 800ca08:	b103      	cbz	r3, 800ca0c <_fstat_r+0x1c>
 800ca0a:	6023      	str	r3, [r4, #0]
 800ca0c:	bd38      	pop	{r3, r4, r5, pc}
 800ca0e:	bf00      	nop
 800ca10:	20002a20 	.word	0x20002a20

0800ca14 <_isatty_r>:
 800ca14:	b538      	push	{r3, r4, r5, lr}
 800ca16:	4d06      	ldr	r5, [pc, #24]	@ (800ca30 <_isatty_r+0x1c>)
 800ca18:	2300      	movs	r3, #0
 800ca1a:	4604      	mov	r4, r0
 800ca1c:	4608      	mov	r0, r1
 800ca1e:	602b      	str	r3, [r5, #0]
 800ca20:	f7f4 f9e7 	bl	8000df2 <_isatty>
 800ca24:	1c43      	adds	r3, r0, #1
 800ca26:	d102      	bne.n	800ca2e <_isatty_r+0x1a>
 800ca28:	682b      	ldr	r3, [r5, #0]
 800ca2a:	b103      	cbz	r3, 800ca2e <_isatty_r+0x1a>
 800ca2c:	6023      	str	r3, [r4, #0]
 800ca2e:	bd38      	pop	{r3, r4, r5, pc}
 800ca30:	20002a20 	.word	0x20002a20

0800ca34 <_sbrk_r>:
 800ca34:	b538      	push	{r3, r4, r5, lr}
 800ca36:	4d06      	ldr	r5, [pc, #24]	@ (800ca50 <_sbrk_r+0x1c>)
 800ca38:	2300      	movs	r3, #0
 800ca3a:	4604      	mov	r4, r0
 800ca3c:	4608      	mov	r0, r1
 800ca3e:	602b      	str	r3, [r5, #0]
 800ca40:	f7f4 f9f0 	bl	8000e24 <_sbrk>
 800ca44:	1c43      	adds	r3, r0, #1
 800ca46:	d102      	bne.n	800ca4e <_sbrk_r+0x1a>
 800ca48:	682b      	ldr	r3, [r5, #0]
 800ca4a:	b103      	cbz	r3, 800ca4e <_sbrk_r+0x1a>
 800ca4c:	6023      	str	r3, [r4, #0]
 800ca4e:	bd38      	pop	{r3, r4, r5, pc}
 800ca50:	20002a20 	.word	0x20002a20

0800ca54 <memcpy>:
 800ca54:	440a      	add	r2, r1
 800ca56:	4291      	cmp	r1, r2
 800ca58:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca5c:	d100      	bne.n	800ca60 <memcpy+0xc>
 800ca5e:	4770      	bx	lr
 800ca60:	b510      	push	{r4, lr}
 800ca62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca6a:	4291      	cmp	r1, r2
 800ca6c:	d1f9      	bne.n	800ca62 <memcpy+0xe>
 800ca6e:	bd10      	pop	{r4, pc}

0800ca70 <abort>:
 800ca70:	b508      	push	{r3, lr}
 800ca72:	2006      	movs	r0, #6
 800ca74:	f000 f85a 	bl	800cb2c <raise>
 800ca78:	2001      	movs	r0, #1
 800ca7a:	f7f4 f95a 	bl	8000d32 <_exit>

0800ca7e <_realloc_r>:
 800ca7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca82:	4680      	mov	r8, r0
 800ca84:	4615      	mov	r5, r2
 800ca86:	460c      	mov	r4, r1
 800ca88:	b921      	cbnz	r1, 800ca94 <_realloc_r+0x16>
 800ca8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca8e:	4611      	mov	r1, r2
 800ca90:	f7ff b97e 	b.w	800bd90 <_malloc_r>
 800ca94:	b92a      	cbnz	r2, 800caa2 <_realloc_r+0x24>
 800ca96:	f7ff f907 	bl	800bca8 <_free_r>
 800ca9a:	2400      	movs	r4, #0
 800ca9c:	4620      	mov	r0, r4
 800ca9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caa2:	f000 f85f 	bl	800cb64 <_malloc_usable_size_r>
 800caa6:	4285      	cmp	r5, r0
 800caa8:	4606      	mov	r6, r0
 800caaa:	d802      	bhi.n	800cab2 <_realloc_r+0x34>
 800caac:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cab0:	d8f4      	bhi.n	800ca9c <_realloc_r+0x1e>
 800cab2:	4629      	mov	r1, r5
 800cab4:	4640      	mov	r0, r8
 800cab6:	f7ff f96b 	bl	800bd90 <_malloc_r>
 800caba:	4607      	mov	r7, r0
 800cabc:	2800      	cmp	r0, #0
 800cabe:	d0ec      	beq.n	800ca9a <_realloc_r+0x1c>
 800cac0:	42b5      	cmp	r5, r6
 800cac2:	462a      	mov	r2, r5
 800cac4:	4621      	mov	r1, r4
 800cac6:	bf28      	it	cs
 800cac8:	4632      	movcs	r2, r6
 800caca:	f7ff ffc3 	bl	800ca54 <memcpy>
 800cace:	4621      	mov	r1, r4
 800cad0:	4640      	mov	r0, r8
 800cad2:	f7ff f8e9 	bl	800bca8 <_free_r>
 800cad6:	463c      	mov	r4, r7
 800cad8:	e7e0      	b.n	800ca9c <_realloc_r+0x1e>

0800cada <_raise_r>:
 800cada:	291f      	cmp	r1, #31
 800cadc:	b538      	push	{r3, r4, r5, lr}
 800cade:	4605      	mov	r5, r0
 800cae0:	460c      	mov	r4, r1
 800cae2:	d904      	bls.n	800caee <_raise_r+0x14>
 800cae4:	2316      	movs	r3, #22
 800cae6:	6003      	str	r3, [r0, #0]
 800cae8:	f04f 30ff 	mov.w	r0, #4294967295
 800caec:	bd38      	pop	{r3, r4, r5, pc}
 800caee:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800caf0:	b112      	cbz	r2, 800caf8 <_raise_r+0x1e>
 800caf2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800caf6:	b94b      	cbnz	r3, 800cb0c <_raise_r+0x32>
 800caf8:	4628      	mov	r0, r5
 800cafa:	f000 f831 	bl	800cb60 <_getpid_r>
 800cafe:	4622      	mov	r2, r4
 800cb00:	4601      	mov	r1, r0
 800cb02:	4628      	mov	r0, r5
 800cb04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb08:	f000 b818 	b.w	800cb3c <_kill_r>
 800cb0c:	2b01      	cmp	r3, #1
 800cb0e:	d00a      	beq.n	800cb26 <_raise_r+0x4c>
 800cb10:	1c59      	adds	r1, r3, #1
 800cb12:	d103      	bne.n	800cb1c <_raise_r+0x42>
 800cb14:	2316      	movs	r3, #22
 800cb16:	6003      	str	r3, [r0, #0]
 800cb18:	2001      	movs	r0, #1
 800cb1a:	e7e7      	b.n	800caec <_raise_r+0x12>
 800cb1c:	2100      	movs	r1, #0
 800cb1e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cb22:	4620      	mov	r0, r4
 800cb24:	4798      	blx	r3
 800cb26:	2000      	movs	r0, #0
 800cb28:	e7e0      	b.n	800caec <_raise_r+0x12>
	...

0800cb2c <raise>:
 800cb2c:	4b02      	ldr	r3, [pc, #8]	@ (800cb38 <raise+0xc>)
 800cb2e:	4601      	mov	r1, r0
 800cb30:	6818      	ldr	r0, [r3, #0]
 800cb32:	f7ff bfd2 	b.w	800cada <_raise_r>
 800cb36:	bf00      	nop
 800cb38:	200000f0 	.word	0x200000f0

0800cb3c <_kill_r>:
 800cb3c:	b538      	push	{r3, r4, r5, lr}
 800cb3e:	4d07      	ldr	r5, [pc, #28]	@ (800cb5c <_kill_r+0x20>)
 800cb40:	2300      	movs	r3, #0
 800cb42:	4604      	mov	r4, r0
 800cb44:	4608      	mov	r0, r1
 800cb46:	4611      	mov	r1, r2
 800cb48:	602b      	str	r3, [r5, #0]
 800cb4a:	f7f4 f8e2 	bl	8000d12 <_kill>
 800cb4e:	1c43      	adds	r3, r0, #1
 800cb50:	d102      	bne.n	800cb58 <_kill_r+0x1c>
 800cb52:	682b      	ldr	r3, [r5, #0]
 800cb54:	b103      	cbz	r3, 800cb58 <_kill_r+0x1c>
 800cb56:	6023      	str	r3, [r4, #0]
 800cb58:	bd38      	pop	{r3, r4, r5, pc}
 800cb5a:	bf00      	nop
 800cb5c:	20002a20 	.word	0x20002a20

0800cb60 <_getpid_r>:
 800cb60:	f7f4 b8cf 	b.w	8000d02 <_getpid>

0800cb64 <_malloc_usable_size_r>:
 800cb64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb68:	1f18      	subs	r0, r3, #4
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	bfbc      	itt	lt
 800cb6e:	580b      	ldrlt	r3, [r1, r0]
 800cb70:	18c0      	addlt	r0, r0, r3
 800cb72:	4770      	bx	lr

0800cb74 <_init>:
 800cb74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb76:	bf00      	nop
 800cb78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb7a:	bc08      	pop	{r3}
 800cb7c:	469e      	mov	lr, r3
 800cb7e:	4770      	bx	lr

0800cb80 <_fini>:
 800cb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb82:	bf00      	nop
 800cb84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb86:	bc08      	pop	{r3}
 800cb88:	469e      	mov	lr, r3
 800cb8a:	4770      	bx	lr
